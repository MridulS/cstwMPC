(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[   1378976,      29780]
NotebookOptionsPosition[   1297256,      27829]
NotebookOutlinePosition[   1297601,      27844]
CellTagsIndexPosition[   1297558,      27841]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
(* DoAll.nb *)

(* This file runs all the files *)

(* Net worth data are used unless otherwise noted *)



ClearAll[\"Global`*\"];





(* Models without aggregate shock *)

Print[\"======================================================================\
=====\"];

Print[\"======================================================================\
=====\"];

Print[\"Models without aggregate shock\"];



SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 

<<SolveAndSimPF.m;              (* Run PF rep agent and partial eq PF models *)



ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[NoAggShockDir]; 

<<FindBeta.m;                    (* Run model with point (unique) time pref \
factor and estimate \[Beta] *)

<<FindBetaDistSeven.m;           (* Run \[Beta]-Dist model with time pref \
factors approximated by seven points and estimate params *)



<<PlotCFuncandDeltaMZero.m;      (* Plots c func of the most patient and \
Delta m = 0 line *)

CFuncandDeltaMZeroPlot            (* Plot figure *)



ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[NoAggShockDir]; 

<<SolveAndSimKSNoAggShock.m;     (* Run KS-JEDC model without aggregate shock \
*)



ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[NoAggShockDir]; 

<<SolveAndSimKSHeteroNoAggShock.m;     (* Run KS-Hetero model without \
aggregate shock *)





<<PlotDistributionsWealthLevSCF_CastanedaAndDistSevenNoAggShock.m; 

Print[\" Figure of wealth distribution (without aggregate shock) \"]; 

CumWLevSCFCastanedaAndDistSevenNoAggShockPlot (* Plot *)



<<PlotDistributionsWealthLevSCF_CastanedaAndPointNoAggShock.m;



<<FindBetaDistSevenReiterOnly.m; (* Run \[Beta]-Dist model without \
simulations and estimate params *)

(*

<<PlotWYRatioSCF_AndDistSeven.m; (* Plot US data and data generated using \
Reiter's (transition matrix) method *)

Print[\" Plot wealth perm income ratios\"];

WYRatioPlot (* Plot *)

*)





(* Liquid FINANCIAL assets plus retirement assets *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

SetDirectory[NoAggShockDir]; 

<<FindBetaDistSevenLiqFinPlsRet.m;           (* Run \[Beta]-Dist model with \
time pref factors approximated by seven points and estimate params. Matching \
liquid FINANCIAL assets plus retirement assets. *)



<<PlotCFuncandDeltaMZeroLiqFinPlsRet.m; 

PlotCFuncandDeltaMZeroLiqFinPlsRetPlot        (* plot *)





ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

SetDirectory[NoAggShockDir]; 

<<EstimateMoffittGottschalkProcess.m; 







(* alt vars for KS point model *)

(* Models without aggregate shock *)

Print[\"=============================================================\"];

Print[\"Alt params\"];

Print[\"Models without aggregate shock\"];



ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[NoAggShockDir]; 



Print[\"High variance of tran shocks\"];

<<FindBetaHighTran.m;                    (* Run model with point (unique) \
time pref factor and estimate \[Beta] *)



Print[\"High variance of perm shocks\"];

<<FindBetaHighPerm.m;                    (* Run model with point (unique) \
time pref factor and estimate \[Beta] *)







(* Models with aggregate shocks *)

Print[\"======================================================================\
=====\"];

Print[\"======================================================================\
=====\"];

Print[\"Models with aggregate shocks\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 

<<SolveAndSimKS.m;             (* Run rep agent and KS-JEDC model. Rep agent \
model is run as a first step. *)

Print[\" Figure fCrossSectionVar \"]

<<PlotfCrossSectionVar.m;      (* Plot fCrossSectionVar *)  

fCrossSectionVar



<<SolveAndSimKSHetero.m;       (* Run rep agent and KS-Hetero model. Rep \
agent model is run as a first step. *)

<<SolveAndSimPoint.m;          (* Run \[Beta]-Point model *)

Print[\" Figure of consumption function\"];

CFuncPointPlotALL 



CFuncPointAndHistNetWorthPlot





<<FindBetaDistSeven.m;         (* Estimates parameter values for \[Beta]-Dist \
model (with aggregate shocks) *)

Print[\" Matrix for \[EmptyDownTriangle]/3.5, \[Beta]middle, KLevMean, \
SumOfDevSq:\"]; 

StatsMat // MatrixForm

<<SolveAndSimDistSeven.m;      (* Run \[Beta]-Dist model with time pref \
factors approximated by seven points *)

Print[\" Figure of consumption function\"];

CFuncDistSevenPointAndHistNetWorthPlot



CFuncDistSevenAndHistNetWorthLiqFinPlsRetPlot



CFuncDistSevenPointAndHistNetWorthPlot





<<SolveAndSimKS_experiments.m; (* Run an experiment using KS-JEDC model *)

Print[\" Figure of interst rate\"]; 

RPlot      

Print[\" Figure of consumption growth\"]; 

dlAggCtPlot 

<<PlotDistributionsWealthLevSCF_CastanedaAndDistSeven.m; 

Print[\" Figure of wealth distribution (with aggregate shocks) \"]; 

CumWLevSCFCastanedaAndDistSevenPlot   (* Plot *)





(* Liquid FINANCIAL assets plus retirement assets *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 

<<FindBetaDistSevenLiqFinPlsRet.m;         (* Estimates parameter values for \
\[Beta]-Dist model (with aggregate shocks). Matching liquid FINANCIAL assets. \
*)

Print[\" Matrix for \[EmptyDownTriangle]/3.5, \[Beta]middle, KLevMean, \
SumOfDevSq:\"]; 

StatsMat // MatrixForm

<<SolveAndSimDistSevenLiqFinPlsRet.m;      (* Run \[Beta]-Dist model with \
time pref factors approximated by seven points. Using parameter values \
estimated by matching liquid FINANCIAL assets plus retirement assets. *)





<<PlotDistributionsMPCsDistSevenKSAggShocks.m;

Print[\" Figure of MPC comparison\"];       (* Show distribution of MPCs when \
matching net worth and liq financial assets *)

DistributionsMPCsDistSevenAndKSKSAggShocksLiqFinPlsRetPlot (* Plot *)



(* Solve rep agent model with aggregate shocks *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 

<<SolveAndSimRepAgent.m; 





(* Models with alt params *)

Print[\"=============================================================\"];

Print[\"Alt params\"];

Print[\"Models with aggregate shocks\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 



Print[\"High variance of tran shocks\"];

<<SolveAndSimPointHighTran.m;          (* Run \[Beta]-Point model *)



Print[\"High variance of perm shocks\"];

<<SolveAndSimPointHighPerm.m;          (* Run \[Beta]-Point model *)









(* Models with aggregate PERMANENT shock *)

Print[\"======================================================================\
=====\"];

Print[\"======================================================================\
=====\"];

Print[\"Models with aggregate permanent shocks\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggPermShocksDir = Directory[] <> \"/WithAggPermShocks\"; (* Directory \
where files with PERMANENT aggregate shocks + file for PF rep agent are saved \
*)

SetDirectory[WithAggPermShocksDir]; 



<<SolveAndSimPoint.m;      (* Run \[Beta]-Point model *)

<<SolveAndSimDistSeven.m;  (* Run \[Beta]-Dist model with time pref factors \
approximated by seven points *)



Print[\" Figure of consumption function\"];

CFuncDistSevenPointPermAndHistNetWorthPlot



CFuncDistSevenPermAndHistNetWorthLiqFinPlot



CFuncDistSevenPointPermAndHistNetWorthPlot



<<PlotDistributionsWealthLevSCF_CastanedaAndDistSevenPerm.m; 

Print[\" Figure of wealth distribution\"]; 

CumWLevSCFCastanedaAndDistSevenPermPlot (* Plot *)





(* Liquid FINANCIAL assets plus retirement assets *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggPermShocksDir = Directory[] <> \"/WithAggPermShocks\"; (* Directory \
where files with PERMANENT aggregate shocks + file for PF rep agent are saved \
*)

SetDirectory[WithAggPermShocksDir]; 

<<SolveAndSimDistSevenLiqFinPlsRet.m;  (* Run \[Beta]-Dist model with time \
pref factors approximated by seven points. Using parameter values estimated \
by matching liquid FINANCIAL assets plus retirement assets. *)





<<PlotDistributionsMPCsDistSevenPerm.m;

Print[\" Figure of MPC comparison\"]; (* Show distribution of MPCs when \
matching net worth and liq financial assets *)

DistributionsMPCsDistSevenAndKSPermShocksLiqFinPlsRetPlot (* Plot *)







(* Robustness check: if people die at age 100 years  *)

Print[\"======================================================================\
=====\"];

Print[\"Robustness check: if people die at age 100 years \"]



(* Models without aggregate shock *)

Print[\"======================================================================\
=====\"];

Print[\"Models without aggregate shock\"];



(* Liquid FINANCIAL assets plus retirement assets *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir    = Directory[] <> \"/NoAggShock\";    (* Directory where \
files without aggregate shock are saved *)

SetDirectory[NoAggShockDir]; 

<<FindBetaDistSevenLiqFinPlsRetDeathFrAge.m;           (* Run \[Beta]-Dist \
model with time pref factors approximated by seven points and estimate \
params. Matching liquid FINANCIAL assets plus retirement assets. *)



(* Models with aggregate PERMANENT shock *)

Print[\"======================================================================\
=====\"];

Print[\"Models with aggregate permanent shocks\"];



(* Liquid FINANCIAL assets plus retirement assets *)

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggPermShocksDir = Directory[] <> \"/WithAggPermShocks\"; (* Directory \
where files with PERMANENT aggregate shocks + file for PF rep agent are saved \
*)

SetDirectory[WithAggPermShocksDir]; 

<<SolveAndSimDistSevenLiqFinPlsRetDeathFrAge.m;  (* Run \[Beta]-Dist model \
with time pref factors approximated by seven points. Using parameter values \
estimated by matching liquid FINANCIAL assets plus retirement assets. *)





(*



(* Robustness check with an ALTERNATIVE parameter for income shocks *)

Print[\"======================================================================\
=====\"];

Print[\"Robustness checks: Run \[Beta]-Dist model with an ALTERNATIVE \
parameter for income shocks\"]

Print[\"Std of quarterly transitory shocks is 0.1 (half of the baseline)\"]



(* Model without aggregate shock *)

Print[\"======================================================================\
=====\"];

Print[\"Model without aggregate shock\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

NoAggShockDir = Directory[] <> \"/NoAggShock\"; (* Directory where files \
without aggregate shock are saved *)

SetDirectory[NoAggShockDir]; 

<<FindBetaDistSevenAltParamsLiqFinPlsRet.m;              (* Run \[Beta]-Dist \
model with time pref factors approximated by seven points and estimate \
params. Matching liquid FINANCIAL assets plus retirement assets. *)



(*

(* Model with aggregate shocks *)

Print[\"======================================================================\
=====\"];

Print[\"Model with aggregate shocks\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggShocksDir = Directory[] <> \"/WithAggShocks\"; (* Directory where \
files with aggregate shocks + file for PF rep agent are saved *)

SetDirectory[WithAggShocksDir]; 



<<FindBetaDistSevenAltParamsLiqFinPlsRet.m;         (* Estimates parameter \
values for \[Beta]-Dist model (with aggregate shocks). Matching liquid \
FINANCIAL assets. *)

Print[\" Matrix for \[EmptyDownTriangle]/3.5, \[Beta]middle, KLevMean, \
SumOfDevSq:\"]; 

StatsMat // MatrixForm



<<SolveAndSimDistSevenAltParamsLiqFinPlsRet.m;    (* Run \[Beta]-Dist model \
with time pref factors approximated by seven points and estimate params. \
Matching liquid FINANCIAL assets plus retirement assets. *)



*)



(* Model with aggregate PERMANENT shock *)

Print[\"======================================================================\
=====\"];

Print[\"Model with aggregate permanent shocks\"];

ClearAll[\"Global`*\"];

SetDirectory[NotebookDirectory[]];

WithAggPermShocksDir = Directory[] <> \"/WithAggPermShocks\"; (* Directory \
where files with PERMANENT aggregate shocks + file for PF rep agent are saved \
*)

SetDirectory[WithAggPermShocksDir]; 

<<SolveAndSimDistSevenAltParamsLiqFinPlsRet.m;  (* Run \[Beta]-Dist model \
with time pref factors approximated by seven points and estimate params. \
Matching liquid FINANCIAL assets plus retirement assets. *)



*)









(* Generate tables *)

(* This file generates tables in the paper. *)



Print[\"======================================================================\
=====\"];

Print[\"Generate tables \"];

ClearAll[\"Global`*\"];



SetDirectory[NotebookDirectory[]];

ResultsDir = Directory[] <> \"/Results\"; 





(* produce tables for \"cstKS\" paper and save the tables in folder \
\"cstKS\\Latest\\Tables\" *)

SetDirectory[ResultsDir];

<<GenWDistcstKS.m;



SetDirectory[ResultsDir];

<<GenWDist_cstKSLarge.m;



SetDirectory[ResultsDir];

<<GenWDist_cstKSFull.m



SetDirectory[ResultsDir];

<<GenAggStatscstKS.m;



SetDirectory[ResultsDir];

<<GenMGComparison.m;





(* produce tables for \"cstMPC\" paper and save the tables in folder \"cstMPC\
\\Latest\\Tables\" *)

SetDirectory[ResultsDir]; 

<<GenMPC.m;



SetDirectory[ResultsDir]; 

<<GenMPCallRobustnessCheck.m; 



SetDirectory[ResultsDir]; 

<<GenMPC_scenarios.m;



SetDirectory[ResultsDir]; 

<<GenMPCall_LCM.m; 



(* produce other tables including for slides *)

SetDirectory[ResultsDir];

<<GenWDistslides.m;



SetDirectory[ResultsDir];

<<GenMPCslides.m;



SetDirectory[ResultsDir];

(*

<<GenMPCslidesLiqFin.m;

*)

<<GenMPCslidesLiqFinPlsRet.m



SetDirectory[ResultsDir]; 

<<GenAggStatsPlausibleAggShocks.m;





(*

<<GenTables.nb; 

 (* can run this file instead of producing all the table one by one *)

*) 





(* copy figures *)

SetDirectory[NotebookDirectory[]];

<<CopyFigures.m;\
\>", "Input",
 EmphasizeSyntaxErrors->True],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6629798672187405`*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6629798672197213`*^9}],

Cell[BoxData["\<\"Models without aggregate shock\"\>"], "Print",
 CellChangeTimes->{3.662979867220742*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662979867247883*^9}],

Cell[BoxData["\<\"Run PF representative agent and PF partial eq models\"\>"], \
"Print",
 CellChangeTimes->{3.6629798672498913`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" PF Rep Agent KYRatio: \"\>", "\[InvisibleSpace]", 
   "10.256115107913645`"}],
  SequenceForm[" PF Rep Agent KYRatio: ", 10.256115107913645`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662979867963914*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC of PF Partial Equilibrium: \"\>", "\[InvisibleSpace]", 
   "0.039403990000000055`"}],
  SequenceForm[" MPC of PF Partial Equilibrium: ", 0.039403990000000055`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662979867965914*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662979868019952*^9}],

Cell[BoxData["\<\"Estimate \[Beta] (using model with point (unique) \
\[Beta])\"\>"], "Print",
 CellChangeTimes->{3.662979868020953*^9}],

Cell[BoxData["\<\"Searching for initial guess of \[Beta] using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.6629798680219536`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Initial guess of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.98944706721600056456322390521600710874`10."}],
  SequenceForm[
  " Initial guess of \[Beta]:  ", 
   0.98944706721600056456322390521600710874`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629799453509054`*^9}],

Cell[BoxData["\<\"Searching for \[Beta] using the simulation method... \
\"\>"], "Print",
 CellChangeTimes->{3.6629799453529077`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]... \"\>"], "Print",
 CellChangeTimes->{3.662979961574418*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.989389356026776`"}],
  SequenceForm[" Solution of \[Beta]:  ", 0.989389356026776],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629806718363886`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, \
Average deviation of K (%):   \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.989389356026776`", ",", "39.295960958910214`", ",", 
     "10.262868959741029`", ",", "0.2520187974675249`"}], "}"}]}],
  SequenceForm[
  " Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, Average \
deviation of K (%):   ", {0.989389356026776, 39.295960958910214`, 
   10.262868959741029`, 0.2520187974675249}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662980705298131*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629807053001328`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10.051907591306371`", ",", "37.98290065371275`", ",", "54.80102534506449`",
    ",", "61.30457020231708`", ",", "76.36600563975213`", ",", 
   "83.78670594012459`", ",", "89.64898194252845`", ",", "97.36305199229243`",
    ",", "54.80102534506449`", ",", "0.5147992481508985`", ",", 
   "0.511753112441351`", ",", "0.3636972254212551`", ",", "Indeterminate", 
   ",", "1.2257652750787402`", ",", "0.7696993695436167`", ",", 
   "0.09588404612198331`", ",", "1221.1775385699045`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629807053041353`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run model with point (unique) \[Beta] \
(minutes):  \"\>", "\[InvisibleSpace]", "12.6674216`10.031354473292593"}],
  SequenceForm[
  " Time spent to run model with point (unique) \[Beta] (minutes):  ", 
   12.6674216`10.031354473292593],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629807053972025`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662980705410211*^9}],

Cell[BoxData["\<\"Estimate \[Beta]middle using \[Beta]-Dist model with time \
pref factors approximated by seven points\"\>"], "Print",
 CellChangeTimes->{3.6629807054112124`*^9}],

Cell[BoxData["\<\"Obtain (common) initial distribution of Pt and kRatt for \
later simulations \"\>"], "Print",
 CellChangeTimes->{3.6629807056583867`*^9}],

Cell[BoxData["\<\" Searching for good guess of \[Beta]middle using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.662980707982036*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0015`"}],
  SequenceForm[" Diff between approximated points of \[Beta]:  ", 0.0015],
  Editable->False]], "Print",
 CellChangeTimes->{3.662980707983037*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98763982536366325345810180327631498888`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98763982536366325345810180327631498888`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981198826318*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Evaluate with good guess of \[Beta]middle =  \"\>", 
   "\[InvisibleSpace]", "0.98763982536366325345810180327631498888`10."}],
  SequenceForm[
  " Evaluate with good guess of \[Beta]middle =  ", 
   0.98763982536366325345810180327631498888`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629812094568605`*^9}],

Cell[BoxData["\<\" Obtained (common) initial distribution of Pt and kRatt. \"\
\>"], "Print",
 CellChangeTimes->{3.6629812265930214`*^9}],

Cell[BoxData["\<\"Start searching for \[Beta]middle using the simulation \
method \"\>"], "Print",
 CellChangeTimes->{3.662981226594022*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0014`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0014],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981230029458*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.66298123003046*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98783715844284481335297856257232873417`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98783715844284481335297856257232873417`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629814992765045`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6629815099030447`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.42343158333333333333333333333333333333`9.662940414111933"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.42343158333333333333333333333333333333`9.662940414111933],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981555434352*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9878321584428448`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9878321584428448],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629815554363537`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.662981617133131*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "21.701580379147966`", ",", "61.573333898907315`", ",", "77.8720310209125`",
    ",", "82.81443456536762`", ",", "91.53408146875512`", ",", 
   "94.64781934222437`", ",", "96.70582382260842`", ",", "99.1207113631212`", 
   ",", "77.8720310209125`", ",", "0.7403567955466716`", ",", 
   "0.7387275683518507`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.6524491663459135`", ",", "0.7563681914717033`", ",", 
   "0.16980809315980006`", ",", "41.73162049575273`"}], "}"}]], "Print",
 CellChangeTimes->{3.662981617136133*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0015`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0015],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981617138135*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629816171391354`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98763482150889747833502988232842589746`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98763482150889747833502988232842589746`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981851304289*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662981861922823*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "4.84999133833333333333333333333333333333`9.614407211206064"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   4.84999133833333333333333333333333333333`9.614407211206064],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629819081326113`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9876298215088974`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9876298215088974],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981908134613*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629819705488987`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "22.680671953421633`", ",", "63.0639066830837`", ",", "79.11155180722757`", 
   ",", "83.89923871077586`", ",", "92.16330176808826`", ",", 
   "95.04585997001152`", ",", "96.94732344837787`", ",", "99.18595377529799`",
    ",", "79.11155180722757`", ",", "0.751808818390284`", ",", 
   "0.7502522580585508`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.6845168866971374`", ",", "0.7563681914717033`", ",", 
   "0.1796005253162516`", ",", "26.028948400516608`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629819705519023`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0016`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0016],
  Editable->False]], "Print",
 CellChangeTimes->{3.662981970553904*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.662981970554904*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98742875782612052841944855332159596426`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98742875782612052841944855332159596426`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662982234957512*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662982245569042*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.36940990333333333333333333333333333333`9.658592807693974"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.36940990333333333333333333333333333333`9.658592807693974],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629822927134933`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9874137578261205`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9874137578261205],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629822927154956`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629823545994053`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "23.610316449666094`", ",", "64.44615459450715`", ",", "80.23926602082233`",
    ",", "84.87430927584936`", ",", "92.7116311958871`", ",", 
   "95.38594692611294`", ",", "97.15137732582359`", ",", "99.24035672392311`",
    ",", "80.23926602082233`", ",", "0.7621319742482181`", ",", 
   "0.760640894586339`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.7137068328782152`", ",", "0.7563681914717033`", ",", 
   "0.1896062630499855`", ",", "15.371436817918811`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629823546024084`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0017000000000000001`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0017000000000000001`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662982354604409*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.66298235460541*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98721683525119642136527233854823407373`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98721683525119642136527233854823407373`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629825855092497`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.66298259610877*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "4.79526916833333333333333333333333333333`9.609479238250143"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   4.79526916833333333333333333333333333333`9.609479238250143],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629826423155575`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9871868352511964`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9871868352511964],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629826423165574`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629827052111845`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.511806934811375`", ",", "65.74518082433701`", ",", "81.27315499578542`",
    ",", "85.7562046748238`", ",", "93.19426224705076`", ",", 
   "95.68269850954046`", ",", "97.32781426364376`", ",", "99.28730271260393`",
    ",", "81.27315499578542`", ",", "0.7715558361541054`", ",", 
   "0.7701245127868989`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.7409670341112622`", ",", "0.7563681914717033`", ",", 
   "0.19973707669228702`", ",", "8.543092323688008`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629827052141867`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0018000000000000002`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0018000000000000002`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662982705216188*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629827052181892`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98699972170220590610318432985748248942`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98699972170220590610318432985748248942`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629829375870686`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6629829481435585`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.20666110666666666666666666666666666667`9.645225559270552"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.20666110666666666666666666666666666667`9.645225559270552],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629830176108513`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.986964721702206`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.986964721702206],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629830176118507`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629830803063364`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.414338518131995`", ",", "66.98883279993379`", ",", "82.2377344321994`", 
   ",", "86.5670581147418`", ",", "93.63035300527845`", ",", 
   "95.95200822521285`", ",", "97.48947532712224`", ",", "99.33061510384125`",
    ",", "82.2377344321994`", ",", "0.7803811194762684`", ",", 
   "0.7790058300069864`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.7672958818752864`", ",", "0.7563681914717033`", ",", 
   "0.20949971977639947`", ",", "4.620255260652539`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629830803093395`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0019000000000000002`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0019000000000000002`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629830803113394`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.662983080313341*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98677856672779152630399106374141311868`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98677856672779152630399106374141311868`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662983311517393*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6629833220368576`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.18484560333333333333333333333333333333`9.643402076516637"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.18484560333333333333333333333333333333`9.643402076516637],
  Editable->False]], "Print",
 CellChangeTimes->{3.662983391398074*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9867335667277916`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9867335667277916],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629833913990746`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629834548591022`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.29654492876815`", ",", "68.16352606215844`", ",", "83.12611446029776`", 
   ",", "87.30124389755152`", ",", "94.01118450882485`", ",", 
   "96.18709924277009`", ",", "97.6311589506469`", ",", "99.3687269660804`", 
   ",", "83.12611446029776`", ",", "0.7884816245047953`", ",", 
   "0.7871577563827078`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.7924230168592639`", ",", "0.7563681914717033`", ",", 
   "0.21928112211880502`", ",", "3.090335205354581`"}], "}"}]], "Print",
 CellChangeTimes->{3.662983454862105*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.002`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.002],
  Editable->False]], "Print",
 CellChangeTimes->{3.662983454864106*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629834548651066`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98655374624265726771896438856736206331`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.98655374624265726771896438856736206331`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629836521420865`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6629836626525435`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.02331431333333333333333333333333333333`9.629656601425065"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.02331431333333333333333333333333333333`9.629656601425065],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629837562589626`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9864787462426572`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9864787462426572],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629837562609644`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629838200332136`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.08561809541567`", ",", "69.22140456295708`", ",", "83.91313737070737`", 
   ",", "87.93643840958109`", ",", "94.31824398239908`", ",", 
   "96.37476061998659`", ",", "97.74363150327413`", ",", "99.39937060435292`",
    ",", "83.91313737070737`", ",", "0.7954997026237146`", ",", 
   "0.7942202525652902`", ",", "0.3550511095284088`", ",", "Indeterminate", 
   ",", "1.814336484518745`", ",", "0.7563681914717033`", ",", 
   "0.22953274893217124`", ",", "3.391654217637783`"}], "}"}]], "Print",
 CellChangeTimes->{3.662983820036216*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.662983837589673*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629841231773124`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.713235097274136`", ",", "68.43925875308535`", ",", "83.26947660182475`",
    ",", "87.38177618695457`", ",", "94.04353976293537`", ",", 
   "96.20809132939749`", ",", "97.64177060345884`", ",", "99.37151125848864`",
    ",", "83.26947660182475`", ",", "0.7900151417243272`", ",", 
   "0.788687703085561`", ",", "0.3650094459916915`", ",", "Indeterminate", 
   ",", "1.794225649416782`", ",", "0.7658232866708639`", ",", 
   "0.21969184290900123`", ",", "3.0986336905825715`"}], "}"}]], "Print",
 CellChangeTimes->{3.662984123179313*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Difference beteen approximated points of \[Beta] (\
\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0019000000000000002`", ",", "0.9867335667277916`", ",", 
     "0.9800835667277915`", ",", "0.9933835667277916`", ",", 
     "39.39349827178551`", ",", "10.279164837968473`", ",", 
     "1.1870894583097897`"}], "}"}]}],
  SequenceForm[
  " Difference beteen approximated points of \[Beta] \
(\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): ", {
   0.0019000000000000002`, 0.9867335667277916, 0.9800835667277915, 
   0.9933835667277916, 39.39349827178551, 10.279164837968473`, 
   1.1870894583097897`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984123313409*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with seven types \
(minutes):  \"\>", "\[InvisibleSpace]", 
   "56.96505329166666666666666666666666666667`10.684274756220535"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with seven types (minutes):  ", 
   56.96505329166666666666666666666666666667`10.684274756220535],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629841233354254`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629841235805984`*^9}],

Cell[BoxData["\<\"Plot consumption function and \\!\\(\[DoubleStruckCapitalE]\
\\_\[ScriptT]\\)[\[CapitalDelta]\\!\\(\\*SubscriptBox[\[ScriptM],\\(\[ScriptT]\
 +1\\)]\\)]=0 line\"\>"], "Print",
 CellChangeTimes->{3.6629841235826015`*^9}],

Cell[BoxData["\<\"\\!\\(\[DoubleStruckCapitalE]\\_\[ScriptT]\\)[\
\[CapitalDelta]\\!\\(\\*SubscriptBox[\[ScriptM],\\(\[ScriptT] +1\\)]\\)]=0 - \
\\!\\(\[ScriptC]\\_\[ScriptT]\\) at large \[ScriptM] \"\>"], "Print",
 CellChangeTimes->{3.662984124840494*^9}],

Cell[BoxData[
 RowBox[{"-", "0.3911701216040253`"}]], "Print",
 CellChangeTimes->{3.662984124841496*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to plot funcs (minutes):  \"\>", 
   "\[InvisibleSpace]", "0.033723945`7.456604620559722"}],
  SequenceForm[
  " Time spent to plot funcs (minutes):  ", 0.033723945`7.456604620559722],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629841256050353`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], LineBox[CompressedData["
1:eJxc2mlYjl/bNvBL0UASDcqYqUQRkRI6Exm60ECKSooUzXMZSilDIRpoQKYr
Q8b+KEMiosGYqUxRIkUlSoT3WM+9ry/v/eXZ2pbrdxznvq9nPff2bu8QV1+b
lVIikWirskjE/uf//5/0NPafEtNPR18WrqX/+b+/K03r/+/vStMJBuw/Naa/
T56bUZj4Huf1ptW3Z8YtUvtg+j+l2TShxCrN6EQd/n2r6S1j02lvdn80XeXO
/tNmWiW1c/PY3x/x+w7Tv08vLRkhfDK9V87+02n6YLOed4XvJ3giYW+/25If
SZ/w77sI7gbbp0mf+wRfWtgrpTfqfDn/fVdhRUSmOLruE+bJCDX2j5VURPXw
5ATD9sruj9Tr4ckLW1Pedd0xrh5eD+FoUM5Cg7n18BSEksS1Ppmu9fAUhS85
c7d0W8s9JaF3icYhnyT+75WEx7sT5t0/yf3ego2N/eaet/jv+wiPeg+/IX7F
5ykL1o+afsV/556K8DDxyoQyhc/wVAQrq80+3Ud8hqcqHFtkqWg49TM8NWFT
2M19cxd9htdXWJ5hrLfM+zM8dWFqwdmrgbHcUxf6vdMWb9nHPQ2hXfrAy8wL
3OsnVGiprTl3j3v9hbNztv+6/YF7A4QEr67bqv5wb4AwVFh5NV+1Ad5AYcql
iD+peg3wBgl2YxKnBc1sgDdY8D96NNLaqQGephA/4ErhmGD+7zWFo0kPuyhs
b4CvKRR2r5tef6TB9P9+bjBEqNr4O6b4Kp83RPj+U+n24SfcGyr08tOS2djI
vaGCzkeTWc5dG+ENFcydrbeYDGjEPsME56fuJeoTGuENE97YjB6Xa9kIb7gw
MrvSeJZbI7zhgv/vzdNfRnBvuHB5gaGl727ujRCkj9TaSp/g3ghh3s/djntu
cE9LSBWbrRxdyT0t4W1Wk/f1Zu5pCSN/7AuxlfsCT1sImCOO/Dj4Czxt4cq+
X5vXTvoCb6TQ9duxxF4LvsAbKcyzWJx22P0LvJFCanq3Q5M2cE9HqP6ae6Is
hXs6go65a+6yU9wbJQTsUbraeot7o4QrDQW3Nr/i3iihm+B9r/937o0W5if3
f3amx1d4o4U9n0remA/7Ck9XOHExdcCWyV/h6Qo/k1L8r1l/hacrWPgnF3/z
+ApPT0ian9R/ZBT39IR3o3f7Oe3h3hhhjPyu27tPc2+MsK5uZ7+7t7k3Rigt
2uH75xX3xgrqB7ffGv+de2OFlRsSNDx6NMHTF84vjffZN7QJ90tfEBlvK3ps
3ARfX5ivtlVdzroJv9cXMls3e0/1aMI8faH+YdzNgEjujRMmnY7teyyVe+OE
TfGbvF6f4t444bFHzI0+t7k3TtC0iFab/Yp74wTvYRvXrG/l3njBSSS4OHRr
hjde6Op7vft3pWZ444WTr6dd2DGgGd54wUZcsExnZDO88ULH5andbxk0wzMQ
snSu/eds2ox8DIRZe6cs65jLPQPhi8xV+WQ77hkIycEm/41x5Z6BYFJ72bnE
m3sThPc2k+VXhHNvgrD1Rn7u303cmyCM1Td2Tkvk3gTh2f48uQmZ3JsgrO9p
lHs/m3sTheHrLjl55nJvolCouqnkaQH3JgpRzsNFE0u5N1EQHbtlmPyUexMF
oWWFd2s19wwF0eRuR2wauWcoRMUcrTrXzj1DQSif2bu3dAs8Oletm+Wn2AKP
fr8sbsMDjRZ4k4TCbK0LY0a0wJskiFqKG7brt8CjvyevGvrFhHuTBCFG1kE8
i3v0+/LsnSdtuGdE82YXd3fmnpFQ6Pyp09OTe3SevcWgJIh7RjRv5OqRUdwz
EoTJJVmb47lnLIhiPJ/XpXLPWIgql1e0OMQ9Y0FQPTHj6Cnu0bnz3LVd87lH
vz/2+ZzbLe5NFgqbt326+YB7k+n7Rg8e+pJ79HdM2aKNddybTHmuSahu4R79
XlWhyPQP90xoXk7Hfrlv8EwoT7H+X+Vv8Ojv5kZ3p8Hf4JnQvO37ro76Bo9+
H6P3pL/hN3hTaN697mvNuDeF8vQxqxJzj86dFcOM7bk3headPr3XjXtTKM/5
H9p9uDdVKDRu6r84gntTqb+dNhdjuTdVEJWP3aq6i3t0rvrwelAm9+j3zn5t
Fdncm0b9KekZ5HJvGn3fWbfdBdyjv42t01tKuDeN8mx5aPWUe/T78l2yZ6u5
Z0rzxk/r1cg9U8rzcZBPO/foPDvg5D2pVnimNK/Pe13FVnimlGeueoJGKzxB
KIy2XdAwHP9eQ6A8W2Pn6rfivREEkWry1eMm+L2Yzp0ntMrNasU8+n32Ex0P
G3hRghDVHORyx4nPp3Nj1T1anvBy2bwL92KD+D7kly/q+iESXh39XrVt8ox4
vp8ZzUv1P5zK9zOjPA2PSR3i+9Hfzc/eLD/F9zOjeaGqN/L4fvT7mL5izVt8
PzOadyk68gHfj85V7fPfVPH96Nz5Z9PUOr4fm7dXa18L34/8ZiOnzk6+33Qh
yrgyaancd+w3nb4vvPSy8nfsR3+XaXTpN/g79ptOeV6eFD7qO/aj3zsv8Xkx
8Tv2m079/ToyyQxeGp03p79MFcPLZfNM+rQthlfO5r2cvcgNXh39vnxt5H8+
8ETmNG/AReUIvp855Xm1MSD2O+4PnWc7DnucyPczp3mdDuMy+X7mlOe+xMRs
vh+dR0+903Se70e/L3/9Z34BvFz69yobJpwu4fvRufOgNT2f8v3o99kFB72q
+X4zBKHZ+UVZA99vBn3fP8XR7Xw/+jv6wMxtUj+w3wzK03Rdfc8f2I9+r1p9
frbGD+w3g+ZF1WcP/4H96DxbU1NW/wf2Y/MK7dxN4JWzecu337aAV0d+dJdb
w23giWbSvIO/YpzgacykPKePq/GAZ0DnTu9XTQ/i+9F5dvT+g5F8v5mU59Cn
oni+30xBMC7q4ZLK96PzaLfp1w/y/ejvMunwQaf4fuSrHDmzPo/vR793nlH3
qojvZ0HzagdMecD3s6Dv22SbUcX3o7+NR2z79YHvZ0Hzbhc6tPD96PflK9vz
Ovl+FjRPZoy6XBv2o3NnyYpQ5TbsR+cSi4xng9qwH5tX92jiqDbsR77xZrmU
iW3Yb5YgRGubfhfgacyiPO8E24rhGcwSolQ8cs4vhiemcye5mt5u8Nzp99nH
NPx94EXNEkTNs60ehvP96Ny4Pm5sLN+Pzdt6bUci34/8Mp3vXzL4fvR71dJR
87L5frNp3urlOef5frMpz+57exTw/ei86cT91SV8v9k0z7Jb6RO+32zKs8FE
p5rvR+dl8QFbGvh+9HsV3eMf2/h+9O+dyt9aSLVjPzqXeKlJerZjP/p9s8K8
bhrt2G8O/ffRUzErhrdjvzn0ffMuF41tx370d9mX5qEm8MRzKM8d2tEW8Nzp
985jnN9Zw4uaQ/PuJwtO8NLovNmn7IAHvFw2r5fUv0C+H5t3xsg5ku9Hvy9b
4HttG99vLs1rPjogle83l/JMfLX2IN+PziX6yi9z+H5zad7DOZPz+H5zKU//
qLQivh+dR/e+9PM+349+X3buy+Iqvh/9exWb4Zc+8P3o3OnbErUWvh/9Pnv3
ruBOvp8l9Tf+7hPZn9jPkr6v4q+B8k/sR39HB05MGvQT+1lSnspe33R+Yj/6
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
bzHlKWNXFsHzo31s7Foionh+dB4qSRgVx/Oj/TPatKvieX60T6FF0dZdPD/2
fanOxnt4fmzex45PmTw/2mfMpJS9h3h+lJfNZv3Zx3h+9jTveVn7KZ6fPeWp
vSo7l+dnT/NCpRbn8/zsad6dfTLXeX721J+68cVbPD97mufxZGUpz4/ObfJ8
VR/y/Og8VK7H7ac8PzbPXhL0kudnT3keMxv+judH57U/X1XU8fzsqb85YTGN
PD/aRy9N2eAbz4/ObepPv2/n+dH+ocZzd//h+dE+GVs/mEl3QX7s+yqjWuS6
ID82T2fAQcUuyI/2kY+4ZKXSBflRXmNKbUT9uiA/B5rX7+uZwfAUHCjP1VuX
jYCnQecZl4f3Gg1Py4HmdS8s0Idn4EB5LlnqYwhPoHP5k20Dp8ATO1Cev3fd
M4Pn4CC42FjqrZ8Fz53OQzPu6s6DF+hAeTa4vbKBF0X7FJr8i7eHl0DntfHp
Js7w0ti8VxMb3OBJaB893UfpnvByHai/dV5zfeEVsnnlsr+CeH50njHg8PEI
nh+b5zXNIYrnx+ZdrZSL4/nR/vI9g/PieX5LaJ6Tkscunt8SyvPUyb57eH50
HvLH4k4mz28JzZv3PuQQz28J5blvvdYxnh+d135Rf3aK50fn8tP+i83l+S0R
CvV2LJiYz/NbQnm++VxbwPNbQv2NiUu+xfOjfTI2DJlRyvOj88L7V1sf8PzY
vEH2h5/y/Ng831ablzy/JdTf9R1S73h+bF6vUefreH50Hrrs9vJGnh+dZ5xx
6f2N58fm/ftd2M7zo/1rF+zx+8PzWypoymeN15SWQn5LKc/mew/kpJDfUoH+
K7FnpKIU8qPzkMSuY1WkkN9SyrP6wBsNKeS3VBAV6pvsGAxPTOe1Uc+mjoDn
wOY98v8yCp77UspzSM99+vACl1J//sfEhvCi2Lwb5p0m8BLoPKP325Nm8NLY
vOURS2fBk7B551R7zIOXS/vLS527bAOvkM71bMSr7eGVL6U8D33UcIZXSfuE
fIsucYNXR+cZ0weFe8Jrpf0Ld+eP9IUnchSiat8vfBHE83Ok7zNo3hzB83Ok
eTHxk6J4fo6UZ4XWx1ienyP1N+xmajzPz5HmBTpZ7OL50Xlh0c8fqTw/Nk85
+Wgmz4/NWzF20SGenyP1919p12M8Pzavq/t/p3h+dB6ysMuKXJ4fnWccyVTO
5/mxed8nFRXw/Gj/2hkVAbd4fnQun+IztJTn50j9fZB//IDnR/vYTDy68SnP
j85DYoVxL3l+tH/G05fV1Tw/J6H6+ojQxDqenxN9X3AfoZHn50Tzik81tfD8
nChPtTkH2nl+TtSfe+38Pzw/J5p3MfKvlDTyo/MMmf6n5aSRH51ft7vopCiN
/Ng8iXVPFWnk50R5tjde1ZBGfnSuN2uL12B4CU6U555hA0bAS6N9Qj4WlI2C
J6HzjElL1urDy6X9Czf/GGUIr5D2qX2eWGUCr5x930jdbWbwKtm8sDvGs+DV
0T42d13rxfBaKa8Q9b97beCJnGmeR9pse3gKzpRn3oSfTvA0nGme3MNsN3ha
zjTPYc1iT3gGztTfcRlZX3iCM83rOHgxiOdH5yFzprpH8PzoPCPthWoUz4/N
qw+8Hcvzc6Y8jXsFx/P86Fxu24nhu3h+ztRf1cwnqTw/2sdm1LuYTJ4fnYdE
rDM4xPOj/TNK+9Zk8/xon+v9cnef4vmx71s9f3ouz4/Nu1Lfksfzo330esQe
LOD5UV42SzWtb/H8ltG8k1dEpTy/ZZTnb7uzD3h+dH7d8tuypzy/ZTQvY3uv
lzy/ZZRn48jr1Tw/Otebcsunjue3jPJMWDaokee3TIgKefXrXgvPj84zdFPX
t/P8llGe68bp/eH50T615eWvpLoiPzqXG+iRINcV+bF53tJTFLsiP9rH5tr+
BuWuyG8Z9ddzcoZGV+TH5jk9nTsYXjmdXz/l92s4vEo270+PE6Pg1bF587Md
9OG1Uh56+6fLG8ITudC8r6/zTPDvZVwoz2nhHmbwFeg8Y4eK+qyuwv/FpexC
896cuSPGPA0XynOMZagNPE06l4us07KHp+VC/T3Y+MwJnq6LUG09eGCcGzwD
Og/xzZvoCc/Yhfq7bvvBB55A+1zv1ZQcBM+CzmuXbZsRAU/M5p0d8T0Sni3t
oye6cTgWnoML9WflaBsPz4XNy2qX2gXPnc4zmnefT4XnRefXhTGumfAC2bzE
kt6H4IXT/nLvVtzIhhdF53rjRP6n4MWxPDdmaObyvmmfkEeGD/PgJbE8hzyO
LOD9szz9vcfegpdF+9TekHtbwu8D+74+R3Y8gJfD5rmaTnsKL5fleb7qSxW8
fNafVMi+an5f2Dyb3vPq4BWzPA/ldDbw+8PmfZuV0wKvgs0zr1nazu8TyzNp
Q48/8KrZvBqNK1LdcL9YngYXVst1+5/XSOfpMVb9FLv9z2tl8yoaSpS7/c/r
YHkO2xyu0Q33b7mQJRc0VGcwPJnl9H23rr0YDk9huVBoreKwZRQ85eWU54rv
k/ThaSyn/v7b+XEiPM3l1F/X0XtM4GnRee3CYgszeLps3tHlbRbwDNi8H51H
xfCMl1N/M/cusoEnsHkpBt3s4VnQecaH+/85wRPT+fWJq1e4wbNl82K7qXjC
c6D95Z5lFfnAc6FzPa0pgUHw3JdTniHPh0bA86J9QooDHkfCC6TzdDXF6Fh4
4bT/dffj4+LhRdE+tRdnvEuEF8e+T7Y6MRVeApu3eK2QCS+J5Zmt1nwQXhrl
FdJ+7kA2vCw2b9a8BafgSVieez79PQ8vh837GHM6D14um2c02LkAXj7Lc8vl
nrfgFbJ5LxZdK4FXzPIc2eL1AF45naeHJQx4Cq+C5XlXu7wKXiXLU71obTW8
atpHztN5dB2/f+z78juqGvj9o32s5VO2tfD7x/J00J/czu8f6+94WX0nv3+u
NK/DPU1KBvfPlb5vjtQcORncP1eal77vZ08Z3D9XmvfZ6JiyDO6fK/U3+cli
DRncP1eat81XdjA8LTpPr+p+aTg8XTq/PkriPgqeAZsXYaamD8/YlfIse3V7
IjyBzvX6hwWbwLNwpTzXKI8wgyemfUKunH5iAc+WztN7zN0khudA+19f+sHA
Bp4L7VNzMqpmMTx39n2d/ZOc4HmxeeJL093gBdI+1pk23zzghVNeIY1fDvrA
i2Lzpmy1DoIXx/JMGN4lAl4Cnde8un42El4Sm6e31CUWXhrLc31br3h4WXRu
fW/X9UR4EpbnQD3fVHg5tE+6991BmfByWZ7X3O4fhJfP8uz5b302vELaR845
Xe8UvGL2facnvj4Pr5zN+/swIQ9eBctzvteUAniVrL/9so1F8KrZvK+HMkrg
1bE8p02zfACvkc3bWfnrCbxWNu9t0IkqeB2sv7FKS6rhidxoXuRJ+Tp+/9wo
zwcW+Q38/tH59cHvPVr4/XOjeb7r1dv5/XOjPAvV73by+0fnukr/hUrJ4v65
UX8uC7TlZHH/3ARRyNnPz3rK4r//0Hm6KC5OWRb3z436sxpiqCGL+0f71GRd
/TAIngWdy7UsThkOT8zmmbXOGAXPlvax3rXj+1h4Dm7U3zudIxPhubB5427b
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
BLw0+l7pQUH+I+FleQtnVYvN5oyGJ2Hf59NryBh4OTRvstrrn/rwcmmeuODE
QwN4+d5Cs7N72DFDeIU0z1/RIsoYXjHlGXNR2X4KvHLKJ8X53VhTeBU075jM
Gdnp8Copz8un172dAa+a9i23m3tpFrw6yvPN374758JrpHxaJB/c58FrpTyl
F+ROs4LXwfprj1KzhSfyEZq1D8z/ugiejA9936wBxfbwFHyEKHFT/b6l8JR9
hIfOey4FO8PT8KH+TGPnLYen6UP9fbQZsQKelo9wNmWn5h93eLo0L3vS1yee
8Axo3uW3V3K84Bn7UH+bt27yhSf4CIVvxi52DOD3z4f6ez58QjC/fz6ClXTU
tx5h/P75CFmqIwtrIvj986H+Hm6/sp7fP9p3ctjSpCh+/9j3aeqsieH3j+Y5
322bHsfvn4+g5O93q99Wfv98qD/13d/i+f2jeSmFy0p38PvHvs9D79Aufv9o
3mWl3+HJ/P7RvPK8u9Z7+P3zof5cUnXS+f2jeS1yK7rs4/eP8pQ+N67yAL9/
lI+qw7+zh/j9Y/11ubflKL9/rL/j6S7H+P2jfcXWHkYn+f1j/XVMVDrN7x/l
439Q+tNZfv8oz5g5j67n8vvH+mvZv+civ3+0b3aal28+v3/s+8wmz7rK7x/N
K6+XHXyd3z/W366nbTf4/WP9GR++f4vfP1/q772f5A6/f77U37ZpG0r5/fMV
HmqPV7C7x++fL/VXVan3kN8/X+ovOrtbBb9/vsJZ51HBr5/y++dL/T2efuEF
v3++ghATobT9Jb9/vkJiytA3K97w++dL/ZWenPKO3z9fQfNyQLhKLb9/vvR9
/WY11vH7R/Pe3FS5Vc/vn68galn9PqOR3z9f6k/5bGATv380T/XKestv/P75
CtXabpbDfvD7R/Mm99D43c7vH80T59Y9/sXvH+XhvPS/E3/4/aN5/tLR0aLe
uH+UZ8zJBUuke+P+UT4ptgPHy/TG/aN52b8/y8v3xv2jPC8fznvXozfuH+1b
bhmXrwhP4kv9tdru6g0vh/JpzhjiqQIvl/KUntEk9IWXz/prvKreD14h6y95
W/MAeMXs+6bY3x0Mr5zmiWtHZA2FV8H6S2gNHQGvkvU34caCkfCqWX+vdmiP
hlfH+tvk+E8PXiPtm6076rk+vFbW35P20wbwOlh/627HGcIT+QlZb4YnORv3
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
nSfgSQfT93leWnUKnkywUJjcO9b0LDz5YEEpO9+mby48hWDqb7lm0wV4SsHU
n/zX4jx4ysH0feeu7L8CT43mNTtsDSmAp0HzpKQWz78Bb0Aw9XdiuNYteJo0
T9vm259ieMOCqb9f15+WwNMKFhItD20/VQ5Ph+Y5zV0a+wCebjD1922k02N4
+rRvdHrbhKfwDIKpv+m3FF7AMwwWRNmfd9VWwTMOFqzydy+7+hrelGDqb7Je
cjU8gfZ9/f7Xmhp45uz7tt01r+PvH82TMkjtX8/fP8pT5aVbawN//4Kpv5hx
ZV/5+0fzjEf/O9TC3z/K07KiPOI7f/9ontPadJt2/v6x/oZ5jPrF3z/WX9lE
qT/8/aN9kwOlq/7x94/11//ROSk1vH+UT37R/q3d1PD+UZ5la7yWy6nh/WP9
KU827qGG94/2bb4i21tRDe8f+74VTz8pwQuheSoKhwuV4YVTntr/+e1Vg7eO
9ec4zU8DXhTrr6vC7AHwYtj35VQOHgwvjub5LcxuHwJvK+uvM+jBcHgJrL8j
07O14SWy/sRKkaPgJbH+vr+204OXSvmUZZ4cow8vjfU3I1zGAF4m66/R4s1E
eFm0r1SKykUjeIdZf1PfbzeBJ6F8tD6cWTkN3nHK03j7+qlm8HJYfxMtVWfA
O0v7Or1W/2IBL5d9X2zdrTnwLtK8aL3/MsXw8ll/TzcGLYB3lfW3foHYBl4h
62/EwOGL4BWx/u59/r0YXjHt+zo4r2IJvBLW38C4k07wyll/xbYxLvAe0r4q
PkOWusGrYP2pNY13h/eM8jEuuNrdE14l5Wnpvu39GnivWH+K9pd94FXTvn4X
R+z2h1fDvs+51TMIXh3NS5a5YRYKr57ylJzeoREBr5H1Z+fYsg5eM+vvr05J
JLxWyvO1pD0rGl4bzWuefzssFl4H6699t9UWeJ3sfh5wGRkPTxRC/c0aI9oB
TzqE+mv6/TwRnkyI4Ge5p+RMEjz5EOrPdM/mVHgKIdTfxxXL0uAphQhW0TvH
T8qEpxxC/U0S9ToATy1EqJa8vVd3EJ5GiKCfvzmj4Ai8ASHU31jP1Gx4miHU
33NDnxPwhoXQ90V2tTgFT4vmSY18PPAsPJ0Q6u/hgR/n4emGUH9h3vcuwNOn
ecaaJkfz4BmEUH935dZfgWdI+zr5PVtYAM+Y5vmpH9G9AW9KCPVX6N/1FjyB
9k32MH1VDM+c8pQo9fyvBJ4F5ZOfVxVfDm8O5VnmcsztATwx5flaLsTkMTwr
2rf5rLnyU3i27Pscejc8h2dH81S6vL1ZBc+B8tQ6npP+Gp4j6886IqAangvr
r2PW3Bp4bpSn00HVoXX8/aN5fnNqOj7x94/113L2UQN//yjP5LQNx7/y94/1
Zybe2MLfP9ZfvYbDd/7+UT5luz7qt/P3j/VnfEHuF3//WH/voqs7+ftH+0pt
s8r7x98/1t/4QYlSffH+UT5aVQ2ruvXF+0d5Gkfnm8r1xfvH+hu1uW+Pvnj/
WH+PFzb17Iv3j31fxNA7SvBSaV700Ob9yvDSWH+l10LU4GWy/gLi52vAy2L9
9XPQGgDvMOvvptbfQfAktO/r1d+fDoF3nPXX5+ap4fByWH9XdsZqwztL+6q4
OTmNgpfL+usxeqIevIuUj3HuTwV9ePmUp+XS4trx8K6y/qSTr06EV0j7+p5c
nmwEr4h9n+1YLxN4xTQv+Xen+TR4JZSn5HBpfzN45aw/y72t5vAesv5aV5ZZ
wKugPF9nGByeA+8ZzWsy77JWDK+S9dd432YBvFfsfiZnjrKBV836m7JaahG8
GtZf7aSqxfDqKB/LhG7nl8CrZ/1NqNjqBK+R9fcqa7kLvGbaN3qTj7EbvFb2
fbpTervDa6N8JE/k6z3gdVCe+eueF66B18n6G350rw88USj1Vx7g5w9POpS+
L0iYHQRPJlTQlxqoqBkKTz6U+rv9sj0cnkIo9ed9/ME6eEqh1J9qaHYkPOVQ
6u/ajMhoeGqhQqLTyj6LY+Fp0DzfntVjtsAbEEr9XTglEw9PM1TwS3Za+2Y7
vGGh1F+3ORcT4WmFCqL8U2o7kuDphApWZYtqV6bC0w2l/v6cm5oGT5/2bToa
qZoJz4B93/x5X/bDM6R5Km39bh+EZxwqFGrt/5R5BN6UUOrP4mJQNjyB5ll+
jRGfgGdOeTqlWg8/Bc+C5vlOG9x5Bt4cmhdd11hxHp6Y8kzecfnkBXhWNE9i
uCUmD54t5Zn/ZtHSK/DsKJ+yuGEGBfAcKM/XY1q634DnyPp7VvC+CJ4L7SsV
mXC5GJ4b+z7tJbtL4LlTPloPtFeXw/OkPI1Df5g9gOfF+htcpPEYnh/r705i
yxN4gez7fJ1LnsMLoXnRfXUPVsELZ/1d7wh7DW8d62/VHatqeFGsv14pI2vg
xbD+LrmK6vj7R/m8Xqb/4hN//1h/sn/PNPD3j/V3tmzzV/7+0b4q9mnLWvj7
x/oTrZr0nb9/lI/RsQm92vn7R3laWkl97ODvH+vv54OCTv7+0b6+WftS//H3
j33f7DU+Uup4/2hecrORRTd1vH+Up2SvzCA5dbx/rD/hyY/u6nj/WH+fDt7r
qY73j/WX6HtUCd5F2rfJaOp6ZXj5rL933RepwbvK+tv6QlcDXiHtqzVO0nUA
vCLWX2Xgq0Hwiikfy41m/w2BV0J5Oun0ShgOr5z19+iVmza8h7RvdPgJk1Hw
Ktj3DQlT1oP3jOZJSmY2jIVXSXnm+SsXjYf3ivWn8S59Irxq1t+N0wFG8Goo
zybPdXNN4NXRPKk+c4dOg1fP+rvc95cAr5HdT9cPj8zhNbP+uucet4DXyvo7
H7VxDrw2ysdpyXwHMbwO1p/UgHEL4HWy/k7Uy9nAE4UJVsk2l6oXwpMOo/5+
bcpbDE8mTKjOO2STuASefJigXzZX08MJnkIY9ffti6kLPKUw6i/9Sl83eMph
9H3mW5tWwlOjeSoNdnc84GmEUX9Jww+sgTcgjPoz+RbiA0+T5lnWXJ/vD29Y
GPUXv10rCJ4W7etrsPRvCDwdmhf9cuSzcHi6YdRfTNupdfD0aV/J6FuxkfAM
wqi/il1O0fAMwwTNsrXLJsbCMw4T/F4P0+u5Bd6UMOqv7FftNngC7SsVdPfq
dnjm7PsGpCYnwrOgeVq33LyS4M2hPI28xs1IhScOo/5U/vVPg2dF85yulrdm
wLOlPH1XpJfth2dH86IVPA4fhOfA+vtv4toj8BwpT4mjtG02PBfWX9dHo07A
c2P95eyXOgXPnfJ5vdCr6gw8T9Zfp/H58/C8WH9HZbddgOdH+6rMe7o8D14g
6+/HIeMr8EIoH6N9fr0L4IVTnpYzp9UXwlvH+vvS40YRvCjWX0rl3mJ4Mez7
pmb7lcCLo3nJH4Jml8PbyvrbPl3zAbwE1t9EpZ+P4CWy/l6/fvAEXhLrL/Zk
9nN4qbRvk154ZBW8NNbfM4vFr+Flsv42qIythpdF+2ppvZepgXeY9Xf/zJsP
/P2jfCxD1l/8xN8/ytNpkOWOBv7+sf6K1d2/8veP9t3oUze1hb9/7PvU/lP9
zt8/micp2Piljb9/lGee+4LbHfz9Y/0pDtzXyd8/1t/Fz0H/+PtHeTY554ml
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
BjQvcV2Lvi48Ix/6++x5958+PBOaV3gjqtwA3ggf6ue69LwRPFMfQfjU1Th0
KLzRNE/2yq/Fw+GN86F+i/NHjYIn0O/V73Cwmzk8Kz5fqsvbMfCm0H6mzR92
czw8G9rn4r//9gvwpvtQv9NF66zgzfahfjOOTJoCby6f7/sqDRt4C2he4rFR
32zhLeJ+k+WKZsJz4n6NJfF28Jy534HjPvPguXC/8evmLoS3kvYjWzfa0AHe
au63p5PcYnjruJ/pk+dL4XnS7zV/eerScnhe3C/UM2IFPG/aj9MQi+Vu8LbR
PteXdxmzFp4v9/OrUPKAJ6HfG61/5r0nvCA+X/Gm217wQmneVe+JMd7wwmmf
hZqKG7bB28X98l5Y+8KL5H4e57T84UXTPmV7b2sNgHeQ5qlkTykJhhfD/Vb1
TAqDd5T79XjjHwEvjn7vtMwLC3fDi+d+S3cMjYSXSPtZ38m2UzS8ZNpnwAW1
VwfgpXC/hXUZh+Gl0e9NbEvfEwsvnc93JmDlcXgZNK9w1iyLk/CyaJ9VPzRU
E+Dd4H4nPjQmwsvhftZX7yXDy+XzNYccS4GXR/P0D8/dfAFeAfcTtGdcglfE
f5/1TbpX4JVwv8gbfzLhPeJ+5hGPr8Erp/0EVC9MuQmvgvtJ9YJz4FVxP5Ov
jrnwqun3Xn2WMyIPXg33k+zpUgCvjvZTNcip5gG897TPTyUG14vhNXC/bT/2
lcJrpr83Fe17ax7D+8rnK9g38Sm8FppnvsG573N4P7lfnyFfquD94X63fxe8
gifjS/1WF5x8A0/Ol/opHdr2Vrz/fIW06CxXu3rx/vOlfsuGG3wU7z9f6qcg
I9sk3n++QmThxf+eNYv3ny/1WxSb9lW8/3wFrU+yq6Ut4v3nK3jKnjV1/ine
f77Ub0578z/i/ecryOj/Ku3RJt5/vnS+UyfeyWrg/qN506a5Z7fXwP3nK1Q7
fRlzqJMG7j9f6ndEfn1nDdx/NC9gYvmUbhq4/3yFnOgP8ZqK8ExpXuK+DS3K
8EbTvKtjLIt7wRvnS3+fb7omqsETaF5VxPMd6vCsaJ+fhifN14Q3hfYjW7nZ
WBueDc1TCbLqoAtvOu1T31DphT682fR7zR+9vGwAby7Nm+aTsssI3gLaj5PO
dteh8BbRPtc/mDpuODwn7ufVq+coeM7cT73moxk8Fz5fblruGHgrad7VtX6x
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
qhXffzQvc+GBXW/F9x/3M/RtrRPff9yvbblrvfj+436PbErei+8/7nfGZNxH
8f0XIOTX+vROahDff9xv1j+VJvH9x/103vp/Et9/AYK5TOuDj83i+4/7FV1a
+EV8/wUIEuW4mNyv4vuP9qm+STL0u/j+437Wq2JbxPdfgNBsrDGzU6v4/qPz
mTWP9Popvv9onnBX/dUv8f1H+7Q53M72j/j+437r3mf8Fd9/3E8oGdAmvv9o
n649M/fIaOP9R/Pc64/9ktXG+4/73QheKaeN9x/tUxK5tqy99v+9rdzPdY5F
R228/7if+eizneD5BAhxsV21VBXg+XK/6o6BneH5cb/LjY1d4EkCBMVM6eNF
3eAFcD+n6/e6wwsKEOwLTE4NU4QXTPssax9+TAleKPd7tl5BBZ6U+6Us2NwT
Xjidr1Ey/nUveDtp3o95ujN6w9vF/Qy6ZKnB28P9/n7W7QsvkvuVPotUhxfF
/U5n/9GAF033m+62RDdNePu534zdj/vDO8j9tDcJ2vAOBwgmwneHlAHwYrhf
wQQ1XXixdL/NOTYoWA/eUdqn44YezfrwjnO/yS2Og+DFBQj17n1e3DeAd5LO
t6Uxd4QhvHiaJ7l99oQRvATaZ/iBqC5D4CVyv9VbtwyFl8T9xi+tMYGXTPtM
UJoyazi8czQv9a3R9RHwUrhflsrAUfDO0z5zdv/aZwovjfste/3PDN5F7jcq
f81oeOl0v1UqXCgfA+8y93txYOI4eBnc76Lv+fHwrtL36UeIS19LeFl0PhmH
aaECvOv0fVIYMuzLBHg3aJ/K7dSWWMG7xf3K/xVMgpfD/c6+HTUF3m06n7Ff
0cmp8HJpntmc9G428O5yP/0j26bBy6Pz2fySvLWFl8/9ilfZzYBXwP1Ozbw5
E94Dut9cvUcZzIZXxP2maRywg1fM/TTlZOfCK6Hvk+TL+3Xz4JVyv7ySZ/Ph
PaL7bd+RzEkL4T2mfcZ6HE+zh1fO/SaGaDjAe0bfp1TVdVJHeBV0vswPc745
waukeTm3RjsvgVdF+yzYp1W0FN5L7reyk/kyeNXcb0xT/HJ4r2mftd2f9HCF
V0PzGt9c91kBr5b7ZZx6txJeHffbGT7XDV49fS8Ulnpmr4b3nvuNWGi4Ft5H
ut/UO1kcWgevgfapW6kr5wGviftd6LJ+Pbxm+j6ZBX157gnvM51PWFgxZSO8
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
Gd4GOp/0dPCrs/C8aN6+bWttU+Bt4n4z5mSmwvPmftqjdS7A28r9vvffmwZv
G/cr6Pj7IjyfYCEn+1jjynR4vtxvw+Oyy/D8uN/k6xYZ8CTBgklln1NnM+EF
cL9GqWoWvCC63xpvrw+8Bi+Y9tlyYEHTdXih3G/1eIeb8KTBQr28hW7eLXjh
dD5l5S7Dc+DtpHnqdZ+P3Ya3i/ape+2ZQi68PdxvT/bmu/Aiud/yxNf34EXR
Pi1Nd8+4Dy+a5ll33pSVD28/93vpoFcI7yDt0/HShKgH8A5zv9BBf4vgxXA/
hx6ri+HF0v3mPaTl8UN4R7lfuxdCKbzj3K88N6UMXlywIL/v7Fm1x/BOcj+/
qOAn8OKDhdkJc7Y2l8NLoH2m6i91egYvkfv9mpxfAS+J+xUbjayEl0znyz+l
ElcF7xzNK/P+1eUlvBTuN+31llfwztP5ajXza6rhpXG/L+dnvYF3kfvlHbhe
I77/6H5rO+I78K34/uN+612i68T3H/ezmtb2Tnz/0fdJvfewte/F9x/3+9j7
6Qfx/Uf3m3H2v4kN4vuP9mka/fZ8o/j+436rivp+Et9/9H2yHpse2iy+/+h8
c3oc+fJZfP/RPMcayZKv4vuP9umauarwm/j+4347Z5q2iO8/7rd01Kkf4vuP
9uk/QqP7T/H9R/OkneS2/xLff9yv8v3b3+L7j/YZe6HE7q/4/uN+QZk3/4nv
P+638LiBjC7ef3S/ZRiGHJDVxfuP+7WtlZXTxfuP+z2a495e9//eM/o+lZ0Z
XdFBF+8/Ol+lj9bkTvAq6ftUO6vTRXl4VbTPRp0mjc7wXnK/H4+lXeBVc78H
1791hfeazicfd8q5O7wamqe8KbyoB7xa7mftaa4Er47Op6uxMEEZXj33ax6v
2BPee+53V9e3F7yPdL9ZHu5Srwqvgfut+zJXDV4T9xMqsvvAa6bvk2PPHEN1
eJ+5X33iIQ14X+l+c7+xW04T3jfap3fkpvX94bVwP1fHSi14rfR9kppPnDoA
3k86376uBuk68H7TvNjqHv314P2hfSZcbonQh/eP+0lftAyEJxNC/ZzuLjeA
JxsiXM02OVc8GJ5ciPAsv/2+MUbw2odQv2dbE43hdQyhfilLlYfCkw8RhFrJ
FD8TeAoh1G+e8Ydh8LqECNKWQT0XjIDXNURIa/vz6/ZIeN1DqF/pa2NTeIoh
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
a9tEB3d4e7hf/915HvAiud9Xr+Ge8KLofC73HY5vgBdN89xjJ3T2gref+60f
5L0J3kE6n79Vjzeb4R3mfr1bZmyBF8P9PlZlbYUXS/fbkexcve3wjnK/6LNR
PvCOc79VUX994cWFCYMyxm5d7QfvJPfrsfSJP7x4ut/yayZPCICXQPsszTRK
DYSXyP12qvQJhpcUJlTXLP0VHAIvmc7XOOJ1cyi8czSvpVO+kxReCu2zrfJ8
fji889wv7cDInfDSuF+wb9wueBdpn33tXbrugZdO83SMpm3dC+8y95MZVhsJ
L4P2afq49+x98K5yv6R/16PhZXE/37cDD8C7Tveb3eyi6IPwbnA/3fS2Q/Bu
cb/WmLUx8HLo++ReJHl6BN5t7he3yuoovFz6PvlvmnnhGLy7tE+p9Sj1E/Dy
uJ+GRlgcvHzu19zu60l4BXS++Lvvl8TDe0DzUg+XFCbAK+J+6zJNE+EV0/my
heOnzsAr4X49Q7onwyvlfvVrt5+F94jut+c35tSdg/eY+0WOnpMKr5z7uWrd
Og/vGX2fWsw7DU6DV8H9ujYduAivku43+dePZdPhVdE+la5cd78M7yX3Cz9V
cQVeNX2fdBaHT86E95rOZzzM8+JVeDU0z7TDwn7X4NXSPi0rxodfh1fH/VJ1
v9+AV8/9ArosuwXvPe3TYf6Xomx4H2mei0GF+W14Ddzvb3bCHXhNtE/v0kTF
u/Caud/p3b734H3mfts21efB+0r3W9QMx3n58L7RPo9oT8wpgNfC/b4PMnoA
r5W+TykFPQ4XwftJ58s41iJXDO83fZ+yN7xY/xDeH9pn/uS7lSXw/nG/Puem
lsGTkVK/xqj0R/BkpcKzmttb+z+BJycVWhsOLN1ZDq+9lPqtnvLjKbyOUsG6
bbyxSwU8eSn1U+758Dk8BSn1q/s1pgpeF6mQ1Pfa68QX8LrSPJ09+cqv4HWX
Ur/lF/yq4SlKBTVT04MfXsNTonmWnXcsqIGnIhWcrV+63KkV339SQWp3adqQ
OvH9J6V+ocOOvBPff1KhxMVBreN78f1H51s3pG3DB/H9R/O829W9+Ci+/6SC
4F9eZNMovv+k1O9s+pUm8f1H86L8jmg3i+8/2ueROQG7P4vvP5oXr+/284v4
/qN5Kb9mrvgmvv9onxnFo0q/i+8/qWCefUpj/A/x/Uf7zPeWS24V339SQVI6
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
jCdr3ocXxvv7YrHtAbwtUhYcck/z7UN4W2mf4Yc755TDC+f9bfi3uAJehJTV
x7vdET2GF0nzpQ46nVwJL4ryMj/sU34KbyftM+fmH8HP4O3m/e33r62Ct4f3
t8bdvQZeDO2zZMLIi8/hSSivXGugwT/wpLy/N12SOnhy2mfj1cYv/8KL5/3F
3Q14AS+B9xdw7lEDvH30vinGJju+FO4/3p/69hOvhPuP91e/XOuNcP9JmZLe
RY/tTcL9x/vbY9v8Vrj/pMxdtEBvfrNw/9E+7ay73WwR7j/en3KT1Xvh/uP9
VT1M/SDcfzSfV06eSqtw/1Geb8TB9Z+E+4/3Nyeqrk24/2g+sdnqae3C/cf7
6/LK7xDuP95f+VijTuH+o/ct+qi+/Ktw//H+Qn/59k24/3h/Hi3Lu4T7j/6n
TIPHFT+E+4/39/my00/h/qP3La80PUvJEvcf7bPoYPSA7pa4/3h/wUGRPSz/
7xXQ/1Q+ee47ZUvcfzRfjc54HxVL3H+U19hidFsVXiHts6W4p01PeEW8v8SP
B3vBK+b9BT5TU4d3g/ap6lS0sQ+8m5SnoXmsvi+8W7y/VxIPDXh3aJ/Gl9cX
aMIr5f3JfEy04JXx/vxZfH949+h9c7Yb3jUA3n3eX8++gdrwHvL+/vn8WAde
Of1PPueeT9CDV8H72/VX9iB4j+l/EvtkaQ+BV0n7DBkRH6UP7ynvr9vmD0Ph
VfH+niz0M4RXTfPFZ00uMYL3nPJStlnamsCr5f3N/PXwMHh1NF/OsK+9hsOr
5/19/XeTGbwXvL8HdxrM4TXS+1aScdrTEt5L3l9I4hURvNe8v6lbTK3gNdH/
1Dhk6d6R8N7y/lrdFdbwmul9a789cvUoeC20T0XKwKe28N7z/oJ+TLSD95H+
J41JL0+PgddK8+kOvKdrD6+N8oz/O7fLAd5n2qeoKLl1HLwO3t/e7QvHw+vk
/a1YUeYE7yvt023cDLsJ8L5Tnlff0RkMXhfvr0GvzyR4CtpnQH63MBd4SjLq
L7bp5WR43WTU36JHXq7weshYRPio/EI3eMoy6k/lkNlUeCoy6q8mKnEaPDUZ
+5hyZrWSB7yeMqaTuWOmeAa83jJmnzPPvsoTnrqMLcmzGDrZC15fGfWn+CV3
JjwNGfX3d8ug2fA0Zay8/Pjj6DnwtCiv+o8rbXPh9ae8Rs+MxfPhDaT5Woz2
3POGp0N57R1BY33h6cqov7tzM/3gDZKxdNXD4/sthDeY8jQ2GG9ZBE9fRv25
9XqzGJ6BjGkYD2qd5Q/PkPJEH54VLYVnLGPedjeLLJbBM6F9Ou8/lrQcnint
022NtPtKeGYyVuo1YUNQIDxzms9Hy7dmFTxLygt4w1zXwBPRPsVXh58Xw7Pi
/cX11Q+CZ837C2iPWQvPhvYZPba2PRieLeXF977pvx7eaN7fv1kPNsAbw/u7
EO8QAs+e9xe9+dgmeA68P79FmqHwHGUstGjklG1h8MbTPkt6iN7+Ac+Z8sqf
/Tp3KzwmY03V2V+Lt8GbSPM1bq8XbYfnImPWLbNLkiPgTaZ9tg8/o7wDnivN
p/ieGBwFz533V76ldie8qTJWrHF0qftueNMpTzd06sVoeB68Pw9rgxh4npQn
MtCWxsLz4v19/vFFAm8mzedc+jJABm+2jCW7Hbz3SA5vDu8v+LxjPLx5lOcz
OeVEAjxvGVML0InQ2gfPh/LELSu2J8LzkzGvkOIZzX/CW0B54Ymj5++Ht4jm
iw4cdDMZ3hKaL35895Gp8PxlrD5F423qAXgBlJf58pHKIXjLKC+nIH99GrwV
lJcnPVR3GF4g72/JzmkZ8FbRfCWj1+QfgbdGxgrK1WYZHYUn5v3V2suPwQui
vMbcod+OwwuWMbOWnSorTsJbR3nt3u8qsuBtkLFghajSKRveRspT7XY1Kwfe
Jt7fk4wBZ+CF0ny6WXsiz8ILozzjbWvf5cLbQnmimfN8zsPbSnl2w5xuX4AX
zvv7amyTBy+C9/eg16F8eJE0n1dGq1oBvCjK8wmp2ngZ3k7e39Tr9Vfg7aY8
8ZDjHoXw9vD+WqUF1+DF0HzhtzeYXIcnofctOsU3vhielPf3+8SuG/DkvL+J
ZoE34cXLmFLmgH6Vt+AlUF7O2/YJd+DtkzH3vGu12SXwEimvKOGmdhm8JN7f
8lNRd+El8/4cEj7cg5dC73d1n1C/B/AOUF7ji0UlD+Ed5P3lTbEth5dGee0x
osMV8NJ5fwu1ej+Gl0HzqY76tqkSXia9bxoqLxqewDvK+6sp8XwG7zjlGZ85
c6UK3kkZMxDt+NO0Bl4W5dnN27r3Obxset+cLQIUtfByKM9NMXV1HbwzvL+/
rZ/+Cy+X5vM5rj3pBbxzlBfwh+J0A7wLlCf2fKX7Urj/KC/E6P6uV8L9R3nh
HedbXwv3H+/vbsrCJuH+o/ni0yLK3gr3H+WlrF9p1yzcf7w/V8+MFuH+o7wc
Pbs+74X7j/f3flDYB+H+o7yiv7q/+ijcf/Q/lSS99fok3H+8v9XlhW3C/cf7
c75k1i7cf/Q/Nfyaltgh3H+U1/J6p1KncP/R/9R+ZY34q3D/UZ5CPqvqm3D/
8f4CHCZ3Cfcf72+sQe4P4f6j/1C3t+rgn8L9R3lG/76LVhLh/uP9Xahs6ybC
/Ud5dtFXF/cQ/d+r4v35HbmnLML9R/O5jYwZqyLC/Uf/k1eP4ExVeLW8v2fz
+vWEV0d5S7OdtvSCV0//k3i7yZve8F5QXsjs3rP7wGuk/yl8+KeivvBeUl70
9yoLDXiveX+Pridpwmui+VIyj3fXgveW/sMjm2VB/eE1U17O9I01A+C1UF7e
UD9XbXjvKa+obeJ5HXgfeX8lZvp68FppvvID/WIHwWujvOq1He2D4X3m/bn8
468Pr4PyWrRvPRgKr5P313zKwRDeV8pTXE84ZgTvO/2Hqomhmibwunh/gYu3
DYOn4P2Nd31rCk9Jzj4aaYyYawavm5zpiF5q3TCH10PO7O0Kvoks4SnL2RJn
6YtkETwVOfW3pFTZCp6anPobfTZ4JLyeclbqo5ZUaw2vN+Utrd3qPgqeOuWJ
cwMu2sLrS3khO6cZ2MHToLxwbxvpGHiachYRLdLpHAtPS87S45V+BjjA6y+n
/ipfPRoHbyDlHTl533E8PB0508jZeuGEEzxdysvzStWaAG+QnHkXmURuZ/AG
U15J58rmifD0ab7y+57zXeAZ0HzV6XY3J8MzlLOmho2DR7rCM6a8FvceB9zg
mVBe++D/VKbCM6U8xcfy9dPgmVGe6u1LddPhmdN8Gilp02bAs6Q83d935XvC
E/H+JoqNvOBZUZ5owGz5THjWvL+3Dt9mwbOhPOdrBivmwLOVs1C3BNW/58Ib
TXley987zYc3hvfn8CTLG549zbe0T+EAX3gOlCd+cSTSD56jnFmH5MW8WwBv
POWFxwT7LILnzPtbOP/2YniM92fjbOMPb6KcFaf8MuzQUngulHekunfPZfAm
8/5Of9q4HJ4r5eVFVtevgOfO+5tb7BEIbyrNV2J+omAVvOlyllz+Q2ayBp4H
769iY7wYnifv75hf1+/wvORMrSVsUuBaeDMpr32GeWUwvNly5qUw1GDr4c2h
PNWOjuwN8Obx/u7+ox0Cz5vm0027FbUJno+c1Rutz/6wGZ4f5Ylc9/qFwVtA
eXZ6YSV/wFtEec7vF9tuhbeE9/eX6+Ft8PxpPq+kEb23wwuQswKf1f03R8Bb
xvtz/t4QCW8F5Yl/bfCMghcoZ2Yhr0uv7IS3ivLCr5w13Q1vjZwFR8uT9kbD
E1Ne/NJtij3wgnh/Y5atjoUXTPMd6TX9qQTeOsrLqbOZJIO3gfLyzuuckcPb
SHlFu3/qxsPbxPvzfb0rAV4o78/qQeteeGE0X3X3iwsT4W2hvIanqWV/wtvK
+zsVabcfXjjltYcHZiTDi+D9zfqtTyq8SJpPdfiYsAPwouQsXuP74FcH4e3k
/T3qMTMN3m7eX+Z/hYfh7ZEzJdHmCrMMeDGUZze9IPEIPImcuTsPPax0FJ6U
8tzadomPwZPz/krEVcfhxfP+DsyefBJegpxVLV07LjcL3j7KE7sYDs6Gl8j7
01bbkwMvifLCm9+3nYaXzPu7/mTxWXgpNF/8vsJ7ufAOyFluysrMsefhHeT9
OcZmXoCXRnk5/db1y4OXLmcGeY3zt+TDy6C8okvOby7By5SzwBLJsNmX4R2l
vPLF6tevwDvO+7NtsyiEd5Lma1CtSboGL4vyWp4Xd78OL5vy2s+eCCqGl0N5
iih5zQ14Z3h/3iGuN+Hl8v5EC87fgneO5tNVctG/A+8C5RlVmseWwLvI+zup
0VEKL5/y7LZ+8b8Lr4D351X34B68yzSfm8lthwfwrtJ/6NWZfewhvELe3/29
muXwinh/6WHbKuAVy1nnmo1L3v4N7wblhbi7za2Ed1POWPhgqxtP4N2ivOiP
/Uc8g3eH93fre3IVvFLeX3KDcg28MvoPj4jLgp/Du0d52Sy3thbefd5f//3u
dfAeUl5R07aL/8Ir5/0VLjN4Aa+C5iuPny5tgPeY/sPqZaM6G4X7j/dnr7vs
lXD/UV6zulL5a+H+o/++vf61Y5Nw/1Ge4uKDE2+F+4/+e9WYi1rNwv1HeRoL
D2xvEe4/3p/NjuZ3wv1H8xn9smr+B+H+o//Qsvq3mx+F+4/y7E6PGflJuP8o
zzlyyIE24f6jPLe5yqrtwv3H+zNvXt8h3H80n8+Pirovwv1HeUsrCqZ9Fe4/
3t+xw/nfhPuP8kLCdht1Cfcf72/G7/Ifwv1HedGGc74phPuP/sP49nErlEbg
/uP9lRn+3W0E7j/e3yE15x4j/u910nzZ6z5kKY/A/Ud5eVOeDlAZgfuP/vsi
3WuRqvC6KK/kXeY7NXgK3t+NWJ9e8JTiqL8/193uDa9bHCttWOVt0wdejzj2
sdlpwqG+8JTjqD9N054a8FTimL3ilXqIJjy1OOrvSlv9r/B6xrEIDXmNR394
veNYuu7SGwUD4KnHUX9jTppow+tLeZa94uJ14GnEMQ27upAuXXialOd8fkHg
IHhacczbbbdL5WB4/SnPy9eC6cMbSPP5WGnmDIWnQ/Mt7d6pbQhPN441rXla
F2UEbxDlhZy6/cEY3mDKCw/P8RsGT5/yomftKzGFZ0B58aZ/2JrBM6T5Ur4t
OWwOz5jyjjx0620Jz4Tmyz5itVkEz5Ty8jYNaBwBz4zyiqZ1eY6EZ055JfqN
V6zhWcax0PJPZaaj4Ikor/pO7l5beFa8v9T9itHwrGm+5qDw1WPg2VBe+6Tl
T8fCs41j1oqBHpMc4I2mPNXmUWfGwRvD+7uuqzcenj3vb5/Sbid4DnGs2Gjl
m1ZneI6UZ+n4cCGDN5731y+vbCI8Z8pzbjxg5wKP8f4u7ciYPIL9D4/UbVQ=

       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.015, 0.015}], 
      LineBox[CompressedData["
1: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
meiJOkGWzIwkqcPoyTtBk2HykS+n0FNzAlGfvvLbpejpkO9TPJ7mXEMPnGBP
4f2v4bXo2ZLv65cJGj9Gz5N8//WksmQbeqFOYDt9utHnLro/J9itvcmj+hvd
nxM0Ovey9/+m+3OC9JXnG8p5eeC//TmB2mN/V0UhHvhvf05w31e2e4coD/y3
PycIHnjMHJzBA//tzwkEUrdN+sjywH/7c4IzkiszHyig1+4E5md+yuuooNfj
BJ/0zxafUEdv0Am2PfDVm7oIPR5nmO8lXRe3DD1RZ7jf1+jwzgA9eWcITkrt
sDRCT80ZpogbMq6Y8sB/748znM7/MaawFj1wBvNlRRkZ69CzdYZPdd7Sv5zQ
83SGba6Shd4e6IU6w7zeh9oNPuixneHexpTbS4PQSyH5wga2x8PRyyT5x7+1
C8bQ/ZH8RafDWGy6P2dYc8dr+M1G9Mqd4aPDjDSLZLo/Z0jrapC4nEb35wyq
nOS82Tvp/pyhTkBPKz2L7s8Zgg73VQ3koDdI8hcWWK7PpftzgcIbHq338+j+
XMDMVjxI+zTdnwt0vbs/cPQc3Z8LpMYmJgtcovtzAVVeHVFmBd2fC9Tt/5L7
uoruzwWC5uWrm9+h+3MBvqtulZfu0f25QIHldLNZj+j+XMC0va5521O6P5If
ucn3xwu6P5I/rt3v+ZruzwVUsnoT7r2n+3OB2rl5Qks+0f25QOBll4O5X+n+
XIDXTER1ygDdnwucenG3LGaY7s8FVoduNG7/Q/fnAh9GFzeZ8fDi/kj+zk+e
FwV4cX+uoDz7eK+cCC/uzxXuljpx0yR4cX+u4G88jf+7NC/uzxV4m+9ke8xG
T8cVTgXEK9YpoQeusHpQq3SRGnq2rvBhW7fhEU30PF0hReZoA99S9EJJ/lkH
12h99NiuUGMo1P1qJXopJL+xmmm6Gr1MV+Dx4UyWWqCX6wr53zUyZW3RKyL5
KR/kUx3RK3eFzhlHivvd0KtxhS2Fdnru3ug1ucJcPYG6uwHotbvCnfqbDlph
6PWQfI+4jkMMuj+S/3UBgzeO7s8NTm5+Pxa1ge7PDUymH8p4mUj35wYdebbS
q1Pp/txgizZ/YUkG3Z8bzK2t0pbZQ/fnBnecmbdT9tP9uYHfJzXbvsN0f24w
Gf+u3fUE3R/Jn3ogrKaA7s8NjI9aD2ucpfsj+Zq8aQcv0P25QXL1NQmecro/
N1C0j8mLvE73R/I752m1VtP9uYFv3Jsqkzq6PzeY4N9vef4B3Z8bnDi4tlXq
Cd0fyVf/F7ilhe6P5F+vHPjSRvdH8q0ZyS4ddH/uMOetiuidbro/d6iObs9d
+IXuzx18/u1VP/Cd7s8dJrItKicH6f7c4YTKhGnEGN2fOxhVlDe3TNL9ucM7
80hf4yl8uD93SHql1H92Gh/uj+RHvEqQFOfD/bnDrT97hJKl+HB/7uCduebg
Z3k+3J87jM/5q+I8F71ckn/pcln1PPSKSP7qcOMFGuiVu8Pb54pN+5egV+MO
m4NbPSd00Wtyh9kju3vDVqDXTvIzTLnPTdDrIfnyY3xG5ugNkvzzl7KLrdHj
8YBjq0IVZzqgJ+oBK58olCa6oifvAW/8Wgx7vdBT84DNP3c2OPqjp+MBs9PA
9VYIeuABN6VGu9Si0LP1gPVFF5j7mHR/HvDXIHjyL5fuj+Q/nJUZupnuzwNW
rH8m/yyF7s8DXvdnFK9Mp/vzgE3JxnpFu+n+SL7EcK3EPro/kn+qxGHzIbo/
D/DSCez4dIzuzwPG7skxHE7R/XnAUbenYzeK6P5I/uftGfNL6f5IfsIq6ezL
dH8kX2Sw4M9Vuj9PkD9xTjvkFt2fJ9xY7H/76V26P0/wrJGxXdFA9+cJY46P
20830f15Qm53Wpj4c7o/TzDkrhhOeEX35wmvBX+mfnxL9+cJCUeKJey76P5I
voZvXlUv3Z8nXL8ppTXvG92fJ3isa6zK+kX3R/I7tlqOjdL9kXzm8tagCbo/
ks/3I/AJHz/uzxPacs4MLJ/Kj/vzhA3zvZMLp/Pj/jxB7tpMUTFJftwfyV/7
MHejHD/uj+S/3qLePQe9QU/4HaVfuU4VPR4vODzRb3p9AXqiXrB8b2GzymL0
5L3glZKX7x4d9NS8YMMVif7R5ejpeIHsmoaEQGP0wAuutSYJPTZDz9YLPMJ0
DxpYoefpBaO/v6oU2KEXSvJ3nSoTdUGP7QX6Ch7GGzzRSyH5F8SaPviil0ny
Te572gajl0vyn23uvRqBXhHJD1zGVY6l+/MCt6HPfJkcuj8vGNl+Mnskge7P
Cw7JuikGbKH7I/nnREsbt9H9ecHLFXWG+rvo/rwgvimhIX8v3d96kPHVdhU5
SPe3Hq7+6OniHqX7Ww+uW08wO0/S/a2H4Znkv7GdoftbDwdPC2dWnqf7Ww/6
+nfllcro/tbDy4YNxbsq6f7WA9dzsd7wDbq/9SDd97HWr4bubz1UJB5zeHSf
7o/kizl16DbS/ZH8k1MZJ5vp/kj+0jtj017S/a0HvTpuBucN3d96eOGiJf2+
k+5vPXB6ugqseuj+1oPUxlztij66P5I/zeG24k+6v/XgckzQducI3d96GNKq
bh/8S/fnDQdus8N8eafg/rxB10Fj+IHgFNyfN7R86EzVEZ2C+/MGNvuwRN6M
Kbg/b5ASsMubKjsF9+cNFYemaLEV0LP1BpcFN6veKaPn6Q2DVSzLterohXpD
js2C1ita6LG9QeddR+CcZeilkPyYgwMZBuhlknwe2+Rfq9DL9QbJ/XyiPqbo
FXlDuWpVboMleuXe4FwZq75sHXo13vDLQq3yuBN6Td6wv+2tqZAHeu3esCwy
p5nlg16PNzz/a+X7NhC9QZK/h6ffIhw9Hh+YOfdawuVouj8fuFIWLaTApvvz
AUfTeQfTN9L9+cDPltcqP5Po/nxgf8i+svVpdH8+sGzU0rh+B92fDzzfMdmo
nUX35wOsWZWex3Lo/nxgRmlUr0Au3Z8PXDZS4TLz6P5I/tM2vjeFdH8k339v
tvk5uj8f2PfLXLHsIt2fDyzdNl4yq4LuzweeSZcbbq+i+/MBZnFEw4/bdH8+
IGGo5Op1j+7PB8oevey695Duj+R772EueUr3R/K/mU3mvqD784XsLX92T3lN
9+cL2jMuy8e+p/vzhacFYcXtH+n+fIGpq6i35ivdny9I1L+ovfiD7s8Xytx3
O8gP0/35gsOX1R1pf+j+fOHHpt9R3//R/ZF80UtjHgICuD9fWJIXklEnLID7
I/lLFKQXSwjg/nwh9u7zgiPSArg/XxB33qnNP1sA90fyP5rcjlZCr9wX7ONH
bNrmo1fjC9+FLrSbaqLX5AtZuUFhF7TRa/eFxZqzhmX10esh+beaU1NXojdI
8u0yJL4Bejx+INZplOdugZ6oH1xkDWnW2qAn7wfr+EuqtBzRU/OD7wcCLA+7
oafjB1lqcq283uiBHyy+/iSQEYCerR88sdo+8DIUPU8/iH6zMnk1A71Qkh/9
S6SURffnBxcmz+bKbKD7I/nZfupbE+n+/OCbskxl31a6P5Jf3mTqlkH3R/LN
05prMun+/ODxS0Nfzf10f37ACB/oO3iY7s8PRP8UJfCcoPsj+bt9hKIK6P5I
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
FgEa7O02vCz0tCLg0ZRV7VHx6OmQ/EO/Ql9uRs+Q5C84NwRb0YMIOFfll1qS
jp5FBFjZyEjIZKJnS/LfNp1I2YeecwTsiknT7DuEnmcELORZUeV6HD3/CHi4
b8Ci5hR6oSRftfiFRjF6jAiYVukTeLAUPTbJt5Aa+HcZvQSS3/YoKfIaeikR
8Dliq0jrLfTSSf+/Brkmtehlkvw939XON6CXQ/IVz1RIPUYvNwLCy9abbnmO
Xn4ECJnObP7yCr0ikt/ywMflHb2/CFgbsqXvdhe9P5I/opew8DO9vwjYsaNf
8MA3en8RoD6r8MDkL3p/EfCgxFMl4je9P5JvJFHWMkHvLwKmPq03MuYXw/uL
gGL/pMazU8Xw/iLA8peOp6SYGN4fyU/72pMkKYb3FwEZ0qc4n+XE8P5IfrE7
n7MiemMR0LBcLLtaFT2eSAh9dG/OgoXoCUaCkPfmkv2L0RONhOJvSw0ndNCT
jATLLZ/rwwzRk4+EHomTLs+N0VOKhO0Frl2r1qCnFgnquqLMYiv0tCKh/n7t
xAx79HRIvnvC7kQX9AwjQfDLEvleT/QgEoo29RQ5+qFnEQkWoid0bwWjZ0vy
TzjXqkWi5xwJ6UuEHfbFoucZCfPv1rz7y0HPn+Q7bYgK3YReKMn/uGiseQt6
jEgQiP+YvnI7euxIOCN0TKpoF3oJkWCe61ggkY1eSiR80piqvfkgeumk/63b
1Z+OopdJ8u24Ng756OVEwv33mu03zqCXGwnBrK7Q+SXo5UfCFP7cob1l6BWR
/AP2qX8q0SuNhDVqghIhN9Erj4SP126deFqDXlUkbLNia66oR68mEua9WVh1
uhG9+ki4x+i0EH+GXhPJnzz0IuElei0kP3td4Mc39P4ioVB5yoDdB3p/JL/8
RlJVD70/kr+GJTKvn95fJKS9VM/N+knvLxJUwzvUxkbo/UVC3diBiqBxen9R
ELTbxvQJrzjeXxTwz+FrXi4kjvcXBYUXr/sUiorj/UWBGcT2TZ8pjvcXBV3P
5idslBXH+4uC1KC3gt0K6KlFgerw/gPrVNDTioLadCuV6+ro6URBoBxPmcoi
9AxJ/vmrRnuWoQdRULAyunHUAD2LKDB9rOoZaISeLcn3fd3TZIqeM8kfyOYY
rEXPMwpUUi35Ctah50/yJSf3ijqjF0ryz1TM2eCBHiMKeA2iSj74oMeOglMP
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
XgLpX3U4JmAveomkPx+7UmY/eilsOGZjN954AL00NkQdWGi29TB66WxY+W7K
Lv2j6O0k/dU6m/uOo5dJ+sfclD11Er1sNpy/dsjXrQC9HNKfJ+6MyBn0DrHB
2mpdf00xerlsmLV/gU78efSOs+Hra/5NmhfQy2fDDdX3NZ2X0Ctkwy7GDaFD
V9ArYoNX5UE7m0r0zpH+k8yDPNfRKyX9LWzfVt5Ar4z036uuGlWNXjnp38YX
qVSD3lXSX7mjrLUWvSrSP7JqdNd99G6xYVr5AWN4gF4NG9r/xm4ffoReHRtK
1tg0nX+MXj0bEvaoSfo3o/eQ9H/J6yXdgl4T6T/3Xf6jVvSaSf+w671b2tBr
If3LchbrvaHvH+k/FsP9+o6+f6S/qfWtk530/WODxu75/K7d9P1jw58WHmvh
HvS62fBI4W32nc/0/WPD0ZBrrzh99P1jQ8TF/Yoa3+n7xwbD0eiQ9wP0/SP9
war0wCB6g6T/jnmDViP0/WPDuWf/DP/9pu8f6T/rTUrFX/r+scEq6GpDxCR9
/zggX7pPbC6v9H8ePwe+DDFcX/BL4/vHgRtGa4/vFJTG948Du9JVu42nSeP7
xwGvp5MLh0Sk8f3jwAK518xzYuhJcuCPf+U13xnoyXDgwbnsSUkp9OQ5cORX
lPlDGfQUOBC+0jIzWR49JQ4s36bSoqOAnioHpj6ekP+iiJ4aB9ql2/3zlNFb
yIFzvhXFzvPQ0+JAQvHe71PV0dPmgNVApN7thejpkP6GFolsLfT0Sf+tynUL
lqBnyIGqR+PTOpait4oDGZJtDjm66AEH3L3LD681QM+MAwvPZHVMGKJnwYHf
3yLml69Cz4r01zdnhJugZ0v6b1Eqn2OKngPp/+Dv2PM16DmT/jNewQ5L9NxI
f68rGUbW6HlyoK1gz5Nftuh5c+BsX7j0WXv0/DmwUXeNt48TekGkf9Lcwpmu
6IWS/vV/vjS4oxfBgV6xl9pJXugxOHDN/fKGZT7oMUn//MzbvX7osUn/L2EC
JwLRi+eA+jIzW6cQ9BI4MLpJMUcoHL1EDjTUjbXfikQvhQOHRVuV4qLRSyP9
XcvC1JnopZP+ebsvvo1Dbyfp3xs6vI+LXibpv8R0leVG9LI5ULRxTtr4JvRy
SP+7vx9eTkLvEAcshF9IhKWgl8sBGedL7gpp6B3nQM+xXXnPtqOXz4GrH0M+
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
vGL3SnjmPPILHHt81mp4ljyyuajZ0ukLz5rl//vW6vxaeDY8qnEs5q1dD8+W
Ryd2phQZ/AfPjkebnvDUqjbAIx7NHLLIZUsIPAce9V9vuc9uMzxHHr05r1H3
JRyeE8vf0WR8MhKeM8s/44a/VxQ8V5Z/x6Hs3iJ4bjwaVhPxs0QCbzGPvhu6
2wvk8Dx4dGvtGPnYrfC8eLQvu0d50zZ43ix/+5s+yTvg+bD80697LIiH58fy
b09OVd0Dz59HD6vD3+bvgxfIo2MGbhYbD8ALZvnXWGw2TYIXyqMZWeoFzw7B
C+NR35+vu+5Khcfj0eupRU6OafAEPLqwNSm+4zg8Ecv/IOxx9il4UpZ/4EJD
vwx4CpbfZ/Qa/Sx4MSx/RvfMymx4sSz/t8av8hx48TzaM+Wa7eRceHt4tEZx
UNR6GV4Cj6zvb759PB9eIo+UByzQ8iyEl8zye5sv0r4OL5XlT1dLvlUML43l
//rqVWQJvBMs/+RCM8tSeOksvywx+E0ZvEyWv3zTpYMV8LJZ/n6uf+c/gJfD
I9mKUTO7PYSXyyP3k6qxV2rg5fFoaOvLqg213P7xqG3iVb1hddz+8ahYfMD7
aT23f6z/u6End77k9o9HPjrzP814ze0fy+81cvzvJm7/WP7j3QRnm7n941H1
x4Ybvi3c/vEozaZAfeBnbv94FBq93/X+F27/eORwJ2S/7Bu3fyx/b5d625/c
/rH8HmbDPrdz+8fyH1UJPNbJ7R/L/+HFeY9/3P7xaOG4/HatrgOxfzwyjkqg
myoDsX88+npr4xae2kDsH49uaM2rsOgxEPvHo91LRvR7rTkQ+8ej1anKXom9
4HWy/M31R136wFOKJGWrK83K/eApR1J15D7LvP7wVCMprTg4PGggPPVICtV0
LjQZBE8zkhwWDe9WOxiediT1TunqHGcMTyeSGpue73YYBk83ks6Nyav9NRye
XiRJIvYaZY2EZxBJC69vWOszGp5RJBn3mJs1wBKeSSR9XWj6/Z4VPNNIupHU
xU46Hp5ZJO1+XSeZOBGeeSStHn259OMkeJaRZBW2RzttCjzrSOp6LWjJUoJn
E0lVanNSejrAs2X5XYe9uTETnl0kbUxUMo+YDY8iadqrZyGj58JziCSdUZfy
Xs2D5xhJL0N3Kx1whefE8hf8N2ueGzznSBJ3c4rruhieayQtcBn66NJSeG6R
NGT/P/3/POEtjqQvL56uNl4Bz4PlH5Gb/tgbnhfLv3FXa6wPPG+W/0rghOl+
8HxYfuXZwp/r4Pmx/M4mtzID4PlHUuXevxqrg+AFRlLq89qF/TfCC46kYNOL
ieWh8EIjiTbEN4jD4IWx/i8HDJ/Ag8dj+ZVmBbXw4QlYfifji0eE8EQs/+4/
HYvF8KQs/7Mn0zVl8BQs/9ALMdcV8GJY/sCdlWEx8GIj6frF9f3NY+HFR9LO
vzNXvIyDtyeSVs0acjxhF7yESLKM7/wwdy+8xEhSqn1s1WU/vGSWf0gOLzcR
XirLvz6uKCAZXhrLn+OvNuQwvBMsf+cMl5oj8NIjSXum0b7tx+BlRlLDjo5n
dBJediRl19QY/0iHlxNJosHn/TMy4eWy/Ot2ZHufhZfH8p9b97PfeXgFkfS5
3cG+7AK8oki6Nn2wXHQJXnEk7dr+u2z8FXglkbTy4aM+HwrglUbSmEHnPFKv
wSuPpH9rYlMX3YBXGUn3s9a+7XELXnUkHf453aLoNrwalp8MN2++C6+W5Y9p
zx95D14dy1/1sGvDfXgNLP/AbKd9VfAaWX6f7fFzHsFrYvkz/R7/ewyvOZJc
vk8zvPiU279IMrQftGb9c27/IumT4lfG4AZu/1j++9VfH77i9o/1P+Cs7bY3
3P6x/Ku2iaa+4/aP5T+95va399z+8enfV9I6/ZHbPz7dn2ywaGUrt398Oiz7
mdS3jds/Pm24V/Wq9Du3f3yaqptlFv2L2z8+9VwZEzyug9s/PjWc9L3U/Ifb
Pz5ltU79m6Kkj/3jk9BWf6a7sj72j08ukh/b1VX1sX98Mix7UFXYXR/7x6dP
Omf0NmnoY//4VOi11dtMC54Zn+KO+5ys14ZnzqcVn+w/7dGBZ8kniwkDxzvp
wrNm+aO/8/8OgGfD8t+pvJGjD8+W5e+dqe5vCM+OT/8t2+JqOAQe8WlK2ur9
1SbwHPjUq2VK/VZTeI58ej5Ob5i9GTwnPp2J+hbQNgqeM5+iSu6fP2UBz5Xl
75XRvnwsPDeWf6mCdMbBW8zyp67acscGngfL32xXEWULz4vltxrQz9oOnjfL
z2/zfGcPz4flv1lx9NA0eH58+qt5unnhDHj+fCpfJLfsPgteIJ+SU7zDrzrB
C2b5304uDHGGF8ryW/bvNmI+vDDWP+/r3OcL4PFY/uv3du92hydg+Xuk185a
Ak/E8rvJjP54wJPyaV7yyrXnveAp+DTozaSstSvhxfDp42jd7war4cXy6WrY
l8lVvvDi+RR7rVyyZS28PSx/91OlduvhJfDJfIFU+2sgvEQ+dSauWHJyA7xk
lv+VbYpXCLxUln9Uvze9N8NL41PgptZRt8PhneCT3dWyEEEkvHQ+aaqezBsb
BS+TT3UuEqW30fCyWf79y2clS+DlsPwNE+MWyOHlsvxmfR+pboWXx/KHfNYv
2AavgE8frtxdvXEHvCI+5SufSDeNh1fMpx3O4tZnu+GV8Mlzn9eEXfvglfJp
VP0EoeMBeOUsv6nOrY6D8CpZ/g2fNM4dglfN8l8uXeiXCq+G5e9yPFE/DV4t
yz9H1FB5HF4dy7/Hc7jiFLwGlv+ZTdDkDHiNfMoc2udi6xl4TXwS/Pex43g2
vGY+zcm9M90zB14Ln/T/pcVo58JrZflnRVfeugyvjeWPX9afnw/vB5+2145f
YVkIr53lN+59/E0RvE6WP6Dlw8FieEoC6si5beVaAk9ZQGWdR3ndSuGpCihp
prDoShk8dQEFxHmoBVfA0xSQ3eNxLsMewNMWUA8j7X1Pq+HpCKhu3YdnO2vg
6Qro9LkS45m13P4JKPL3Ef/fz7j9E9Ach6jss/Xc/gloYOzSn74vuf0T0PuH
1vYDX3P7J6Arg3rJ7zdx+yegbX7vy2TN3P4JyPPsrT6TWrj9E9CoX6kenz9x
+8fykyD12Bdu/1j+mCVvPb5x+8fyV1lZ9PrJ7Z+A/PW1Nt9s5/ZPQLa+zfm8
Tm7/BKRx5mbXMf+4/RNQ7ffDTq+7GGD/WH57fnyiigH2j+Xfsvixi5oB9o/l
rxxrqNLDAPvH8uv1XJOnaYD9Y/lXvcsI6gXPg+U/XfzVpA88L5a/LcW2ti88
bwEts4sUxfWH5yOgkfJFtx0GwvMT0O97llrtBvD8BVSqq7koazC8QAElrnyb
5GMML5jlP3Xj1YBh8EJZ/i+HzCqGwwsTkPokXrB0JDweyy9xvzRxNDyBgNLL
xvz9OAaeSEC8vhoz06zgSQXktLxp+9Lx8BQC0jtxvarnRHgxLP+nZL3iSfBi
Wf4JEd4RU+DFC2iryO3kaIK3h+Uvtfj0ajq8BAGN6NNj/IGZ8BIF9GvZG/68
2fCSBXQnrehG17nwUgV0oCVJ/fI8eGkCWjc+3PU/V3gnWH7hwv3GbvDSWf7b
o+sfL4KXyfL3Uh+2Yym8bJZ/6euA6Z7wclj+I9fO/1wOL5flf3+wPdMbXh7L
bx1Gq33gFQjoLX/Blv5+8IoEdOmmeUX5OnjFAorp2b2fJABeiYCWLm70nBAE
r5TlP1x4tCUYXjnL/zax+UgovEqW33Kz5ZIweNUsP881XJMHr4blvzGq8Dof
Xq2AJmqodQsXwqsTUHf3V3PNxfAaBPQk+erul1J4jQI69eZAbYICXhPLb7HJ
yDkGXrOAZoXPX9slFl6LgPoXjczKjYPXyvJ3V/0esAteG8u/4OXkIXvh/RDQ
loMFkpoEeO0CWtK4v3R7IrxOAQ03D9WelgxPKYp+bnJZ8iMFnnIU3b5qlpJx
BJ5qFB1Q7fbG+xg89ShaN79hlO5JeJpRNPFAfkhZOjztKFJ9mZAnyoSnE0VP
zEKUbM7C042iEyHzZn04B08visLyR8SlXoBnEEWOKiqPFl2CZxRFuvNe6Gtc
gWcSRW/3XVldVADPNIou1e9L33wNnlkUbRm+sXXkDXjmUbQk2HlCw014llE0
PG+4cN9teNYsfxflW3PuwrNh+efUayjdg2cbRfv35C28eB+eXRStqdubuL4K
HkXR+GHBDYMfwXOIou5Bc4c/egzPMYpqck2Dtj3l9o/l/9fl4tTn3P6x/LOf
d3x7we0fy7/r8vTTr7j9Y/mf7olZ+YbbvyhqMt5Q2fcdt39RlBswp//d99z+
RZHiwrAV0R+5/YuixX+Ujo9r5faP5Xes+9D8lds/lj/uktXh79z+RdGtx7t5
7r+4/YuifUZBReod3P6x/P5Oatf+cPvH8p8f6rJJaRD2L4q6dfzba6Y8CPsX
RY8cnj2r7zYI+xdFx2Nzjfd2H4T9Y/kf7fJ30hiE/WP5Df/L/tsTnoLlXzv7
Z442vBiW/6yJvb8OvFiW/9dfmaEuvPgokk17WlY9AN4eln/bxT4x+vASomho
dbyHvSG8xCj6ph+Y2mYELzmKbvrOenvKBF4qy3/G2GKFKbw0lv/Hn006ZvBO
sPxTa/PvjIKXzvJvvdBVaAEvk+Wv3OlkPRZeNsuvFxD/zhpeThRtXu34+JAN
vNwompkxxNDNFl5eFPX71unb3Q5eQRQ12j3JuGoPryiKLshzvoZMg1fM+q+I
sx0xA15JFLn3Xy967givlOX3nnl7txO8cpb/lJHWbGd4lSz/lw73Py7wqqNo
76THSecXwKuJIl/p+Vdr3eHVRtG48h1mg5bAq4silX7+wVUe8BpY/uUzLm3x
gtfI8p8Y/NduJbwmlv/z7xlfV8FrjiKHiTXbT/rCa4kiHfG5Kq+18FpZ/tJY
vT7r4bVFUU6fdd63A+H9iCKpp8NJwQZ47VHkdszw09gQeJ0s/8f2cW83wVMS
0rfxj/jJ4fCUhXRTmH1jQSQ8VSHtvb1dXS0KnrqQfLXXuhZEw9MU0jiP6fs3
SuBpC6nr0UH1pnJ4OkJ6+P7X0Lot8HSFdNT6YcCubfD0hBQiOHvecQc8AyE5
3NrW3rETnpGQdLT86NxueCZCalw8bYvfPnimQso5bFChfwCemZCk7372fXAQ
nrmQ3MZWeyoOwbMUkklk1tHJqfCshdR2I6a59Sg8GyEVa6yxPHEcnq2Q9rhT
uOcpeHZCWn1Iv1A7Ax4Jyarph0rJGXgOQlIZUzWXnw3PUUhV4Wd2W+bAc2L5
i7bWvrkIz5nlV/c1SroMz1VI0xdOXeuaD89NSH2SBmZ1K4S3WEivGr9/u1IE
z0NI580fTA4uhufF8m/OlAwrgefN8hduKX16B54Py6/mox1fBs+P5Z9vv2Rm
BTx/IV0/oJfyuxJeoJB2vfz2+mw1vGAhrRpZOWpNDbxQIY0NzQgZWMvtn5C6
FCjy7j/j9o/lV1mtJK/n9o/lnzdl1qSX3P6x/AkD4j43cvvH8r9oe3isids/
ln/Eff1lzdz+sfzBp1f3auH2j+XPk6ff/MTtn5BEXVe18r5w+yekhXPtJoz5
xu2fkIz29he+/sHtn5C+1H29mdjO7R/LP6xCY34nt38sf1D6QpV/3P6x/Jdk
iXldDLF/LL+Sd0OQiiH2j+V3mjx8qJoh9k9ID3bpBtWqG2L/hHTk6ZcLcZqG
2D8hbTS51+HQC16ukKYFnpre3hteHst/URqT1RdegZAa/qyo9OkPr0hI2Y6T
+usNhFcsJMnOfisqDOCVCMn1Sesx6WB4pSz/kPIPE43hlQup1f+k1aeh8CqF
VHRewksbDq9aSPEdy4uWjoRXw/LPsFXTGg2vluXf0deleAy8Opa/5vPeCCt4
DSy/Ydmz0ePhNbL8a08YN06A18TyZ4v9D0yC1yykqe1e2fOmwGsRUq/pE392
JXitQnqxTcf+8nR4bUI6W/1J9t9MeD9Y/wZ3y4xnw2tn+dcc7/NkDrxOlj9L
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
OyEia9POEsch8E6x78Nd//VHjOGli0h5w+OenSbwMkQUqDPz3OJh8DJF9PDS
efdzpvCyRGTnZfRLYwS8bBEdU4pL8jODd05Emsc77K+PhJcjolAn/1f65vAu
sH39WCMPGw0vV0Qzds8we2AB7zLbG5vz5aMs4eWJSOfZ4GDFWHj5rP/oHTov
reAViKjRpCN38jh4hWyP7qxbljAeXpGIcgJr/rTawLvO9rn3jCNzJ8IrFpHk
4rkZJ2zh3RTRB4/B75QmwysRkdvf2O2edvDusO/X0d8WuVPglbL+Z62r0p4K
r0xE2z882hxA8MpF1LbTQa9kGrwK9n0bd67AyAFepYiKnxh682fAeyCiUVGx
yjUz4VWz/of8PmE5C95D9v2/tXbO9tnwalj/6x99fOME7wnrX8thF82FV8v6
z8kel+QM7xnbxyWGT77Pg1fH+u/cznedD6+efS9T2w0zXOE1iKhqxtob3RbC
e8m+n80P13i7wWsU0dEd09Xz3eG9ZntilZ3ZbzG8JhGF1AxyDV4C7x3b18jt
bXeXwmtm739we8KwZfA+sP6L/SaJPOG1sP7XPXz+1AveJ9a/5nTx+BXwWln/
2WeHxq+E94X1v2jQnffe8NpEdL59W8DM1fC+iWhgyi+tVB94P0Qkne53/rcv
vF8iet9UvWiRH7x2ES3cPq397Fp4Haz/MWeTe/jD6xSR8UMDWrMe3l92z0Vs
a7wWAE9JTF8NfikG/gevi5iWXV8zcnMQPGUxXV9Tfe/+BngqYhrZY9rGkRvh
qYppd1ZWX3kIvO5i+r3Q4PKLUHjqYvL5GeM5aTM8DTHdTfr5d28YPE0xWdGa
o5/D4WmJKel11cw5PHjaYuoaQ83HIuH1FtP60Vmx//jwdMRU9UDfclkUvL5i
mhQWU31BCE9XTEcH/gzrJYI3QEw9rvkOXC+GpyemEJ+qqzcl8PTFVKtGqwbL
4BmIaXrmGZVIOTxDMZ121T/1UAHPSEy9v2+dO2YrvCFiikz88SkmBp6JmF5O
8d39ehu8oWJyevVg/NRYeKZiOq+YWpu4A94IMQ0cdUbwLQ6emZgk9wcazY+H
N0pM70O3FqfvgmcupoUDfvip7IFnIaYrBT49Vu6FZykm41UPzuTtgzdWTNu6
TV3Qdz88azF9Sc/8FnQA3jgxebgMPFCaCM9GTDe+bpk8NAneRDGZ7f9eL0yG
ZyumXZN9JLWH4E0WU/uLymHjDsOzE9MqmX1pXCo8ezGVjsgMbD4Cj8Q09p6e
9ow0eNPElLhxS07KMXgOYlLS/b64/Ti8GWLyv7L6t9tJeI6s/xWVh7JOwZst
Jltl+2nqp+E5sf5PZrz2yYA3V0zqznpbCzPhOYtpY6tilF4WPBcxPd37rSL0
LDxXMU2zXR1SkQ1vgZjSn9/vZ3YenhvrXzIlT5oDz11MPNMMr/oL8Baz/u8O
ULLNhbeU9b9BkbbnEjwPMZ3T+eb46TI8TzENuLzq/ewr8LzEJPa6vyMtH94K
MTUrTRn7twCet5hcj59+uLQQ3iox5TkNiMi5Bs9HTEaf5Ppa1+H5iilmd1vh
uhvw/Fj/NqtWFxfDW8f6f1bRzfAWPH/2/qPt0iNK4AWw/oeedq6+DS+Q9X+n
f+voUnhBrP9A+Z6td+EFs/57t9k0lsHbyPq/6P10yj14oWKyXFYRdaAC3iYx
Hfg7eUjbfXhhYuqSln5z3gN4EWJaN6v/ulNV8Hhiqvwg01B+CI8vponxX7OW
P4InEFPqOO+Fl2vgCcXUvfbe9z5P4InEFBw1OfG/Wu7+E9OTIel2d55y95+Y
ppboNhjXcfcf63+9TBr1nLv/WP+9vpo+qefuPzFF5Ky8a9XA3X+s/yX3/tvx
krv/xDS7c1Lvd6+4+09M2amnLkx/zd1/YtKbqbv00Bvu/hOTqFna8bOJu//E
9G7Hl5SF77j7j/VvtXL6mWbu/hPT5ZryN2ofuPuP9c+fFLO6hbv/xLR18Cnz
qx+5+09MrcX9Kvt/5u4/MS1ZJw0NaeXuPzEVaX7RvfeFu//ENOLciivD27j7
T0w7F5Uvl3zj7j8x/Wq37fL8O3f/ick75eSxCT+5+09Md6b3m737F3f/sf7f
Sj60tHP3H+t/e2vcrA7u/mPv33KF1dFO7v5j/T8se9T5h7v/WP8Rtrwl/7j7
j/U/6KTBeaUh//eyWf/X+xZpdh2C+4/17yfxWas8BPefmDb0aFW9oTIE95+Y
HmctP22gOgT3n5jIrWxeuBq8y2I6+XPilwfd4eWJqVfyib3mPeDliymc+k7c
ogGvQEwvXoufvdSEVyimWTGfhXZa8IrEdHb0cvYPKHjXxdS/6u6tL9rwisUU
HTbR37kPvJus/4EnNE/qwCth/V/Tye7SD94dMV3yEbt56cIrZf13//wjtz+8
MjFtyfQ62FsPXrmYPrvenRI4EF6FmJZ+n/CyRB9epZiuJR6XDRkE74GYhtvr
jBAYwqtm/b8SldUMhvdQTD8Vn4LGDoFXI6aVo7z6xBrDeyKm2/dLLzaZwKsV
05hNEzymDYP3TEwJA453JpnCqxPTv4I+qT+Gw6sX09pVIocFZvAaxFTR7VNT
xkh4L1n/pz23qZrDaxTTYZfS0atGw3stJrU2mwf5FvCaWP/7j23StYT3jvU/
uc+AjWPhNbP33xCdX2YF7wPrX/Zxhek4eC2sfzPPruLx8D6x/u/dOf7MBl4r
63+jjZPNRHhfWP+6x1ribeG1iSnrSu/4D5PgfROT7spoa0c7eD9Y/8ofa1Kn
wPslpqaTyyI77OG1i8nF+c6gxQSvQ0y5reOvZ0+D1ykmw31pvhoO8P6KSWHb
u7vfDHhKEvr0XJhRNBNeFwktkbS46M+CpyyhQtNlXzfPhqcioeFlt/dVOsFT
ldDODeNtR82F111CP3TS6uTO8NQltPKytqhhHjwNCZV4CU0mz4enKSGLLi0l
+1zhaUlo/3GP9a0L4GlL6K/T7Z5z3eD1lpDfp3HnjrvD05FQxe6j7kqL4fWV
kM0E7V/LlsDTlVDKs6iki0vhDZCQquiDvfYyeHoSChrq8Wq9Jzx9CT26UyK/
5QXPQEL2/40zM1oBz1BCJ3ofLY9cCc9IQlq5vYIfecMbIqHwZVE6lqvhmUio
/u/73G0+8IZKyDFt6bI3vvBMJZQ1q+TPVD94IySk22J95OBaeGYSEsYfmfF9
HbxREmoa1+vd/PXwzCXkUivYfjoAnoWEcqPeW3T7D56lhAyNl1atDII3VkKK
klubr2yAZy2hj+ut9fpthDdOQot6HSnYEALPhvWfo+V9NxTeRAkNWypQHrYZ
nq2EdnQ2n4gOgzdZQt9Tl8x5Gg7PTkLLZ976OI4Hz57132y1a2ckPGL9x6WO
e8+HN01CCVZaT2ZEwXOQ0J8aPv+wEN4M1j+/2fB3NDxH1v/gJTfcxfBmS2j8
zZtrzkrgObH+11mp95DBmyuhbj1TM33l8Jwl9N+5nq7XFPBcJFSziN+mtxWe
q4Sm/H6XsCkG3gIJHU9ZPOn+NnhuEurpcPO5WSw8dwltfjtWLNsBb7GEnm8/
PPRFHLylEppp2fOObTw8DwmdeRgZsHcXPE8J9eW90/q8G56XhKIGLT7vtBfe
Ctb/9eJFx/bB85bQPL+x7X8T4K1i/fc4nOxxAJ6PhAad1aQLifB8JSR3i2zU
SoLnx/r/+VbhnwxvHes/edHIm4fg+UvoKhXfMzwML4D1/8ZyIy8VXiDrPyal
78Mj8IJY/6M1L1ukwQtm/VfxPGOOwdsooVthb/82HocXKiFz/UVH7U/C2ySh
vdduzEw8BS+M9e9j2dyWDi9CQr7dU2JdMuDxJFSeqWGZngmPL6FxC3jVylnw
BBI69L0pbMVZeELW/0H3gXnZ8ESsf/sbV3XOwxOz9/9qzKqgHHhSCdltOaRS
egGejPU/SuOUSS48Beu/MmKu8BK8rRLatKnp05PL8GJY/wPcd1tfgbddQjOu
Xh8flw8vVkKZq8bUviuAFyehfqqHBA6F8OIlJDjdwyjlGrxdEnrtElH8qwje
Hgk5t73xc7sBb6+ELux365FVDC9BQgZ21890vwXvgIRkDRYLfErgJUqoRZb8
7epteEkScjPrcWBAKbxk1v+98Mmhd+GlsP5D3tTfK4OXKqFYXTfJiHvwjrD+
rxQNk1bAS5OQ10qL0uf34R2T0E3l5MCJD+CdYP2fUtfeUwXvFOvfOTznYzW8
dAl1tr5ePPsRvAzW/76Fv4/WwMtk/dsWHfrzGF4W679+9LSltdz9J6FkSdLr
80+5+09CKsPVt/as4+4/CQWUhY1a95y7/yT0cMPrihv13P3H+u+7MGRQA3f/
SSjt8rV+ES+5+09CmstH51W94u4/1n+XJK/Rr7n7T0J1x7srbX3D3X/s/c8J
S3vVxN1/rP9PjY5T3nH3H3v/exa839/M3X+s/wnXdnx9z91/rP9n5mPntXD3
H+tfdPDhyY/c/cf6H9o9outn7v5j/Zdu1l/eyt1/EpL+11h46Qt3/7H+ey9Y
3aeNu/8k5J5b2O2/b9z9J6H8Zebpt79z95+Ehv5LdDb+yd1/EtqeptYq+MXd
fxJqm7V5z+N27v6TkGfLKxurDu7+k1BxvOvT2E7u/pPQqPGFUW//cPcf6792
1JDp/7j7j/UflXgzWckY9x/r31ht3c8uxv/3Glj/JZs0Fiob4/5j/Qe8yspU
Mcb9J6GkXq4L1VSNcf9JSPnC1e+r1OA1SShw6ajEgu7w3kmouvOAXf8e8Jol
NPmIasNGDXgfWP8zN0nLNeG1SEjj/UvT4VrwPkkoNG7+XXEveK0SemZ19b86
bXhfJOTweGTvCX3gtUnoNP/AhV068L5JSMdIdWlLX3g/JMS/GdrhqAvvl4Re
rXuZcqQ/vHbWf8/50zsHwOuQUM65gjeLB8LrlJD+4pEx5/Th/WXv//d+c81B
8JSk9CGlW6WfIbwuUnJzCA29PhiespTy3zboGgyBpyIlk1iXK2HG8FSltN2y
YPkDE3jdpdT20KyL+TB46lLy5O0/pjCFpyGlG4O6zX45HJ6mlEbdCPkw2Qye
lpT2+DXEJYyEpy2l3z1crL6MgtdbSj5n8x/NHQ1PR0p33cx4Jyzg9ZWS1a8E
gy6W8HSldDBZpchzLLwBUuo6LcQn1wqenpQC3rxQ7T0Onr6UqmPmnQ4YD89A
SpMt8ueV2MAzlFJa1YgvRhPhGUmpR3jCXr4tvCFSCtVXmVgzCZ6JlJ5e2/jM
0g7eUClN930h3D4FnqmUMrrPM26yhzdCSn3OXLlFBM9MSpELRvgnTYM3Skqv
vu/T/DEdnrmU5hxUznadAc9CSuftN7plzIRnKaWBjfU/us2CN1ZKki3OB71n
G+Pnf6T0ftSVKflO8MZJaWHl8Jf95sKzkdKVTftkwc7wJkrJWE95RNk8eLas
/6vBZcPmw5vM+l9VHyRyhWcnpWWqzn2eLYBnL6Xi03kXx7vBIymNnD/cI94d
3jQp7W7b2/l+ETwHKXXs75o6cwm8GVJabRfskLoUniPrv+F5028PeLNZ//K5
2xZ5wnNi/Zvljc72gjeX9V9h+qDHCnjOUlofsnfTmpXwXKRUpdt1QJE3PFcp
2eZvyB+4Gt4CKR1d+XzFZh94bqx/lbldK33huUtp46nLx0f6wVvM+nc2dZKv
hbeU9f9lT8uLdfA8pHR6X5f4SevhebL+J22w3hcAz4v1X19X8zkQ3grWv2RO
5JwgeN6s/+GXBx3fAG8V679s2PV/wfB8WP/Be3yXhcDzlZK4b5fuF0Ph+bH+
Lwdl9NoMb52UFiyvc1kfBs9fSnld5ny9GQ4vgPV/4tK+wTx4gVKKmTPMNjIS
XpCUvnzaXfeQDy9YSh57lERjouBtlNL1CUEm24TwQqVkVves5HU0vE1S2iVy
Wj9VDC+Mvf+hl3oelMCLkNKq0qHnvknh8Vj//+12ny+Hx2f991H6la6AJ5BS
Yu5/SSpb4QlZ/57P7FfGwBNJyf/f7Fd52+CJpfQgLVfeNxaeVEqTZg8127AD
nkxKR1p2lZfGwVNISX3Xvw1D4+FtZf2P/08nehe8GCnV1j7Nrd0Nb7uUpgln
Lxu3F16slNKNc//E7YMXJ6Xet02ONCfAi5dSRMCuGTMOwNslpZe9/r1NSYS3
R0pOFwK3tx+Et1dK55Y+tXBPhpcgJb0/s6qyDsE7wPo/cnGz+mF4iVJqnmmi
55sKL4n1/z6+oPAIvGTWf9zflXpp8FKkNMQ6UHnTMXipUtr6uPZExXF4R1j/
/FlzzE7CS2P9G138KD0F75iUim4a76pPh3eC9e8fP842A94pKcX3/Pt4Tya8
dCn9OhfA/3QGXgbrf3GtodNZeJlSuvPb8UZaNrwsKVkevrDm7zl42VI64GCs
7pED75yUlN7tzMy5AC9HSuti/8zXyoV3gfVvGdC27hK8XPb+Hz1JKL4M77KU
UnmOkwyvwMtj/RteeB6RDy+f9X9jiLi6AF6BlJ747RxqUQivkPWv8ef21mvw
iqR06uz6gMYieNelpO3+RMv+BrxiKfF+zTx/oBjeTSk1JOcsarsJr0RKs6cN
aZ9XAu+OlLLfxCWfug2vVEoDtnVOVS6FVyYlkcX6xuV34ZVL6V3VY8XlMngV
UnINnzlS5x68Sild0s+5918FvAdSMioy2njnPrxq9v594/qaPID3UEqt3Tsv
RVXBq5HS0jP+nk+q4T1h/S94/NfqEbxaKY34MePojhp4z1j/B8/PfPcYXh3r
396oeXotd/9JybtxR+yhp/AaWP9bOsb8esbdf6x/c//qhc/hNbL+K2vCztRz
95+U/m2aMbB7A3f/sf71zl9d/RLeOyndvzp41dVX3P0npQmrd6gMeA3vA+tf
teNkyBvu/pOSWsa6ufeauPtPShvm13wa/g5eq5QetznsljRz95+Uph44N/75
e3htrH+7wbUTWrj7j/X/Mlaw+yN3/7H3L/89+OMneL+k9MJsXfGsVu7+Y/1X
PPI7+gVeB+s/xKHHn6/c/Sel/v3PnVnyjbv/WP/5hgvOf4enJKO3K2O/af7k
7j8ZzVf5vX/tL3jKMrp8au3kG+3c/SejwfMe1Rt0cPefjLZ8mS4J74TXXUaf
92UPq/rD3X8yWjLJsNT8HzwNGV2r3x64RckE95+Mhkvbe73qYoL7T0Y7h6/N
sVM2+b+nLaMfZQ8X71cxwf0nI+/g6b+/dDPBz1fL6E7f7EPOavD6ymhM3qBp
J7vD05XR/uXbX3fpAW+AjP51ad/ipQFPT0ZrT/iNuqQJT19G9+c8rOitBc9A
RhM+TwsJ7AXPUEaH95ztd1sbnpGMVCcOyhvSB94QGW2o2+Yl0IFnIqPHol//
avrCGyoj+2F+aWN14ZnK6GRptWNsf3gjZKQVNO190wB4ZjIK63N2x7SB8EbJ
6EWuwdhkfXjmMnL03PbwhwE8Cxll/fsZvsAQnqWMdI+t0c8cDG+sjKJnVxeq
DoFnzfpvodWrjOGNY/3vyupWYALPRkaXxhuk6w6DN1FGhk9jnDeawrNl/Qt/
fi4bDm8y6994zR5TM3h2Mlp8u8pGPBKePes/gJ4+GwWPZGSqnRVlMxreNBnF
XdAfsssCnoOMfi6NuflhDLwZMlrx58dax7HwHGVUcsRX44gVvNkysnCsyuqw
hucko4T3UxcuHg9vroz+xp35nm0Dz1lGftb6iRoT4bnIqOLxVjs/W3iuMrIR
/HhRNAneAta/ka9U3w6em4zUbj0wDZsCz11GQf5T71baw1sso5qeZ/4bRfCW
sv7PD+ytmAbPQ0YnFm+90DAdnifrv+P7kskz4Hmx/g/7dOybCW+FjOodHqS0
OsLzZv2/s58+dza8Vaz/2Mw3x53g+bD+xw6MUZoLz1dGUY+2mHs6w/OTURPv
+/2L8+Ctk9E8Q59Q7fnw/GV08UalboArvADW/1r7K7cWwAuUkVwjc7mRG7wg
GX06q9eF7w4vmPXvvuXYo0XwNsqo8Ne3WZZL4IWy/g+t/rBtKbxNrP9plXFv
POCFsff/ZooVecKLkNHybRmPDnrB47H+LfR435fD47P+qxUGrivhCWS0L/zb
tdPe8ISsf/3VPt1WwxPJaE3RfVVvH3hiGd3znXL6ii88KetfPWNePz94Mhkd
OjPgy4a18BQy6rZQsffuOnhbZfTfj7YJw9bDi5HRo4OrnkUHwNsuoylT7wuf
BsKLldHxRjvj8UHw4lj/W0/f2rkBXryMNpsP8H8fDG8X679SrjkzBN4e1v/m
trOHQ+HtldEZvVVuvzfBS5BRv8KKH+5h8A6w/lfbHTwbDi9RRm9UT0/pwYOX
xPrP6P/SNxJeMut/vlx2jQ8vRUaDvn0dPjAKXqqMZAe8yzYJ4R2R0Ue7iqD7
0fDSZLTo5eQ+I8XwjsmoQJ5+USaBd0JGw0b293ghhXdKRrEVsk5bObx0GX0L
+Xp4rwJeBuu/v7fD5y3wMmV0K/9ek1MMvCwZjfaevO3YNnjZrH+V9NH/tsM7
J6M/p3QfeOyAl8P6nyfbdCEO3gXW/5cv/XvFw8uV0fiElfn+u+BdllHypHsr
bu6Gl8f6fzGp6+C98PJZ/9JTx3n74BXI6OFwXaeHCfAKWf/l0haLA/CKZHQs
+MvOmER412Wk2W+l9euD8IpZ/3nlNfbJ8G7KqG75pMjEQ/BKZDSj66lB31Lg
3ZFR5ol+111S4ZXKqO9cqW/6EXhlMhJ8blVTSYNXzvrfsyJjxTF4Faz/ieUu
ecfhVcroQp3tV52T8B6w/sUn9wWdglfN3v+wfral6fAeyqilVFJnkgGvRkbu
Qa3Rwkx4T1j/fVaY1J6BVyujoZfKSqzPwnvG+ve0XR+XDa+O9f/vRM/mc/Dq
ZeR1rO85hxx4DTK6OVvinnIB3ksZmX/8/PPXRXiNMtq7a3mS2yV4r2XUMb7M
PusyvCYZ+T6d+Kr7FXjvZFQmPCH3yYfXLCNrk75mhQXwPrD3f1tcPqAQXouM
VAI/bwi9Bu+TjAK1l+tUFMFrZf1fuJs74ga8LzKy85i4TFoMr431/+f4n+c3
4X1j/R/VOTKxBN4PGW1yFM/YcxveLxk9e//p7cc78NpZ/zu9ts++C6+D9W99
1yKtDF6njHSeTKj6Uw7vL+tfcHzz0gp4SnJqNNLRy7kPr4uc5t4SFfR8AE9Z
Thf8P61cVwVPRU76Wl7KxdXwVOUkPV96YtAjeN3l9GHxhDkRNfDU5eTWcexj
1WN4GnIqONxn1+ha7v6T09AZonFbn3L3n5xi3318/OoZd//JqS3Wkz/lOXf/
yclrbKnhgXru/pPTzUc2N76+4O4/OY2KPLZm3kvu/pPTHsM+6qdecfefnDpu
RGd2fc3df3LyWftx/vI33P0npzINz7ZLTdz9Jyfr7DsJfd5x95+cktxtJv3X
zN1/curanvb89nvu/pNTwKHeYuMW7v6TU/W06KFRH7n7T06TmlpuP/7E3X9y
Stu2LMCqlbv/5NRjzB2tHV+4+09OodXjz7/9yt1/cqoLT1s0/Rt3/8nJwaB3
e/J37v6TU0aRMPnnD+7+k5POmpapC39x95+c+OrLGjPbufuP9X/mtkKtg7v/
WP8Lx49c3cndf3LK+XH0XsEf7v6T08Ak7Y39/3H3H+t/qrBviNJQ3H+s/8YP
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
2r7bkyuF/8f6eygtO/FG+H+s/9+1nX5VCf9PSnFx5Qlz3wn/j/V3dHK+9F74
f1La8CX9W+cPwv+TUhlvtH9ZjfD/pDTJap/NrY/C/2P9X/4r6/tZ+H9S0gxf
u23DF+H/SWmLQbnB41rh/0npbe70XJOvwv+TktOq9JW76oX/J6XU7kbdXn8T
/p+UdK/sTR7TKPw/Ke10/+e677vw/6T06XfAj7om4f9JyfXkq8PTfgj/T0qZ
DtPtTrcI/09Khp+uvWn7Kfw/tn/54N0LWoX/J6VGy73GV34L/09KC1+0P1Bv
E/4f678lYO3Kv8L/k9LQAa80/msX/h/r/9+0NH0lU/w/1t/v2oLNyqb4f1Ly
6Tb4z7MOpv/3fkkp/3J0rLmKKf4f6z+/fZK4kyn+n5SO/Frz4a0qvDYpKZ0o
k9ipwWuX0qpJ08wPdYGnJKPCD2lPG7vCU5bRWNmgjc7q8DrKKM4iWvt8d3gq
MlIr+pup3BOeqoyCNq9Z4qkBT01GZXplStc14XWR0aS7jmc1e8PrJqNE37Rp
AVrw1GWk2WVQbV4feD1ktOVSFG/YF56GjKpc/44M14GnKSOnltUvSnTh9ZZR
6tHS0JF68LRkpDPRUV+uD09bRhHvr96p6Q9PR0afxIbLJw2EpyujOeZRqscN
4OnJKKOwLbHFEJ6+jAw2rZ7lOhjeABlJdEsbLhrBM5DRt1tTD6gawzOUkcey
q2N8TOANltFdVcPym6bwjGRkepHfrj0MnrGM9s5uMwwyg2cqo19Nq+49Moc3
VEbeh1/6G1vAM5PRA7up6jtHwDOXkeXbK5fLLeFZyOjwHoN5NqPgWcpIaRjf
Em0Fb6SM/J/8OVJrDc+K9d+waoKjDTxr1r/vy6pTY+DZyOjUzSmRf8bCGyuj
zt5XTNzHwxsno0AVg0cptvBsZVSaoFjXbQI8OxlNnPVH088enr2MEhr9r92d
CI9k1DOmxENvErxJMto8fkrbpsnwHFj/ytSThQ7wpsho+u6BDmZT4TnKKMVE
UbPHEd501r/gt7RqGjwn1j/Qf7itE7yZrL9WSeHBGfCcWf9Mh+CGmfBcWP8l
qX1nzoI3R0YDOwy8ec4FnivrHy/3UpoDb56MGmb8Vl7sCm++jBZ8W3nu2lx4
7jK6s//FdI358DxkZDLWoW61G7yFMoqqSIm65w5vsYx+RgywMvCA5ymjpUPk
JVsXwvOS0f0HrVteLILnLaMR61b2t/SE5yOjQ71e3JUtgbec9b8+2feDFzxf
Ga1cnNKZvOH5sf7/+l886gPPX0ZjznIuP5bBWyWjk9NbG2f7wlvD9v/V7+CF
FfACZLR+b/HYTivhrZPRy9GTK5b6wwtk/V9d3nFjFbwgGZ3f3n9wnzXwNrL+
g7m89QHwgln/+79WPVwLL0RGb9b4dR+yHl6ojBw1ilN2BMLbIqPLaZPmvwqC
Fyajvgsv/7TeCC9cRtv/6h+LCoa3XUYf42T2XzbBi5CRi+Ovt1M2w9spo/Qv
K/acDIW3m+0/qsj09xZ4kTISW00qmB8GT8T2/zJ5/eVweBLWP1y/d9ft8KSs
v4Es3XcHPI71v/dz4Z0IeHLWf9WKv7q74PGsf/eiU8G74UXLyOsKTXkaCW8v
6++e/HGoCN5+1v+PHhcphndARjEnpRZvJPBiZNTu8PPZOBm8wzLy++S76QAH
74iMnsif63yTwzsmI5uRlOXEwzsuo9gXl5aejYIXKyPVrXod/0XDOyWjtQOk
8Qv3wYtj/f9rcUrbD+8M67/S92uPg/DOyii+2/PoVTHw4ln/lInWuYfgJcgo
ZP6llwOOwEuUUeWvfmFbjsK7KKNpJyQDio/BS5JR8qSWbIsT8JJlpF2zfIU0
Fl4K6y97plZ9El6qjGosJibZx8G7yvoXJc0+chpeGuu/uV9T0xl46TIaoC+J
cTkHL0NGe+7+GJcYDy9TRvW+y193TIB3U0buXZ5FeCXCy5LRrUv2RpkX4N2W
kfHcpPu9k+DdlRHfortm3SV42TJqOSru8SAZXg7b/8QfqYNT4OXKKO/9Mrft
qfDyZGQhKfxVegVePutvbn/cKg3eA9a/8OJE/hq8R6z/Jt33n9LhFbD+umKR
Qwa8J6z/7eahsZnwCmV0Ytmyx79uwHvG+ncuDJyXBa9IRusuTtBKvgWvWEYv
Zl+8rnYHXomMJjTrLF5+F16pjM4dFrXfyoZXJqPuE5rjdHLglcto01ufqRtz
4VXI6PWep58e34NXKaOpwybITe/Dq2L9n1wYsTsf3lvWf6NO0esH8N6z/n1F
IWMfwauW0YebTbr7C+DVsP7ePre+Pob3SUbXVJ56T38K77OM+ifaqZwphFcr
I9GsC+f/PoNXJ6OvjX1nehTBq5eRW8ye+ivF8BpY//FNe7uXwGuU0ZA33qP9
X8JrkpFi95PS/0qF/yejHyZ24f1fCf9PRksKEgeGlgv/T0a5gX1znlcI/09G
w/vs8RteKfw/GR3M/N5F8kb4fzJqW+J96V2V8P9ktKLDkzkT3gn/j6PH8bbN
h94L/4+j0TMTD32vFv4fR7HftG1n1Qj/j6NOByIrz38U/h9Ha8d+39nhs/D/
OHpRsXTIki/C/+Nows7H+ddrhf/H0bkhtgG9vgr/j6PuDxN6rq0X/h9Hm9Zp
X73/Tfh/HFX0inQf1Cj8P46mXm9sDf8u/D+OLi1eeuJlk/D/ONJSekyjfgj/
j6Pws+Or5S3C/+OoenqC+ONP4f9x5Py1j9nkVuH/cZS2d/eT47+F/8eRvk1j
0M8/wv/jaM8rrz5z/wr/j6O67QUZSe3C/+PIbfB4z85KQ/H/OLp1//w/H+Wh
+H8cGQX0OZPVYSj+H0cKjd2OfVWG/t8z5ag5reFzUKeh+H8ceS70UhSowjPj
6N7fR5YmavDMOTI/Pa54Zxd4FhwdcDy/uaIrPEuO2r5o6Y1RhzeSI9+oXbf3
dodnxVGBVYNPXQ941hxZly7pNE0Dng1Hx8MfJcRpwhvLUUfDcc5tveCN4yjg
Xvw3dy14thwVr9Lan9oHnh1Hdj122aj3hWfP+l/5VuanA484Ul+wZFu2LrxJ
HAX/eWigrwfPgaPXJ8fmhujDm8LRlCnxK5/1h+fIUdKn3t3MB8KbzvordiaL
DOA5sf4jv7m+NYQ3k/V/4fnDdjA8Z9Z/68PDMUbwXFj/AWPtGofAm8ORXs65
NzNN4LlyFLmy9+54U3jzWP9uO42Vh8Gbz9G8lPoHi83guXN0c77n2nRzeB4c
DW59oKFpAW8hR9yJMWlrRsBbzFHTpHML8izhebL+Nb3+GIyC58VRriwiNswK
njfrP6J+Uok1PB/Wv2jxB0sbeMtZ/80PJNwYeL4cLdcfY14zFp4f63/37FMa
D8+fI6sVvTYes4W3iqNjXSK0W+zgreFIJflr5hx7eAEcrZm7eMnFifDWcVTU
kq+kOgleIEe2x2zOek+GF8TRmYlnp910gLeRo27VmrV9psIL5mijZAcf6Agv
hKNy868jH02DF8rR5GeLXgxxgreFo4ub8kMjZsALY/372eiXz4QXzlHY7TN3
Rs+Ct531X6a5PNoFXgRHMzvvUK2dDW8nR1cv1iVOdYW3m+1/zqJZp+bCi+Ro
d/P9ht/z4Ik4qj08+oCbGzwJ6z/hzJgUd3hS1v+tRnlXD3gc6y/avn3FQnhy
1n9YneHdRfB41v/Jwnv9POFFc7Ro433/TUvg7eUop+9o9UIvePs5Mss6fXmY
N7wDHO3z1pi3xwdeDEe/Vba3vFkG7zBHyxJrj4z3hXeEo4ezFk44uALeMdb/
e17VNz94x1n/GOvIGf7wYtn+bU+bnFsF7xRHq9/0fPRvNbw41n/3tnWLAuCd
Yf1NazWvrYV3lqPTBR7Xeq6HF8/6B+V5rA6El8DRhj7WbblB8BI5epUZd3Lg
RngXOXLw6umwNRheEkcXOmyrKd4EL5mjXue/SEdshpfC0daZHsNlofBSOXr3
7V5h9RZ4VzmaccAqeGIYvDSOroyN63s0HF46R/1e97jZvA1eBkc7d4Z7zd4B
L5P1H/JF+UIEvJus/8MF51R2wcvi6Ma6e9OX7oZ3m/XvbVWXGQnvLkey66ei
tETwsjn6vriH1XoxvByOFiuFlzyQwMvl6L+zn7cYyeDlcTTMaUH/HRy8fNb/
a+7dMjm8B6z/3lG+1jy8R6y/zanOUVHwClj/V90vfo6G94SjUTvCXKbsg1fI
0ZHBnxtj98N7xlGHfPeDrQfgFbH+Ablj58fAK+bomcaoiuRD8Eo4Gnft5I4u
R+CVsv4Luw/2PQqvjKOu7Vvzbh+DV876n/60SvcEvArW39G9e3AsvEq2/9qc
lCcn4VWx/lEj5w+Ng/eW9bc++XP3aXjvWf9S9WOVZ+BVc/Q2fKv9uHPwalh/
w09v98fD+8RR6j23PfXn4X3mSHd1jqlTIrxajnb1GFlw5gK8Oo4+X4ld334R
Xj1HrgvUey+8BK+Bo8w/W9KvJsNr5Mjw1MeFPVLgNXEkneL21z8VXjNHjZ/+
O5VzBV4LRwsVllMGpMH7xVH2yNiPodfgtbL+Jd24onR4f1j/rVssLDLgtXHU
OuDjM0kmvHbWP2f+pvc34CnJ6cHK/3Tss+Apy2mkumXW4VvwOsrpaMqJpU23
4anISdmtW0eXu/BU5bSqNTQ+IRuempyenahx6pgDr4ucxk2e/3VJLrxucoqr
yY7OuAdPXU5duBHWve/D6yGnoBEnXq7Nh6chp9KirmH5D+BpymlSaOiAwY/g
9ZZTon5N9rYCeFpy0siet6L0MTxtOW1Zka1m9RSejpzedhmRpCiEpysnp+Tj
sz89g6cnp9S5XZsmF8HTl5Puz80xJ4rhDZDTzmMfxv16Ac9ATp8mzns99yU8
Qzm5Vt+NuFQq/D85ZUosjNReCf9PTgbDj99fVi78PzlJn3VZc6tC+H9yati0
uYdOpfD/5OTR70PqhjfC/5NT9u25bo+rhP8nJ9Pld3+ZvBP+n5yiO1sc3/Ve
+H9y+nXx2MTX1cL/k5P3nC7vx9QI/09O+c0hon0fhf8nJ8sj1UO/fhL+n5yO
TJj7eNoX4f/JSendncDTtcL/Y/1Fw7X+1gn/j/Ufduz6gnrh/8lp7FO1xVe+
Cf+P9d8Y0q7eKPw/OanpVMet/C78PzkFZrlO/a9J+H9yKvO+80n/h/D/5ESd
hss3twj/T04JiUdHPP8p/D/W30WtyLxV+H9yCv2+KUT8W/h/cqqKea/77o/w
/+Q03db1lt1f4f/JKeXNbe9D7cL/k1PfSHOV7/+E/yenCNOj552Vh+H/sf4F
nWee7zAM/09Oc4I21SurDMP/k1NGn/d7PTsN+7/nwfrfmDP6uuow/D85Sbxu
l2qqwVvM+ncwDw/oAs+T9T9/ZOD9rvC85HR3ZuccQ3V43qx/Q7BfeHd4Pqz/
gXddXvaAt5z1Hzvn0kgNeL5yWvr61hy5Jjw/1n+nWXNNL3j+chphfOTQJC14
q+R06KGq7fE+8Naw/uuDK1u04QXIaWXvdztddeCtk9PT67OHJOnCC5TTGM9b
+ap68ILkdFLJLMBHH95GOXU+d7hnVn94way/k+pV7YHwQtj+v250DzKAFyqn
ifvetj4yhLeF9beZfcJ4MLww1r88i3YawQuX0+Ydw6rLh8DbzvoPPiy2MYEX
Iadp+Z3M9prC2ymnywEbn9QOhbdbTjqab4MczeBFymnHNZc+cebwRHL6uDAr
489weBI5zW4f6uk+Ap5UTtdPH/qXYgmPk9PAaZ3OdBsFTy4nce0GRz8reLyc
vkVVfb5rDS9aTu7WLgo9G3h75XSn9KZlyBh4+1n/bUOLC8fCOyCnKMNDm83G
w4uR0897KnoiW3iHWf/VG25X2cE7Iqf7Pap8bO3hHWP9r87qFDMR3nHWf8HN
hAaCFyunf39MnWdOhndKTn6nYr6dc4AXx/pPUdmvNBXeGdb/c5DNYkd4Z+UU
q3hTdm0avHjWf9SsbRpO8BLktK7khsGaGfAS5VSy1TT33kx4F1n/gTErDWbB
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
ig6mdw34txUeRdHfRaE9F4Wb0/8AA8gKSg==
       "]]}}, {}}, 
   InsetBox["\<\"\[UpArrow] \\!\\(\[ScriptC]\\_\[ScriptT]\\) (solid \
line)\"\>", {400, 5}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[DoubleStruckCapitalE]\\_\[ScriptT]\\)[\[CapitalDelta]\
\\!\\(\\*SubscriptBox[\[ScriptM],\\(\[ScriptT] +1\\)]\\)]=0 \[DownArrow] \
\"\>", {37, 5}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["\[ScriptM]", TraditionalForm], None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 1000}, {0, 15}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6629841256130457`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662984125640075*^9}],

Cell[BoxData["\<\"Run KS-JEDC model without aggregate shock \"\>"], "Print",
 CellChangeTimes->{3.662984125641061*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.662984125644063*^9}],

Cell[BoxData["\<\"Running KS-JEDC model without aggregate shock...\"\>"], \
"Print",
 CellChangeTimes->{3.6629841256450634`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.66298412618845*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0010367326850655445`", ",", "0.9997180177046232`", ",", 
     "0.0008657074934035336`", ",", "0.9997644533198979`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.0010367326850655445`, 0.9997180177046232, 0.0008657074934035336, 
   0.9997644533198979}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984174165491*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999419689026446`", ",", "0.9999367255288075`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999419689026446, 0.9999367255288075}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984174167493*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984174168494*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.008125301143934394`"}], ",", "1.0022104522531237`", ",", 
     "0.013898512293621934`", ",", "0.9962166372942391`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", \
{-0.008125301143934394, 1.0022104522531237`, 0.013898512293621934`, 
   0.9962166372942391}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984196095052*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9958604999384612`", ",", "0.9280762735419067`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9958604999384612, 0.9280762735419067}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629841960970526`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629841960990543`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0061307451283312275`", ",", "0.998332717362338`", ",", 
     "0.01265585163838523`", ",", "0.9965570308320011`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.0061307451283312275`, 0.998332717362338, 0.01265585163838523, 
   0.9965570308320011}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842180816526`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9779400599747927`", ",", "0.9923224432468535`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9779400599747927, 0.9923224432468535}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842180836535`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984218085655*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0025238227033383964`", ",", "0.9993131903850561`", ",", 
     "0.009878887644305223`", ",", "0.9973129360005082`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.0025238227033383964`, 0.9993131903850561, 0.009878887644305223, 
   0.9973129360005082}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842412861176`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.996523935806797`", ",", "0.9710087153450948`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.996523935806797, 0.9710087153450948}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842412881193`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.66298424129012*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.0033486656081933575`"}], ",", "1.0009117073460576`", ",",
      "0.024793323342308327`", ",", "0.9932532659049311`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", \
{-0.0033486656081933575`, 1.0009117073460576`, 0.024793323342308327`, 
   0.9932532659049311}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842631366205`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9892470148806151`", ",", "0.9848501204706008`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9892470148806151, 0.9848501204706008}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842631386228`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629842631396284`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.012402911904818126`", ",", "0.9966235255075704`", ",", 
     "0.024858445056374023`", ",", "0.9932341990591267`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.012402911904818126`, 0.9966235255075704, 0.024858445056374023`, 
   0.9932341990591267}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984304709119*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9492120793627166`", ",", "0.9880828420576595`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9492120793627166, 0.9880828420576595}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66298430471012*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629843047121224`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.617526067278746`", ",", "11.343767509448629`", ",", "20.49690832686562`",
    ",", "35.89538922543446`", ",", "42.635631725372406`", ",", 
   "60.142325409905794`", ",", "69.937066247727`", ",", "78.47427897213677`", 
   ",", "92.0390856857546`", ",", "0.28146102636012427`", ",", 
   "68.43683333333334`", ",", "0.0013666666666666666`", ",", 
   "38.84834060304284`", ",", "3891.572053301369`"}], "}"}]], "Print",
 CellChangeTimes->{3.662984304714123*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.04241188780567484`"}],
  SequenceForm[" MPC mean:", 0.04241188780567484],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629843047161245`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.662984304717125*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.04203567744797754`", ",", "0.04216566404668742`", ",", 
   "0.04220012293455899`", ",", "0.04223366022083874`", ",", 
   "0.042272241846697645`", ",", "0.04262132810976227`", ",", 
   "0.042732393995357665`", ",", "0.04247698687194623`", ",", 
   "0.042567378124115485`", ",", "0.04272382117518059`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629843047191267`*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6629843047201276`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03940451386297239`", ",", "0.039461036455007426`", ",", 
   "0.039479891441806525`", ",", "0.03960383729199757`", ",", 
   "0.03979206171006089`", ",", "0.0463315706150883`", ",", 
   "0.05155351429120958`", ",", "0.043371659319977884`", ",", 
   "0.04513294149792424`", ",", "0.04957703064917973`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629843047221303`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.042215793991734585`", ",", "0.04501427779508238`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.042215793991734585`, 0.04501427779508238}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66298430472313*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run KS-JEDC model (minutes): \"\>", 
   "\[InvisibleSpace]", "2.985117855`9.40362773033622"}],
  SequenceForm[
  " Time spent to run KS-JEDC model (minutes): ", 
   2.985117855`9.40362773033622],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629843047471466`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662984304807192*^9}],

Cell[BoxData["\<\"Run KSHetero model without aggregate shock\"\>"], "Print",
 CellChangeTimes->{3.6629843048081923`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6629843048101916`*^9}],

Cell[BoxData["\<\"Running KSHetero model without aggregate shock...\"\>"], \
"Print",
 CellChangeTimes->{3.6629843048111925`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629843053785944`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0033041764786290173`", ",", "0.9991042823574916`", ",", 
     "0.0030000399866771943`", ",", "0.9991872425125061`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.0033041764786290173`, 0.9991042823574916, 0.0030000399866771943`, 
   0.9991872425125061}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629846308415284`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999919144798979`", ",", "0.9999904742031445`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999919144798979, 0.9999904742031445}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629846308435307`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.46312149333333333333333333333333333333`9.093946638382993"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.46312149333333333333333333333333333333`9.093946638382993],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984630844531*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629846308455334`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629847188679886`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.40469575619179`", ",", "59.13584415835612`", ",", "80.03381616112107`", 
   ",", "97.91209926343099`", ",", "100.99701462495996`", ",", 
   "102.90008089394959`", ",", "103.2087862445309`", ",", 
   "103.18623769570824`", ",", "102.26314010702797`", ",", 
   "0.926017731913892`", ",", "7.499883333333333`", ",", "41.76136666666667`",
    ",", "3.0261375079049118`", ",", "314.38558410861816`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629847188699903`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.007197605042020605`", ",", "0.9980461904738982`", ",", 
     RowBox[{"-", "0.0030614170379692496`"}], ",", "1.0008322961792504`"}], 
    "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.007197605042020605, 0.9980461904738982, -0.0030614170379692496`, 
   1.0008322961792504`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984718871993*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9990607899479061`", ",", "0.9987780748541619`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9990607899479061, 0.9987780748541619}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984718873993*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.45795115`9.092409221003587"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.45795115`9.092409221003587],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629847188749943`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629847188759947`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.66298480692447*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "23.839299574334376`", ",", "59.01310155651211`", ",", "79.73632348557894`",
    ",", "97.84022177616959`", ",", "101.00411665086877`", ",", 
   "102.93125352258382`", ",", "103.23167291164512`", ",", 
   "103.20037942695521`", ",", "102.26486182226094`", ",", 
   "0.9254046839766452`", ",", "7.5396833333333335`", ",", "42.0522`", ",", 
   "2.990353432784684`", ",", "312.87060294959946`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629848069264708`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.003954706426989585`"}], ",", "1.001074430127649`", ",", 
     RowBox[{"-", "0.0030023580946831885`"}], ",", "1.0008160390455865`"}], 
    "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", \
{-0.003954706426989585, 1.001074430127649, -0.0030023580946831885`, 
   1.0008160390455865`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629848069284725`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9993219128659477`", ",", "0.9992705535708728`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9993219128659477, 0.9992705535708728}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984806929474*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.45007891333333333333333333333333333333`9.090057885411069"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.45007891333333333333333333333333333333`9.090057885411069],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629848069304743`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984806932476*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629848980381203`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.64839894999182`", ",", "60.14999935533887`", ",", "80.80028475949464`", 
   ",", "98.28364955930174`", ",", "101.20756247715217`", ",", 
   "102.98561637154664`", ",", "103.26514464437639`", ",", 
   "103.21968485128994`", ",", "102.26917083956901`", ",", 
   "0.9301907560067947`", ",", "7.407883333333333`", ",", 
   "42.474183333333336`", ",", "2.921418481091108`", ",", 
   "327.39532062737453`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629848980401216`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.00018580806365231517`"}], ",", "1.0000504447437373`", 
     ",", "0.018128553652626778`", ",", "0.9950780118542849`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", \
{-0.00018580806365231517`, 1.0000504447437373`, 0.018128553652626778`, 
   0.9950780118542849}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984898042123*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9979201830528011`", ",", "0.9972712075272732`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9979201830528011, 0.9972712075272732}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629848980441236`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.45559950666666666666666666666666666667`9.091708147938311"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.45559950666666666666666666666666666667`9.091708147938311],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984898045125*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.662984898047127*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662985287056151*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.739378886898457`", ",", "61.462829038534586`", ",", 
   "81.67615256852137`", ",", "98.62767901092637`", ",", 
   "101.39941839355255`", ",", "103.06216836935505`", ",", 
   "103.31881816665617`", ",", "103.25587117666801`", ",", 
   "102.28091369138946`", ",", "0.9345829973083354`", ",", 
   "7.353613333333334`", ",", "43.04684`", ",", "2.844359107673643`", ",", 
   "339.7283881715814`"}], "}"}]], "Print",
 CellChangeTimes->{3.662985287058152*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "0.0008249161933328031`"}], ",", "1.0002241494919357`", ",",
      "0.00872866194931099`", ",", "0.9976301224482191`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", \
{-0.0008249161933328031, 1.0002241494919357`, 0.00872866194931099, 
   0.9976301224482191}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629852870601535`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995568039816884`", ",", "0.9995904375224272`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995568039816884, 0.9995904375224272}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662985287062155*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "6.46450359333333333333333333333333333333`9.739201429411429"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   6.46450359333333333333333333333333333333`9.739201429411429],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629852870631557`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629852870641565`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.6629852878276997`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.662985616026574*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629859442724843`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.66298601037939*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.519735629325677`", ",", "62.636647897530565`", ",", 
   "82.61691768375348`", ",", "99.08700791659349`", ",", 
   "101.66257727078312`", ",", "103.16443393075122`", ",", 
   "103.38722991587667`", ",", "103.2990155836457`", ",", 
   "102.2918734338521`", ",", "0.9392269823507516`", ",", 
   "7.212023333333334`", ",", "43.88271666666667`", ",", 
   "2.7273981563112732`", ",", "356.52333651159734`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629860103813915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.004371632284938809`", ",", "0.998813607194951`", ",", 
     "0.0031701591591000167`", ",", "0.9991392541474393`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.004371632284938809, 0.998813607194951, 0.0031701591591000167`, 
   0.9991392541474393}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629860103843937`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9980010976611522`", ",", "0.9978559050662078`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9980010976611522, 0.9978559050662078}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662986010385394*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "12.04644765`10.009525245877406"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 12.04644765`10.009525245877406],
  Editable->False]], "Print",
 CellChangeTimes->{3.662986010387396*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629860103883986`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.519735629325677`", ",", "62.636647897530565`", ",", 
   "82.61691768375348`", ",", "99.08700791659349`", ",", 
   "101.66257727078312`", ",", "103.16443393075122`", ",", 
   "103.38722991587667`", ",", "103.2990155836457`", ",", 
   "102.2918734338521`", ",", "0.9392269823507516`", ",", 
   "7.212023333333334`", ",", "43.88271666666667`", ",", 
   "2.7273981563112732`", ",", "356.52333651159734`"}], "}"}]], "Print",
 CellChangeTimes->{3.662986010390398*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.1284433794423666`"}],
  SequenceForm[" MPC mean:", 0.1284433794423666],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629860103923993`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6629860103933992`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03810712300529262`", ",", "0.03849157052622487`", ",", 
   "0.03959380478756003`", ",", "0.054913324548947706`", ",", 
   "0.0703118963645536`", ",", "0.21047538694524692`", ",", 
   "0.27153932574726514`", ",", "0.156000071744251`", ",", 
   "0.19032080564790055`", ",", "0.25327636660132113`"}], "}"}]], "Print",
 CellChangeTimes->{3.662986010395402*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6629860103964014`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.038104199936774275`", ",", "0.038489829490452876`", ",", 
   "0.039333134635512246`", ",", "0.05360574897328374`", ",", 
   "0.06813785180738419`", ",", "0.21335381842944423`", ",", 
   "0.28498046189989834`", ",", "0.15624861621508845`", ",", 
   "0.19174456006783447`", ",", "0.2613858746352259`"}], "}"}]], "Print",
 CellChangeTimes->{3.662986010398405*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11996865924988087`", ",", "0.23532804907825766`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.11996865924988087`, 0.23532804907825766`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629860103994055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run KSHetero model (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "28.42755427666666666666666666666666666667`10.38240574561844"}],
  SequenceForm[
  " Time spent to run KSHetero model (minutes): ", 
   28.42755427666666666666666666666666666667`10.38240574561844],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629860104614487`*^9}],

Cell[BoxData["\<\" Figure of wealth distribution (without aggregate shock) \"\
\>"], "Print",
 CellChangeTimes->{3.662986012068591*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], LineBox[CompressedData["
1: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
KUCOuM6MZQ6naBmJlUz98/7Y/PO/noZ/A8lrGo4=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.06, 0.06}], 
      LineBox[CompressedData["
1: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
l1ig+w==
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.035, 0.035}], 
      LineBox[{{0., 0.}, {20., -0.022918734338521096`}, {
       40., -0.032990155836456925`}, {50., -0.03387229915876677}, {
       60., -0.03164433930751209}, {75., -0.016625772707831166`}, {80., 
       0.009129920834065053}, {90., 0.17383082316246512`}, {95., 
       0.3736335210246944}, {99., 0.7248026437067432}, {100., 
       1.}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1: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
33T4PxrjnOI=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[CompressedData["
1:eJwtlndYzt/7wCsaRlOiRUmhlPZS3XdpL/U8Tz1vSkg0lJQW8ZEGDe0pDe3B
hyYq7bRFaaCdtEU0JPTr+/u4/znndV3nus65z+u6z30ErZ1J5+loaGjoaWlo
/jf+FzUv/k5eqLEUjD0yHIbNzd+NuId3Qsb0kUkf2a8QGpA5eaZRBNzE5RNK
+VehaDsRSnRIAWTJzqlp0uIphwvtxEtF4B1S4tFRYEDJivzHwqIIE39uJr2y
2YYhWWryWcc0oXDfY8teGzYMoeXdoViqCw9WIi1OS+3AawMXLWb9jWAfP9f8
JS4u7E57zHHB0hRopM8ruHJwI296aP0VMQrs7ck72SvEh41LdgZZ0lQwzmLx
ZtLbizYZ5nK07iehRGB4UBkFMaXQcXvY0ikQylxI1Rrfh3ejR8Tz+s+A/WHK
zv7w/Qj0ctT8IWuYZEp6LaUhghKFVU1G9Odhe5DVGZ+fB/BxItNLLlNbMPgl
eeL3s0PI/TI5JrDeHrYU5RoMXxXDJzJbrotYOULR6skWSxDH5umemiv7nOHZ
vsFzjxiPoKW7Tvcqkwtoqlmb09lL4mzS6Rec8a6gKfaWp8NYCqU/ex01VHED
Lprtzd2y0jgySSyeXXUHJ5u+7EIeGYxjeRm067Un/KdFFmk++qZIVF0FM24t
T5txWZR3f/KItckbJFwV+fKa5JCetTGkauoG7Ll45kRanjwSDYZL39h8oNLm
2D2BYAXUOPXnaILiLQirttX+aaeIxmpnXTIdfEFsgNxGq62EWW+H5hyz/UCU
Nyxqq6AyOgSN0OvM+sPuwSSGqVVlLG17vSNQ8Tbc8WWIcnpzFPMZuC4FhN6B
bY6mqZcyVdA2m88xZjoQZH9uulflrorMu4zObzUMhtjQzGlJTTV81sBWqFIS
AjW3y9YSWAGDeDuzfQRDQVO7Ram1DzD1zkqyWHQYWHGJMxoaI4aVL3vobY4A
c6PVhZnHiCwHWVYCaiLghNfdqIfM6ni6bvnn0o1IeNR0KMXTQR2j4LyEpkoU
3L/I2ar4Uh1LzVhUedei4FJMeNs7fg38UJ7dJVweDY6uQ1R1Nw1kE/6YyHI1
BkbkNPdbNmugjb6Xuo9CLLCzbp7g4DmGUyM8rsJLsWAkcZZ03P4Y/pty811u
YRz01afsWSs9hrVKFgKljvF//Wgi2lkvLQonwJXJo+vHdTSxpFW+mG8wAXLe
vHP9E6KJko/E3Rmj7oHLxJvNBzo0UVYjiCFRMxGKyXtOf2LWwjN1IdJli4mg
faxCzMxAC1WtPRv00u8D/UgaZ9RtLTxFDbsjaZQEryjt9c+qtdCsj0OHtJQE
19plP44ua2HpLp2O6MRkmHbp4Tt8WBvZjZ2m3qukwIJzLk/RaW389qTpzJaB
FHBbyLkdHqmNS64JdIxeqaAr2LF1pFYbTSYi2i2YHoCR6E7T6q/aqLXatbJO
egCWCp6b9Pbo4L7QYrux+w+AfGW+LUFfBwtevPVfGnsA27e4U1rddfBpeneh
2ME0OC9Er7OaqoPrJ6hmnhfTQP5zgpF6iw6Sf//qbn2UBqcjRTmqFnTwWs6F
uN1zaVCmXKIWwq2Lqlfk1kmH0kGQU/JGA+qijfdWd0ebdLiim+AZYKuLZR9u
n6Imp0MQ3WTfdKgu0j8y2MPQnQ7qTly6zCW6yLL1J99FpgzwKBZw3fZBFx+w
ylR7KWcA7f/70cNbffEOgg4ZwOg6O00voodKO9mibsRnwMNV5rNyhnqIw8mD
qvUZcNr79XiWqx62jQfRKc1nQHh//OKle3rI1cP3VIs7E3L/dLDm1uih+enU
f5W1MmF3y0Cp3ZQeVkmfTJl3zQT9vYcuNLPpY9CfWFXFjEwo+MT7YEhJH+dd
7uN8byaU0PB/rDunj0IqxZaTLFlQS4l5fDdMHy23i+j8NMgCvcbpW+RyfeyO
VCn9HZYFpUoBAxKT+ljtDZbN77LAI7pDVX6nAZpf9VyQFM2G5Wfiwrc0DfCV
krgoi382ZIVs5TjgboBWjnkV8pPZMP+t3Q9yDBBqZC1uUXJAvWtgdfSDAWaN
76pqaM8BBpb078JshtgSeP9en0kuFAX7f92nY4hjFkwZEaO5kH94zvnrTUMU
Ys4Jb7yZB9bvcCGr3BCbDGo4TQ7ng6brzPeTK4ZI35Q0uWkqH14MmayIyBsh
u0RA5fPih6BMN3BN0NMIhSTrDLQiHoFY7fffZ8uN0PV6ko7PP//+rR9jNKmz
vIA3H4MhkSq4WdcYB/tDk75HPYHzigaBR6OMcTln1EnasgA66ouv2QwZ40E7
e9G15QLYticIVA8fRzdGPT76e4WQ5ODN7+99HJusZi1uqRcB7Stli5W248ik
U0Gb9qUITpdUpOazmKDwPSGR2PRieFRwmemxggkyS4SPhp0oAREnzm2fzphg
zpCdYfWOUghf+9MqEWyCI368N6lvSiHXKfCiQ7EJZi+zRwWGPQWpHiY2zwET
HGN9luxn9Aw+H3vXL0Nvin657uVXtz+HxDbjbzfFTdH13nOapNbnsHajwUPZ
zBSTKmYCee+UwRvHyLsa103x86THxUPq5TCQx0z1TDdFk5WmmuWVDdaOXH3W
ZIpFdbppJfkVEGvmFv9x1hR/77MRjiFeQNMkC+U9Cwn5F/zPN9JUghRrGclL
koR0DFzXrqdXQtxg69NUExJGKft6T6pUQYlNUoaEMwkrbGV9FV9XgcnTAJXN
d0lofyE++wFRDQfGhzLXs0kYzMpFa/quGtb/F9UkZEphNqsUqQHbuYWxL70k
FH/T+afLogbkXvvkTc6S0O3JqvRASA3sTD0kuG2dhMPKl3U9n9VAEcl+1z9s
ZHR2EYjTGK6BkpEXJ2wEyLiftOQ6sKkWGiGtdFSCjL/638t9FK6FsAvRP7hV
yPiDuUxuSasWKgzYvkrqkpF78kZLgU0tfP8UY69PJqPVhR26Jb61MCqWIh18
ioyNwTZMKQ9qQZwzbzenLRlNyZZnt1fXgl+s9PS2y2Skq/6UlzxUC6HZz1xi
vcjY2z6r+HW9Fr6plt7s9iFjh/eJ8+lCdWBJyh2ZCyTjVCv3bZJ+HXh8YLam
iyTjwbJd31Lc6mC63bpT8R4ZQ7TUaEQy6uCMwP5fxWlkZHf2YrzdWwf+bR1P
4vPJWCFbaHWKtR5+NQyXMZaQMSj2raW+cT24beqePFBFRu+IVmI2uh4Sbhxk
5GshY/j+W3lDI/WwXfTkJ8YeMjaZjGXVyTXAP+ufjrOOkVGI832mXHQDxC3q
cpp/JWO6k8nvntWGv/VDQRNLGQYNh5cQ7mDsI8JOQYMvlcXj4y+h7WXErTIh
Cl72uOxsYd8IF5emw1MUKDhjyodsK40gMHhdocKQgoWjUYedQpsg44zj5iVr
Cq4EZB0dEGuGzHP9vlLXKBv9T9itqbMZ+lvm1MyjKMh0d3wg4Z8W+OFR36D7
cGP9v8XXy6Va4amx74P5BgoW2NicjJtp3Xh2DK3EhykoxNZ8PS63DXq2awbP
rFIwkK1gZv/Fdkgrv1uwbacZtr78nP9Q6hUMCeqd8pA0Q6EIUkPM2itQEUni
YzM0w5uvn6jqN3eA28Pca1W2ZrhrvJdfPv41yMdGbrL1M8PZuHa5UZk3oNJ0
9diXFDO8wTAe9yjpDcgI+zeqlJth6eVEuSL6TuiNertbrscMCwOInTmXOqHn
e3Bj5RczvLB0Wwn7OmFS7JXFiy3muOAcliUNXVCzp9KGS8gc9bL6LGWyu4Cz
4IZT4VFzDNJqs17Z9hbi66XorpDNMY+mq1zm8lugUf31GB3MseE2xS656+1/
fnzM8cOdikvT0t3gVJamkRxjjhWdlM/jEd0Qp2zUsjfXHLXz6K5UznXDN/6C
nNhyc1RyuZv/XLsHvv72XNjebo5yd8vU+FJ7YJM7qTx6wByXLU0/iC/3QDL/
552Kc+bIo817UMawF6SilnYxrZmjdf5Ql0taL0g4cXezb6Gi3Zx1wJHlXmDS
Y7A6x0XF+UvOM4X6fSBZY9+yVYiK4TFtj9RS+4DXaeEQ1xEqMteoefIu9oHC
jH50tDIV6SgRi6F672C1U4g7UouKksV3XvenvoPOqkOv+UyoKINzRfor70Da
YGuL5kkqtp4K0BMweQ+h7Fd4dtlQMeoSj1p6/nsgHrH3pTlR0bDH9SgX4wdY
L43m+O5BxehFs7na8x9gpTl7ZLcPFQ8eCVmbafwARTd/UASDqJg7+X5Hn2g/
pLvJ+/FEUfGNz5aRtsh+UNJguclxn4pwanQr669+mPIVt9yVScWnwwdhwn4A
9nWqSyj8S8UOh5wD8f0DcKLpB5PP0439z+53tjUd/M9PDRW7hG1rktoGIaRM
JLy2hYor5zV6HPSHwLeurqvmLRXZ10ozKl8NweVQg+PLg1Q8ueWVpLPZMIzc
VQw6OUVFztKoWydGh8FShpZ+4hsVVdiDjB4qjsDl73w6kb+pOKEspv7AdwRy
YVM3hYnANHu5FK+OEQgLFpM8tIPAqCPitoJ8o/BQm3mEYQ+Bb/ckpNy5OArh
E3vtJg4SGNCypp3wYhRqBz4Y1sgQ2Fg7aI2sY9B2v5QjVI3A0nv1i47nxuBo
3AE1LT0CXT5Kr28tG4MktVzyKJnA3VKF/oxsH+Ea45O+E1YEtnE23Dlu9xEs
zhUb59gRmC2wsPVN7UfoaDisWudKYOtEJZsH3zhYpUQdyLhOIGX1yX0Jr3GI
tbaM0rhNoM2M4eOJ7nH440dLdy+cQG5DHoMQ6U8g7L76MyVhI5+CZLctkZ8g
JreC1iiNwLk8S3Hjr5+gN6I68X4egdqtA57aJhPg8eC6vl8hgTUZGebDBRNA
o+8Q++s5gdea5dvpOSb/+iEwqZW3P/vKJLQ/3L0zsJHAWhZ+/4c9k7DIzn81
vp3A38d2184pTMF7p/e90l0ETs4eCYbEDf7J/d6qb+N8gbf7vH5NwfHFfFGB
AQJFE9XSnKymISmW8PAeIbAk49rwt+pp2MPz5YL7OIEmIqeCBwVmQLZSOYdj
isCEDKZEulszoFzOOEadJXBfciqDwsgMhBruq9ObJzAoRrP5uNoshD8x/zb3
lUDbbTx9gvdnIWmPC7/2dwJJfhpivsuzwNGjOn9iicCpGyMvtEzmwJQliFV8
hcAX17n81XPnoJR+7+GGHwRepGW8qv9nDlKW2+aFfhIYGtodLUf6DHZ8lnSm
awSWp6e192V8Btei++wmvwgMqYvgZfj+GXgXzZuEf2/c16UGr1iYhzq+kx29
G+xz8PTAyaB5eGnr0mn7h8A+Fz81sTfz4MNm7z24wQrt5Pj+HV/AhMTsqbJO
oFzZtyGkfIF4O1HnoA12Kfdlloz8AkVhd1laNvgfUxHef1q//O0/J/D//wnr
X+D/AELDguc=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], 
      LineBox[{{2., 0.6}, {15., 0.6}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.06, 0.06}], 
      LineBox[{{2., 0.9}, {15., 0.9}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.035, 0.035}], 
      LineBox[{{2., 0.5}, {15., 0.5}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[{{2., 0.8}, {15., 0.8}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[{{2., 0.7}, {15., 0.7}}]}}, {}}, 
   InsetBox["\<\" Percentile\"\>", {87, -0.1}, {-1, 0}], 
   InsetBox["\<\"KS-JEDC\"\>", {17, 0.9}, {-1, 0}], 
   InsetBox["\<\"\[Beta]-Point\"\>", {17, 0.8}, {-1, 0}], 
   InsetBox["\<\"\[Beta]-Dist\"\>", {17, 0.7}, {-1, 0}], 
   InsetBox["\<\"US data (SCF)\"\>", {17, 0.6}, {-1, 0}], 
   InsetBox["\<\"KS-Hetero\"\>", {17, 0.5}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, 
    FormBox["\[ScriptCapitalF]", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->29,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 100}, {-0.1, 1}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {25, 
      FormBox["25", TraditionalForm]}, {50, 
      FormBox["50", TraditionalForm]}, {75, 
      FormBox["75", TraditionalForm]}, {100, 
      FormBox["100", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {0.25, 
      FormBox["0.25`", TraditionalForm]}, {0.5, 
      FormBox["0.5`", TraditionalForm]}, {0.75, 
      FormBox["0.75`", TraditionalForm]}, {1, 
      FormBox["1", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{3.6629860120795984`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629860128391395`*^9}],

Cell[BoxData["\<\"Estimate \[Beta]middle using \[Beta]-Dist model without \
simulation\"\>"], "Print",
 CellChangeTimes->{3.66298601284114*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0007`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0007],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629860131333447`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98807322304870320277538235979007674725`10."}],
  SequenceForm[
  " Solution of \[Beta]middle:  ", 
   0.98807322304870320277538235979007674725`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.66298665964408*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, \
20%, 30%, 40%, 50%, 60%, 80%: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "16.57808265277581`", ",", "177.31829573934837`", ",", 
     "90.85213032581454`", ",", "63.283208020050125`", ",", 
     "48.93483709273183`", ",", "36.904761904761905`", ",", 
     "25.68922305764411`", ",", "19.360902255639097`", ",", 
     "11.904761904761905`", ",", "8.145363408521304`", ",", 
     "5.827067669172933`", ",", "4.323308270676692`", ",", 
     "2.192982456140351`"}], "}"}]}],
  SequenceForm[
  " Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, 20%, 30%, \
40%, 50%, 60%, 80%: ", {16.57808265277581, 177.31829573934837`, 
   90.85213032581454, 63.283208020050125`, 48.93483709273183, 
   36.904761904761905`, 25.68922305764411, 19.360902255639097`, 
   11.904761904761905`, 8.145363408521304, 5.827067669172933, 
   4.323308270676692, 2.192982456140351}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662986674067314*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Sum of dev^2: \"\>", "\[InvisibleSpace]", 
   "3.3839534299407665`"}],
  SequenceForm[" Sum of dev^2: ", 3.3839534299407665`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662986674069316*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0008`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0008],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629866740703163`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98792671398740583565967199319857172668`10."}],
  SequenceForm[
  " Solution of \[Beta]middle:  ", 
   0.98792671398740583565967199319857172668`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629871884332867`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, \
20%, 30%, 40%, 50%, 60%, 80%: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "16.560485398927938`", ",", "189.84962406015038`", ",", 
     "94.54887218045113`", ",", "64.53634085213032`", ",", 
     "49.49874686716792`", ",", "36.96741854636591`", ",", 
     "25.25062656641604`", ",", "18.23308270676692`", ",", 
     "11.466165413533835`", ",", "7.5814536340852134`", ",", 
     "5.451127819548872`", ",", "3.9473684210526314`", ",", 
     "2.0676691729323307`"}], "}"}]}],
  SequenceForm[
  " Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, 20%, 30%, \
40%, 50%, 60%, 80%: ", {16.560485398927938`, 189.84962406015038`, 
   94.54887218045113, 64.53634085213032, 49.49874686716792, 36.96741854636591,
    25.25062656641604, 18.23308270676692, 11.466165413533835`, 
   7.5814536340852134`, 5.451127819548872, 3.9473684210526314`, 
   2.0676691729323307`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629872028605227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Sum of dev^2: \"\>", "\[InvisibleSpace]", 
   "3.1848026708374944`"}],
  SequenceForm[" Sum of dev^2: ", 3.1848026708374944`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662987202862525*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0009000000000000001`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0009000000000000001],
  Editable->False]], "Print",
 CellChangeTimes->{3.662987202863525*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.98777168893241544473496259506570260633`10."}],
  SequenceForm[
  " Solution of \[Beta]middle:  ", 
   0.98777168893241544473496259506570260633`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629877611226425`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, \
20%, 30%, 40%, 50%, 60%, 80%: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "16.576236029822937`", ",", "201.12781954887217`", ",", 
     "97.11779448621554`", ",", "65.78947368421052`", ",", 
     "50.56390977443609`", ",", "36.96741854636591`", ",", 
     "24.49874686716792`", ",", "18.170426065162907`", ",", 
     "10.651629072681704`", ",", "6.8922305764411025`", ",", 
     "4.824561403508772`", ",", "3.5714285714285716`", ",", 
     "1.8796992481203008`"}], "}"}]}],
  SequenceForm[
  " Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, 20%, 30%, \
40%, 50%, 60%, 80%: ", {16.576236029822937`, 201.12781954887217`, 
   97.11779448621554, 65.78947368421052, 50.56390977443609, 36.96741854636591,
    24.49874686716792, 18.170426065162907`, 10.651629072681704`, 
   6.8922305764411025`, 4.824561403508772, 3.5714285714285716`, 
   1.8796992481203008`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629877754918375`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Sum of dev^2: \"\>", "\[InvisibleSpace]", 
   "4.966198516340981`"}],
  SequenceForm[" Sum of dev^2: ", 4.966198516340981],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629877754948397`*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.662987775495841*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Difference beteen approximated points of \[Beta], \
\[Beta]middle, \[Beta]middle-\[EmptyDownTriangle], and \[Beta]middle+\
\[EmptyDownTriangle]: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0008`", ",", "0.98792671398740583565967199319857172668`10.", ",", 
     "0.9851267139874058`", ",", "0.9907267139874059`"}], "}"}]}],
  SequenceForm[
  " Difference beteen approximated points of \[Beta], \[Beta]middle, \
\[Beta]middle-\[EmptyDownTriangle], and \[Beta]middle+\[EmptyDownTriangle]: \
", {0.0008, 0.98792671398740583565967199319857172668`10., 0.9851267139874058, 
    0.9907267139874059}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662987775496842*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, \
20%, 30%, 40%, 50%, 60%, 80%: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "16.560485398927938`", ",", "189.84962406015038`", ",", 
     "94.54887218045113`", ",", "64.53634085213032`", ",", 
     "49.49874686716792`", ",", "36.96741854636591`", ",", 
     "25.25062656641604`", ",", "18.23308270676692`", ",", 
     "11.466165413533835`", ",", "7.5814536340852134`", ",", 
     "5.451127819548872`", ",", "3.9473684210526314`", ",", 
     "2.0676691729323307`"}], "}"}]}],
  SequenceForm[
  " Wealth perm income ratio (k/p) mean, top 1%, 3%, 5%, 7%, 10%, 20%, 30%, \
40%, 50%, 60%, 80%: ", {16.560485398927938`, 189.84962406015038`, 
   94.54887218045113, 64.53634085213032, 49.49874686716792, 36.96741854636591,
    25.25062656641604, 18.23308270676692, 11.466165413533835`, 
   7.5814536340852134`, 5.451127819548872, 3.9473684210526314`, 
   2.0676691729323307`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629877898540287`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Sum of dev^2: \"\>", "\[InvisibleSpace]", 
   "3.1848026708374944`"}],
  SequenceForm[" Sum of dev^2: ", 3.1848026708374944`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629877898560305`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629882836003714`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "14.74748661454316`", ",", "49.53647078834905`", ",", "66.72901438444555`", 
   ",", "72.59175817894787`", ",", "84.5554714156795`", ",", 
   "89.67442850998549`", ",", "93.40993827359667`", ",", "98.15281738396781`",
    ",", "66.72901438444555`", ",", "0.6302843045220292`", ",", 
   "0.627963460466349`", ",", "0.3634297958591825`", ",", "Indeterminate", 
   ",", "1.3748806300781409`", ",", "0.7666192595478425`", ",", 
   "0.1446531944609869`", ",", "399.85198274494866`"}], "}"}]], "Print",
 CellChangeTimes->{3.662988283602372*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model without simulation \
(minutes): \"\>", "\[InvisibleSpace]", 
   "37.84602058666666666666666666666666666667`10.50668646948611"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model without simulation (minutes): ", 
   37.84602058666666666666666666666666666667`10.50668646948611],
  Editable->False]], "Print",
 CellChangeTimes->{3.662988283604373*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629882839005833`*^9}],

Cell[BoxData["\<\"Match liquid FINANCIAL assets plus retirement assets\"\>"], \
"Print",
 CellChangeTimes->{3.662988283901584*^9}],

Cell[BoxData["\<\"Estimate \[Beta]middle using \[Beta]-Dist model with time \
pref factors approximated by seven points \"\>"], "Print",
 CellChangeTimes->{3.662988283902585*^9}],

Cell[BoxData["\<\"Obtain (common) initial distribution of Pt and kRatt for \
later simulations \"\>"], "Print",
 CellChangeTimes->{3.6629882841497593`*^9}],

Cell[BoxData["\<\" Searching for good guess of \[Beta]middle using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.6629882876132174`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0035`"}],
  SequenceForm[" Diff between approximated points of \[Beta]:  ", 0.0035],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629882876142187`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96519669997048312125328211234374613935`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96519669997048312125328211234374613935`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662988662854472*^9}],

Cell[BoxData["\<\" Searching \[Beta]middle and obtaining (common) initial \
distribution of Pt and kRatt...\"\>"], "Print",
 CellChangeTimes->{3.6629886705289183`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to search \[Beta]middle and obtain (common) \
initial distribution of Pt and kRatt (minutes):  \"\>", "\[InvisibleSpace]", 
   "3.10348544166666666666666666666666666667`9.42051596068277"}],
  SequenceForm[
  " Time spent to search \[Beta]middle and obtain (common) initial \
distribution of Pt and kRatt (minutes):  ", 
   3.10348544166666666666666666666666666667`9.42051596068277],
  Editable->False]], "Print",
 CellChangeTimes->{3.662988856738045*^9}],

Cell[BoxData["\<\" Obtained (common) initial distribution of Pt and kRatt. \"\
\>"], "Print",
 CellChangeTimes->{3.662988856739045*^9}],

Cell[BoxData["\<\"Start searching for \[Beta]middle using the simulation \
method \"\>"], "Print",
 CellChangeTimes->{3.6629888567400465`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0034000000000000002`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0034000000000000002`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629888602595434`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629888602605443`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96544838380175383533761500625632707452`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96544838380175383533761500625632707452`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662989168494253*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6629891761296697`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "8.08331887833333333333333333333333333333`9.836255959807572"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   8.08331887833333333333333333333333333333`9.836255959807572],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629893452596784`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9647833838017539`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9647833838017539],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629893452606783`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.662989406475113*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "40.385469463911946`", ",", "78.26902284616827`", ",", "88.48869278396816`",
    ",", "90.95262394825538`", ",", "94.98639904778373`", ",", 
   "96.60201343189017`", ",", "97.80816776583961`", ",", "99.39417954659402`",
    ",", "88.48869278396816`", ",", "0.841780883172863`", ",", 
   "0.8407935850517563`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.852296209873392`", ",", "0.6225309346777154`", ",", 
   "0.39562581937787467`", ",", "9.931475890845386`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629894064791174`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0035`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0035],
  Editable->False]], "Print",
 CellChangeTimes->{3.662989406481118*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629894064831195`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96519597107064584819725549311542887942`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96519597107064584819725549311542887942`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662989621004335*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662989628671775*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.17805033833333333333333333333333333333`9.719517690797336"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.17805033833333333333333333333333333333`9.719517690797336],
  Editable->False]], "Print",
 CellChangeTimes->{3.662989777159135*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.964505971070646`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.964505971070646],
  Editable->False]], "Print",
 CellChangeTimes->{3.662989777161137*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629898376690702`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "40.96580920981647`", ",", "78.76759105213719`", ",", "88.78325005650383`", 
   ",", "91.18709691963872`", ",", "95.11073403600778`", ",", 
   "96.68469982055366`", ",", "97.86145900825512`", ",", "99.40964375309997`",
    ",", "88.78325005650383`", ",", "0.8449972326887529`", ",", 
   "0.8440307184076372`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.865393040756223`", ",", "0.6225309346777154`", ",", 
   "0.4022359107935771`", ",", "9.313167742033734`"}], "}"}]], "Print",
 CellChangeTimes->{3.662989837671073*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0036`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0036],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629898376740756`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629898376750755`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96494494955594423035778739840515784692`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96494494955594423035778739840515784692`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990056237158*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662990064201808*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "5.972671285`9.704834861566585"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.972671285`9.704834861566585],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629901960303583`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9642249495559443`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9642249495559443],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990196031349*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.66299025658832*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "41.510236336489555`", ",", "79.23924733920205`", ",", "89.05077281368224`",
    ",", "91.39829991907405`", ",", "95.2225304717396`", ",", 
   "96.75911985543108`", ",", "97.90945582726042`", ",", "99.42362703609989`",
    ",", "89.05077281368224`", ",", "0.8479723256292436`", ",", 
   "0.8470249981641351`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.8775057451781287`", ",", "0.6225309346777154`", ",", 
   "0.40878192293184257`", ",", "8.940672663417738`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629902565903187`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0036999999999999997`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0036999999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990256592321*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.662990256593322*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96469192112139514147546141871482339209`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96469192112139514147546141871482339209`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629904684516463`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662990476072053*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.11754075166666666666666666666666666667`9.715243119278284"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.11754075166666666666666666666666666667`9.715243119278284],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629906236407633`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9639419211213952`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9639419211213952],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990623642765*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629906855466876`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "42.023042098328474`", ",", "79.68964112172317`", ",", "89.29939884449057`",
    ",", "91.59357713996312`", ",", "95.3261180682855`", ",", 
   "96.8282761559611`", ",", "97.95407836982005`", ",", "99.43669036814575`", 
   ",", "89.29939884449057`", ",", "0.8507708834176493`", ",", 
   "0.8498415888879198`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.8896865086647667`", ",", "0.6225309346777154`", ",", 
   "0.41523267724007984`", ",", "8.750936457437843`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629906855496902`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0037999999999999996`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0037999999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990685551692*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629906855526924`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96443769013264881767045956516742862505`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96443769013264881767045956516742862505`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662990897358981*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662990905056445*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.45152772833333333333333333333333333333`9.738328816404692"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.45152772833333333333333333333333333333`9.738328816404692],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629910726393538`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9636626901326487`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9636626901326487],
  Editable->False]], "Print",
 CellChangeTimes->{3.662991072640353*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.662991133770729*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "42.590721415693785`", ",", "80.16915470936632`", ",", "89.56150980400612`",
    ",", "91.79955261032869`", ",", "95.43689264203313`", ",", 
   "96.90269319684181`", ",", "98.00219150505312`", ",", "99.45072013404278`",
    ",", "89.56150980400612`", ",", "0.8537626409291657`", ",", 
   "0.8528527643671842`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.901825141454652`", ",", "0.6225309346777154`", ",", 
   "0.4214578429678264`", ",", "8.702519313770988`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629911337737308`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0038999999999999994`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0038999999999999994`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629911337757316`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6629911337777348`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96418169781340935629375315662740873241`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96418169781340935629375315662740873241`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629914831356225`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.662991490818075*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "8.75534574333333333333333333333333333333`9.870939549001406"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   8.75534574333333333333333333333333333333`9.870939549001406],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629916590914745`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9633766978134094`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9633766978134094],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629916590924754`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629917204870377`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.060172634641994`", ",", "80.59201645973131`", ",", "89.77888118942352`",
    ",", "91.96764923565365`", ",", "95.52608400523155`", ",", 
   "96.96254208119245`", ",", "98.04093060381366`", ",", "99.46216576934161`",
    ",", "89.77888118942352`", ",", "0.8562883336179978`", ",", 
   "0.855394708887959`", ",", "0.30094399192336874`", ",", "Indeterminate", 
   ",", "1.9129741336502757`", ",", "0.6225309346777154`", ",", 
   "0.4276713782436701`", ",", "8.80339696862614`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629917204890394`*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.6629917380204782`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.662992026094885*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.966700599090416`", ",", "80.52875632369786`", ",", "89.67699688344865`",
    ",", "91.88090489003726`", ",", "95.48351725768967`", ",", 
   "96.93399141706458`", ",", "98.02187252533658`", ",", "99.45450007331517`",
    ",", "89.67699688344865`", ",", "0.8562985896372842`", ",", 
   "0.8553900406321157`", ",", "0.3055388428133683`", ",", "Indeterminate", 
   ",", "1.8987814596601116`", ",", "0.6232621610049498`", ",", 
   "0.42165844393021756`", ",", "8.750379563363387`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629920260978875`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Difference beteen approximated points of \[Beta] (\
\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0037999999999999996`", ",", "0.9636626901326487`", ",", 
     "0.9503626901326487`", ",", "0.9769626901326487`", ",", 
     "19.797664421902574`", ",", "6.617882505969917`", ",", 
     "0.997545053163552`"}], "}"}]}],
  SequenceForm[
  " Difference beteen approximated points of \[Beta] \
(\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): ", {
   0.0037999999999999996`, 0.9636626901326487, 0.9503626901326487, 
   0.9769626901326487, 19.797664421902574`, 6.617882505969917, 
   0.997545053163552}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629920262319827`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with seven types \
(minutes):  \"\>", "\[InvisibleSpace]", "62.37218998`10.723657241257179"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with seven types (minutes):  ", 
   62.37218998`10.723657241257179],
  Editable->False]], "Print",
 CellChangeTimes->{3.662992026233983*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662992026494167*^9}],

Cell[BoxData["\<\"Plot consumption function and \\!\\(\[DoubleStruckCapitalE]\
\\_\[ScriptT]\\)[\[CapitalDelta]\\!\\(\\*SubscriptBox[\[ScriptM],\\(\[ScriptT]\
 +1\\)]\\)]=0 line\"\>"], "Print",
 CellChangeTimes->{3.6629920264951706`*^9}],

Cell[BoxData["\<\"\\!\\(\[DoubleStruckCapitalE]\\_\[ScriptT]\\)[\
\[CapitalDelta]\\!\\(\\*SubscriptBox[\[ScriptM],\\(\[ScriptT] +1\\)]\\)]=0 - \
\\!\\(\[ScriptC]\\_\[ScriptT]\\) at large \[ScriptM] \"\>"], "Print",
 CellChangeTimes->{3.6629920274788666`*^9}],

Cell[BoxData[
 RowBox[{"-", "0.8820752266363883`"}]], "Print",
 CellChangeTimes->{3.662992027480872*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to plot funcs (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "0.03424097833333333333333333333333333333`7.4632124130612345"}],
  SequenceForm[
  " Time spent to plot funcs (minutes):  ", 
   0.03424097833333333333333333333333333333`7.4632124130612345],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299202854963*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.001], LineBox[CompressedData["
1:eJxc2mlYjf33NvCtiQhRyk4opUFJRET0pWQoRESEaDIUpTQYtykiY6YIEREh
IlOIiMgYESEiU1RKlOI5f//7vN483tzHeaxrfVrWXl3iuA2nzx3jpySTyWwH
yGT/++///2tX/P9+5TrMe/Br62L8979c6BDyf7nQoafN/36VOBi/mNY7zKqE
9c8O/RTpN8YML3X4T6lwuDH4lk7ask98vsphz8SP25rqfHEI8P/frxqHRb31
ts/Q/cr+WofxfiZ7elz76nAv73+/6h1c19zwWCjK6MlE7crTHkcOlPH5RqLP
yeXrF/4so68sllhuT3xo/439KsKm96GsM4u+8eupieNJC5Q3XvhGr4l4WNyy
qlH1N3rqIrgycsYpi+/0momWSu9eeft8p6chTKq2ve206zu9FkJngt62Rw++
09MUapf3DlWolvN5TfHL0Kjeql85/VaiWn5p7N7gcva3FirOKlnrD5Xz62kJ
7XkjLBa/KKenLVqPcnHJaFxBT1vofSiXWXWqoNdGdFq4NeOQfQU9HbHZN/Vp
k/EV9HRFyPcr791DKui1FWMiH1XtXSd5bUUPpfdKXw5Jnlxoxda06pUleXqi
uo26oeKF5LUTT/a1s75bLXn64qy5lYNOy0p6+mJbuhg5zbySXnvR+53j0fWO
lfQ6iKL8/bL0yZX0OorlN/95PI+opGcgTM9NPt6wWXreQNw7cknZKFXyDcS8
XfKJQ3MqHf6v3cZQ6MZGpAUVS1/PUFxe/FQtrk7yOonpc20mn9f+Qa+TaDJt
c/orqx/0OonjY8rVlYf94DxGYozTCG8znx/0jMTvXscyRiz+Qc9YBGjaX5i0
Q/KMxdUzX96OPSV5xkLXM77pyLuS11nMbRhiM+SD5HUWt/bXTBL/JM9EdHA+
tNJOXkXPRER8cT/eA98n/3km4v4GpQKLEVX0TIWJzam/xgFV9EzFkmdTTTss
q6JnJgoWtnDT3S15ZsLK4HKk5lnJMxPRN2bvV38geebi9Qy9O0qfJc9c2DbP
/fFHqZpeF7HhVES7n/rV9LqI0nEmTt9tq+l1EQPqngR+dKumZyG2712xrXhW
NT0L8X1QjyuFKyXPUgz+WFz6eK/kWYptCq8zt85LnqU41U1eu/ax5HUV914/
7T+yTPK6ik/rtyxvpfaTnpVQ6T/q1pOOP+lZCYOyZho77X7SsxL2u2+7TXL/
Sa+bmDB81bYOQT/pdROhtQNfvI2WPGux8cjfDocSf/K+rMWx8Zd8ZlyUfGtx
Sy3yiMUTqd9avDvb89v3b9LXsxZ/fSu7n25cQ6+70NM+ET7fsIZed9Ere9al
Pv1q6HUXY+aZyurH1tDrLoIM3ztdnVNDr7uIeZgYs3yN5PUQh5ZOvj/4gOT1
EFlWelrqmZLXQxS9Khif91TyeojfsXEJG8slr4fQtnd7O0b9Fz0b0e2rhomO
0S/ux0a47sqdVWj/i56NCBgWfTLB4xc9G7Hi96DqqcG/6NmIfYf/9TFaK3k9
xUWPzMWlSZLXUxSoRl1PuSx5PcWPM70aBz2TvJ6ihe8PF+tKyespzLVObqpq
+pteLzH4+uynGca/6fUS00LM9BYM+E2vl1hs8GFK/wm/6fUSshe/Ln0M+U0P
+ZaT6Yx1kmcrZGc2b/l0UPKQE183zLgiecjrLWZ+fiZ5yAsin8yslDxk/5sO
X5rW0ustZGNbH5tlXEsPWUzV+dq/lh5y19Rls8fX0kPWqy37GlxLD1nNeULg
WsnrI2RVW7LLkiQPufiNVdBlyUO+Z7nrW4HkIV+MUp1TIXnIyTnB39Xr6NkJ
WZxW0RyjOnrICu8h5fZ19JCDjp+e61FHD3liXfuKuXX0kJ2HxATHSF5fIbPZ
Wl1xQPKQDd5ODcmUPOTmVncrn0oect0C23nlkodcemv/jyZ/6PUTsnzt5qGd
/tBDzpoWWdXvDz3k1BMloeP+0EPe9Wdk9Zw/9JCjh14MWyN59kIWuq3zz/2S
hzz13ab5lyQP2bVb/c8nkodstygg/LvkIZvkPq5pXE+vv5Bp6QyIMKynh/xv
esqvvvX0kMtOakeOraeHXFi/9HdQPT3km8O+Rq6WvAFClr7dozZR8pD3lVyL
uih5yLHWXevyJQ85avHOBd8kD9nvjvIftQZ6DkI2RnfuQoMGesgOvi/+2DXQ
Q7Y8NXiRewM9ZPnftPrABnrIqi76i6MlTwjZjx2rG/bxeTnym/c/Fl9o4PsG
Oa/7lL+P2e+KfGFJ7pIy6eshH7rb85/q3/88BfKWtolLO/7l10de6tdMZvf3
Py8defbpcMWYv5wH2fPfW1ng3/+8UuTBriOWraInGyhkPeLPN9pHT47codRo
+Xl6NsjNbDYqPabnivx7ad3yr/T8kT/k+Smr/uN8yI/lj1Z0+Mf5kK/426v0
+cf5kI+lH145+h/nQ94p01Kd/Y/zIa8csWTVSnqyQUI2b9dn1b305MhTPo6N
PkfPBtmlZ5baI3quyH2WWaz+Qs8fuXXAXWUlmfhvvkFCsaZ5oxstZOK/+VD/
l267sp1M/Dcf6vMnBjqZycR/86FeJjug0ksm/psPefrhZzcG0pM5CsXzEc1X
jaQndxSyUdWDBk+Sif/uB/WbuyJVZ9BzRd1+4ImbYfT8kU9/LFm1TJoPz5tt
kDtvkOZDfV/PUWq76aUjt3m5MuewNB9y7LKL0Wek+ZCVzCqcr0nzOQlF5P3O
je9L8zkJWXnYpFsvpPmQ/dptXv1Rmg/Pv7yWM6Ramg/1MTPqGzdqxPlQv92i
x+3mjTgf8oCzAWv0GnE+PH920p6hpo04H+oWSvlNejbifMj7jzTJFfRkg4Wi
7agBMSPoyZE3/AwdNpGezWB8PyWkqAfQc0V94aA3uaH0/JErP2mvVUjz4fkZ
G4cPXy/Nh/rrXoqmu6T5UB9XdPZOsjQf6neXf12bLs2HPNDc0CVLms9ZyM4/
8Gh2T5rPWSiswmPvFkrzoX5I//q6Umk+1Ntl/3KpkuZD3jyzq4ZMifPh+Saa
PnkaSpwP9SUZO2PlSpwPudrrvquJEudDnq2s0txGifMhv02xu+dATzZEyCa4
zV3vSk8+RCju1xwc4UnPBtlpz4vm/vRc8fwlR8378+j5o979y+ANS6X5UD+y
aeHIWGk+5A69T7WIl+bD81tfld4/JM2HerOV+htPS/MhL+syZtRVab6heF88
XN0yT5oPeU7E5QfPpfmGCsX79lUbP0jzoT7phpnbD2k+5Eezpmj+k+bD80Na
bX3YTJnzoX7lXO6mtsqcD/WeU/65dVbmfKgfU+nVqocy50M2PDbr0QBlzjdM
KHaMTtzsQk8+TMha/H46egI9G9RX7m3W2o+eK+p/nAY+DqHnjxzyNXzLEnoK
PP9xc+qYddJ8qE/p8671Tmk+1J+81s0/KM2HusuqEXGnpPmQr1mscL8izTdc
KHo/Pq91V5pvuJCdiPye/0yaD9m4o/HW99J8yLtveo6tlOZDbhW4UfuvNB+8
1a1vPmmqwvmQG87XbdVV4Xx4Pmyq9ThjFc6H+hdV/zbdVTgf6tNSdz/tr8L5
XITi2ZhH24bTkyOPqFXzGE/PxkXIbuyz1/Gl54p6X+d5BcH0/JHTyg5vX0xP
gWwa98pjrTQf8h47Ld0d0nzwtIuHPkuS5kN9bfSSHWnSfMiyrmfGX5bmcxWy
iPzPunek+VyF4ltUx+cF0nyo+xqM21kizYf6i5y1Eyqk+ZDdgrLaNkjz4flb
WjXP1VU5H+r9L1rE66hyPtTPeE/zNFLlfKh3abxDbq3K+ZATj+cV2qtyvhFC
pjtWadcwevIRQrG+rvdED3o2yMr7g/R86LkiLxiS9GIuPX/kim/Pdy2ip4AX
sLXFpBhpPuRXfZ3abZfmw/Pub6NeHpDmQ/3O6pO7T0rzoS6sPkzKlOYbKWTn
nujp50rzIXdd6Fb0VJpvpFAkGUYnvJPmQ13v9iWvcmk+5E1zKvXrpfmQG7cx
fdVEjfMhL77ktaeNGueDVzVty+ROapwP9VlNbrfvpsb5kItPNLzqp8b5RgmF
xzibvUPpyUfh5/k/M6aMo2eDuuOBvR2m03NF/eLQJ6/n0PNHti5X37eQngLP
J29zmLpGmg/19vbzO26T5kM97t3RN/ul+VBvGlO874Q0H7Kim473JWk+N6Go
eepicJvPa7jh7weLlhU/keZFLul0LvEt+02QJ+aWeX9X++/nERvkh3M7Gf6h
J+A560x427gxfz+oX85cv1+78X+eJ7KNT/Y0w8b8/eH5FPVaQ6vG/3mhqBuk
Wb3r25i/X9S3e/geGEIvFlmjIX76WHrxeH5F0oNO0+glo147TLUkiF468tyK
vkkL6GUhl24P9llNLw/Zq3+y0VZ6hfDyS16WJNIrRX3Y2lYHj9OrQr5qPcT3
Ij3ZaCGzfbbI+BY9jdFCkbr49Pt8enLUjYw/HSymZ4J6/J32ft/o2SC3DHHv
XEdP4Plo3ZgPak24P9TrL185pNWE+0M91Lfaz6AJ94f656ZdTLo24f6Qp56a
WmrXhPvD8wXjtyU704tF3fXvHX93evHI1w/KTL3pJSPbudh+DKSXjnyycvbh
KHpZ8Ex27g+IppeHesKAZ6Zx9AqRW3/Q+LSPXimej1k36EgqvSrU/3WPnHGB
nmyMkIU/P26WQ08DuWxJyafH9ORjhGJ6Z3nKG3omqBfeHTmzjJ4N8qh5K81r
6QnknLYXP6uqc3/I9lfLU1qrc3/wTvt1ntVRnftD3VxjUhdLde4Ped/pTV/6
qHN/eL6NZ87RwfRiUY/992fWGHrxqCsld7eYSi8Z9SjXgK+z6aUjl/9IOBZJ
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
QtHfsbBtm1v0opAnptrMv0dPAW/70pFP8+lFo//RmJm9XtCLRdYwWbmtmF4c
5h1Su/dnKb14eMvzLoz7Ri8R3pV9T85W0UtGrp1X3qaOXiq8ns5Nw2X6vD94
c+WdC9T0eX/IR8scbJvr8/7QX3p14nYtfd4fsmHc/Bq5Pu8Pnpf/Jg8Devno
32F3LMOEXiHyY40cna70ijFv8+LicBt6pfCGpf8psKNXBm9ltE5vQa8K/Vc9
u+9wpleLXGfp+suVnmymyOolCxjvTk9tppCF5C8750lPY6YQqckJut70tGYK
xceocxH+9OTInUY8fhZIzwDeZINvvUPpmcCLr2q8M4qeJfKTnE6/l9KzQX/L
Xf0nRNOzQx4eNOF8LD0Bb5UIbRtHzxn917Q2RMbTc0WuLz3yfB89d8zb+2J2
n2R6nvDmrX+9M5WeN7zj3rW/T9PzR/5ko+15gV4gPOPG3S5cpRcKb+qLYfIc
elHIu477RuXRU6D/qWJp4WN60ciaY3fZFdKLhedqejb+Db049K+ue1D7gV48
8vV7XzzL6CVi3oZE1Ys/6CXD6xNmoFdLLxVe2JB+C/5J94f+k3oeL1Tb8/6Q
v3wL7qvRnvcHr/O1dbtat+f9wfPemlzXtj3vD15CwLWJHdvz/tD/rG/Rxc70
CpFbt/ilZ0mvGN6It60W9qBXCm/NGcuXfeiVIWevHtLPgV4V+v9NnL57ML1a
5L5Wi/+40JPNEor5jXZOGkNPbZbISnty+tIEehrIXw/fazeVntYsITNd+Gmh
Hz35LCGmj1Qumk3PAN4eww728+iZID+v7pMQSc8SntZt9/ol9Gzgjdo9x2sV
PTvktXNiMtfRE+i/OfCg/hZ6zsiyNlcX7aTnCq/fp8KivfTc0R9xqdr+ED1P
5NMbWu45Rs8b836b1qXhFD1/eGa9Bk8+Ty8Qnk8T78tX6IWif9/LBe1v0otC
fnFi2+K79BTw2ixPe/WIXjQ8t3F3+z+nFwtvnVnpntf04tB/64/s73t68chK
D9pN+UovEV7/A7ZXKuklw4ucP7rDb3qp8NKHBi75Sy8d/eXtVr9W6cD7Q+5S
vn9Asw68P3h+1zP3turA+4OXuO3ZX90OvD/klzN+TOnQgfeHfl375leN6RUi
j2lp1tGCXjG89e8GLe1OrxT59tnJb3rTK4OnHBPpMIBeFeYd4BW3z4leLbwF
3U78G05PNluIs0q5U0fTU0OueFpydTw9jdlCYZHyt+MUelqzRZb/IrnCl54c
ef+onsWz6Bmg/1WnUSKEngly25qZiRH0LOG5566ULaFng/4NCfu8V9KzQ86d
ezFrLT0xW8hUHZ8abKbnDE/oVCh20HOFt/Bz07d76LmjPyOz88CD9DyRKzeK
/UfpecPr6jOp0Sl6/vBm2IZPO0cvEF6S+uZrl+mFov910THDG/SikOVpOcvu
0FPAG7fi7duH9KLhbfKoH/iMXizyXXPdA6/oxaFfraG70nt68cgDH7pO/0Iv
Ed7ipIDrFfSS0X8+fHmnX/RSkauG7VneQC8d81q1P/9OuSPvD97MiseDmnbk
/cE7lP3tgGZH3h9y8fYmyrodeX/w2s0y8mnfkfcHz6P/gGwjeoXImzU9jbrQ
K0b/vZLQFdb0SpGbnNtQYkuvDJ7j2hTH/vSq0L9k8o0kR3q1yBes3ygPpycL
FFnVynU+bvTUAvHz7DPtGx70NAKFmH20m/FkelqBQpG8ePhKH3py5Ldufu9n
0jOAp2+scAqmZwJvwq9dB8PpWcKLu3NWZTE9G/Tf3/PQdwU9O2T1kK83YugJ
eE5Oap030XOGp9A1XLWdnivypS/9PiTQc0d/zWWPwUn0PJG7bw45lELPG16g
b6xqGj1/9B/pfdgvg14gcknT6zcz6YVi3g6vizpn04uC53nq16pcegp4W1e2
Ln1ALxr5wfiuzgX0YuE1sxiaXEQvDp7z3+lqJfTikZc9Wuz/mV4i+jMP7swp
p5eM/Csi3aSGXio8G5f70fX00gOFQe+NYaGNDHh/gSLxye9lSSoGvD/486Zv
zG9swPsLFMUt8xKUmxnw/vD7Od7rqE0LA94fPJd953xa0SuE96nJzThtesXw
ouc9ztalVwrPqOhNlR69MnjXBn8z6kCvCt7Uk3XuhvRq4dW3bbLSmJ4sCD/P
LG9zxpSeWpAo7l3W6X0XehpBwvvpOGttK3paQcIg9Gp/p+705EEiUdPcJawn
PQN4J7ZMONibngk8l3q/J33pWcL77BeqMoCeTZCQrX6g6DmQnh08Y7sNvk70
BLzrB3ZvHULPOUhkTdVIuTGcniu8hvkZ1SPoucPb/SbbeDQ9zyCh6DPs0dix
9LzhFZx+vXI8PX94ofplZybSC4TXKrr2/WR6ofBOlqu1mUYvCp6rp/ZgX3oK
7OPLdcP5AfSi4a227HZoFr1YeJ232z8NohcHL/vfMNUQevHwvGeO7xVGLxHe
38e+fhH0kuHttp+3bQG9VHh2yUtvLqaXDu9Zy/U/FdL9wQuL2tV5pXR/8FqX
HB63Wro/eCddz65aK90fvBEZ18+ul+4P3teODz9sku4P3pqYV222SvcHz6Tq
y+Ad0v3By/b6PX+XdH/Y77Qc1eQ90v3B+9dNqyBRuj94CfEGagel+5sjDPoq
W9kelu5vjkh8FtjP/6h0f3OEmF8wdPtx6f7miOLWwiMnTbq/OUKRluJTky7d
H7yRWiEm56T7g/d10RKPi9L9wYspXRd9Wbo/eCZu8RlZ0v3NEd43LiSXZkv3
B2+60RmdW9L9wfsXe835jnR/8PbU3A+/J90fvL7eRckPpfuD9zz3c0G+dH9z
hCzc5pfaM+n+4GntUen9Qro/eKfUWge8ku4P3sjgjjuKpfuDV1ZoeatEuj94
ax37/iqV7g+e6fEhpl+k+4N3U2fc+G/S/cGbrpi+ukK6P3iyL3PPVUn3B2+v
++KPNdL9wet3ea1unXR/2Eehyc4hDdL9wQvfdChCZsj7g6ddd/qwsiHvD95p
n6xnaoa8P3ij7t1r3NSQ9wfvm+3L3s0NeX9zRNbaxE8BmvQK4Zk1rdmhRa8Y
Xk6o8m0deqX4/H1eaf6W0yuD12hIB7P29Krg7U2zmGBArxb7sNezW2NETzYX
P0+vcD5vQk9trlBEfHP/ZE5PY64waDN+Wtuu9LTmiqzTWXOGWtOTzxXCrcui
SBt6BnNF8be4mCO29EzgrWvY/tyOniU884CDTfrTs4GX8/BUH0HPDp5v36sz
HOkJeI0O5u10pucMb1/zF7eH0XOF1z/i429Xeu7wXhRXm7nR84QXOVzJ052e
N7w2Z1rGeNDzh5fevv0FT3qB2Mfo1V0+e9ELhfe9orfcm14UvNiJg4f50FPA
M78xJsqfXjS8W129U2bSi4XntyOoMJBe3FyRqNRooXowvXh4ibPW2IXSS4TX
/8m2meH0kucK75f9k+Kj6KXCizqclruIXjo8nVZXapdK94d9nFlw13yFdH/w
Rr9/7hkt3R+88hGlMTHS/cFbf67qQqx0f/C6GDb6slG6P3i317bQi5PuD/vw
q243fLt0f/CUp5gviJfuD97+W7ZHE6T7gzegu9OLfdL9wSvaNbppknR/wSIr
SmVq32TD//7/AuVg4a07J3BWinSPwUJ29lnUrlT2qweLxDEDV985Kd1nsDCo
OLq17jQ9TXjrtQ90yaCnBc9iycmJF+jpBIvi2x8z12ZK9wvPf/Sdi1fp6cNT
ufQMf6TxnuHtN/6gl0PPCJ7Dhh/Dc6X7hlf069+CPHrmwUKxYFrzYw+ke4fX
9q7ey8f0rOGd7WnWrICeTbAQ7nt79SukZwuvorHj7CLp+wHehhC33W/o2WMf
li8n330nfX/Ay3Wa/ecDPUd4ASciLT5L3y/wVNpGTyqjNwzegWVx68ql7x94
4mvipR/03LCPV2NPfP1Jzx3ewiuX2tXS84DX1izXpV76/oKXsblg4T96XvDG
/ik5ptSJ32/wKn0rX6p2+s/zgbfx/t9m6p34/QfPso+GvUan/7yZ8O7slwe2
7MTvR3gzmpkmtKYXDE91fs+8NvRC4SW9Hljfll449iGGjrLUpxcF7/UpL6+O
9BbBW9RuVmwnegp48lURmZ3prYB37vvKMjN60fDGTtiib0kvBt6Pa/tcu9GL
hbfJ4viiHvQ2weu67WJqL3px+Pzv/r1V1IfedngzZjzVsKcXj3tSe/zO3oFe
AryD/SoCB9FLhDfwUEPCYHpJ8N60aHZvKL1keIsi2za40EuBp/euc9dR9FKx
33MuNpPH0EuDN+6sWD+OXjq8qg4jL0+glwFv05pJ3ybRuwDP6seM9lPpZcK7
Oyl8xHR6WdjHzJsrFvvRy4bXuNvm4zPo5cA7uHPvq9n0cuENUkptPpdeHrw3
sy/0n0fvIbzFT3OC5tPLh9fO4cmeSHoF8M4feXtvIb1CeB6tyxuW0CuCV7Ww
vutyesXwNn9Qn7KKXgm8bqN0N6yhV4p95J03vrKO3md4szr1+L6BXhm8xrEO
HbbQq4B36KfryG30qvB5OU6duGQnvRp4xbcDTuymV4t7WtJj/uu99OrhtUtY
3uIAPVkI/j6sumnAIXrKIUI2fu6eOUfoqYWIxOrnR/ceo6ceIsSWQefvn6Cn
ESKyuqXe/HuKnia8e23yrc7S04I3e2nxlPP0dOA1+fxtwyV6cnjJY/5cuUJP
H55jZpPya/QMQoT32846HW/SM4K3dKPRqNv0TODp11ovvUvPHN7F6QNO3qdn
CW98nsubR/Ss4f3s5dnyKT0beHH7/B2e07OFZ60eNvclPTt49+ct2/eanj28
2UUbHrylJ+CpOyf8e0/PEd7hkyndPtFzxj6c5OemfqU3DN675Tc2fqfnCm9p
2aOrlfTc4LX3eFNeTc8d3qWrZR1/0/OAN8G8btQfep4hwqBmS2PFX3pe8OLq
tdMaGfH9B6+7f6diFSO+/0JE8f0H3TSbGPH9By/Qrr9oZsT3H7ymScODWxjx
/Yd9HNaYkNiKXjC8weF+D7XphcJ792aerC29cHiKYQrrdvSi4HVIX+/dgd4i
eJf0d28ypKfAPjyjj2QZ01sBr6b8bIUpvWh4Wz2zDSzoxcDrkf3QzYpeLLwH
lq8V3eltghe0/WtaT3px8JrKaot709sO78hMtVb96MXDc87XGjiAXgK8EnvD
kIH0EuEtS7ba70QvCV4HTftHQ+glYx+ZUcMaudBLgTexxKP7SHqp8H65+k4b
TS8N3raMkM1j6aXD62Gw9Np4ehnwHsbEVk6kdwGf/5yqeMMp9DLhNZt8ePQ0
elnwUnLOLPOll43P39n6+qkAejnw3sc/eDuLXi685cqvWs2hl4d9dAz6MjCE
3kN4lwt+hYTRy4c3UageiKBXAO93SuvHC+gVwtuuZaC0hF4RPJvFXXsso1eM
fTwq7Tt9Jb0SeHPchm5ZTa8UnsbFcdfX0vsM76iRz4/19MrgDVkf3GkzvQp4
H2oWj9lKrwrecu91y3fQq4FncGfn6V30auFdsUl+t4dePbxJe9Jb76cnmycM
atWuDTpIT3meyNoefH/eYXpq84To+eLlgaP01OcJ2WPHz4+P09OYJxRzj9co
naKnCa+5rorNGXpa8I4qWvmco6cDb+iXDnEX6cnnieIP7pbZl+npw1tx2a4q
i54BPEPTIUY36BnNE4lXNo11v0XPBJ5X3bQVd+iZw6v1mZt+j54lvB33FpU8
pGcNr1fvtVpP6NnAe5y4w/EZPVt4wU0Phb6gZwevedjppFf07OcJ72OvruYX
0xPwhg25p/yeniO80rQXNh/pOcNbqffJ5wu9YfAMV/6M+0bPFd7Vb0o3Kui5
Yb+Tx2tWV9Fzh1eX1d74Fz0PeDu7WIyto+cJr9fWPisb6HnBy28YfEZmzPcf
vJAA9/fKxnz/wWvxyFu7sTHff/BS+85xamrM9x+8YQcXhjU35vsP3sfmMQc1
6QXDWxWx/YkWvVB4nd4mqejSC8c+soaf6qlHLwre5DNXfNvTWwTvT/u8rQb0
FPDiVxfeMKK3Ap+XbWVptQm9aHhPJlYbd6EXg3sKudFoXFd6sfBaWrVcZU1v
E7zjO/TP2tCLgze8UZcPtvS2w/s0q3ebvvTi4a164jS4P70E7MNowJj5gl4i
vGuHpx5ypJcEb0qroKfO9JLh1S9YoDqcXgq8+Pere42glwqv98htfm700rCP
J+cObHOnlw5vnmHaTQ96GfA0113+6UnvArzj1Xc6T6aXCc9lyvNx3vSy4H26
9WGVD71seNHdq87608uBZ7xbVjqTXi68ayotdILo5cGbOqedczC9h/Dqn5mF
h9LLh7droG1yOL0C7KPPMceCKHqF8J5qj1ZbTK8IXuiSKbYKesXwND/N9l9B
rwTeidFR26PplcJzvRSdE0PvM+7ps/HWmlh6ZfBWb9hvsoleBTzj3yc84uhV
4fO/Pi0zeju9Gnjed3Mz4unVwmvo+aw0gV499rF773udRHqyUFHcp8kP5yR6
yqHCuyDkX3gyPbVQIQt7qXE4hZ56qEhsNVjvWSo9jVBhcPKEaeM0epqhIsu1
ba/e6fS04H1ZNiggg54OvDVfR+24QE8Or/O4ybcy6enDy74y69dVegbwvM0i
TbPpGcH7u3nV+Bx6JvAS/mxZnUvPHJ6dX+K5PHqW8J7dP/7xAT1reGF9Lunm
G/Pff+C1PnB7SAE9W+zjZLOCiEJ6dvBGzC85XETPHt7X1xXP3tAT8NYM/du4
hJ4jPJPTzfqU0nOGl91OPuMzvWGhQjFtlcnOMnqu8P59t7ldTs8NXsKEgb9/
0HMPFaLv9ZFmNfQ84D2z8JpQS88T3vxtM9fU0/PCPrT+hZ//J73/4KXNWPlJ
qfN/ng+8kY83t1XrzPcfvK/99g1V78z3H7yYQ6mRGp35/oNn2vLikZad+f7D
Pm5E3nreml4ovOnvnjTRoRcO75/Luz5yelHw9pwtn6FPbxG8fh0bdnakp4D3
fE3T3E70VsAL/6Fb25leNDwtr87m5vRi4J262cPTkl4svFHdREw3epvgle0c
caEHvTh4a5Umfe5Fbzv2YRo4Q25HLx7ezafzh9nTS4Dn47AiyoFeIjxZyqaU
QfSS4O1tvbdwML1keP0WHVMfRi8Fn3/hh/N2rvRS4UWMypk5il4aPO0L+fFj
6KXj8z/d6W3uOHoZ8EbFfq+dQO8CvG8//5h70cvEPtZOVZ84lV4WPLNcnbXT
6WXDy+lhfNGPXg48n4TuX2bQy4XXSM1BL5BeHry9c12Hz6X3EPuwL/RcMI9e
PrwXgwKOzqdXAC8iNexFJL1CeG10ljddRK8I3umlG/supVcMz+1zwqzl9Erg
fR9zdNcqeqXw1mWeu7OG3md45iY369bRK4OXs/Fxl430KuD51r6ZuIVeFTwl
n29rt9Grgbcvr+7iTnq18PrbNvm6m149vBf72rTbR08WJhSR6kYuB+gphwkD
nVDrhYfoqYWJxPSi/seO0FMPE96jnV1eHqOnESaKv5+c0OwkPU14sXL/fqfp
aYUJWZcVobPP0tOBd6tMsfs8PXmYEH4eG+5eoqcPTylr958r9AzgJZqnWFyn
ZwRvQFzGpJv0TOC9rM9ed5ueObwo/0eX7tKzDBNZOg9ff71PzxreGbuydo/p
2cAbk1Tr8pSeLbxyjcaLntOzg7c+XDv1JT17eF2KDYte0xPYx+1h3TTe0XOE
559ub/+BnjM85fbDAz/RGwZvf/T4hK/0XOENqPDN+07PDV6R57z6Snru8BZk
L7X8Sc8Dnm7X9V6/6XnCO7t9V+wfel7wxsiOZP6l5w2vYubZskYmfP/B25B/
XV/VhO8/7MOi/0PXJiZ8/8HLTX61qJkJ33/w/DW/prYw4fsPnsqC30Wt6IXC
O1Ci2rwNvXB4DiO0+relF4V7epVhENSO3iJ4Cwys9nSgp4DXdm2/e4b0VuDz
P1s1tMGYXjQ898keXc3oxcCrzPGZbEEvFvvYYB2y3oreJniWu5Zc7k4vDl6u
cuy3nvS2wwsIim/fh148PNVnySP60UuAd0CcWTyAXiL2IY5eOz6QXhK8V1oP
XjnRS4a3cHFR86H0UuDJP37u70IvFV6G26+gkfTS4I29qLJ3NL10eJVGre+P
pZcBb+P6jn/H07sAr+svS6tJ9DLh3fHuO2UKvSx4M+4M2TCNXjY81Z7jrvjS
y8E+kvZM/x5ALxfewMbBHWbTy4P3OnjxyDn0HsJb9GLtkhB6+fDkTjtPhNEr
gHfu+KHXEfQK8fmP001vsZBeEbwfiqwBS+gVw9v05d6cZfRK8Pl3Hfty70p6
pfDuXv50fzW9z/Bmmtb8XUuvDPtQ26zcbQO9CngH6zSnbqZXBW+gb4eNW+nV
wHtzz+LqDnq18Bb3tivfRa8ent5+54576cnmC4PzTceO2k9Peb7IGhc2belB
emrzhXfVqzknD9NTny9km4csenOUnsZ8obA6FdPyBD1NeHl6OxxO0dOCN3Pl
wbln6OnAa/z91L5z9OTwDo2/+uAiPX14g67l/btMzwBecZcX3a7RM4K3eOvH
qTfomcwXot3f6o236JnDuxCglHWHniU8j0ctK+7Rs4ZX3be9wSN6NvA2H+zi
9oSeLbxuLfoontGzmy+K8yIGp72gZw9v1tsxxa/oCXhNXLw139JznC8SD50J
Eu/pOcNz7LAw+CO9YfCKV69J/ELPFftYUrnt4Td6bvD0JyXJKum5w7twI826
mp4HvPFWV7x/0fOEV73j7qY6el7wtjQqzGqg5419WM8urZCZ8v0H796TKgMV
U77/4M0e0Gh0Y1O+/+A1OdJiWVNTvv/gJbfSP9XclO8/eE4Lzd9q0guF9/a9
bStteuHwlo50GqhLLwqe/vnRIXr0FsG7aDh1f3t6CngT1gU+MqC3At7P6qhG
xvSi4cVNWd3dlF4MPOvbW6d1oRcL7373A5u70tsEL3D3yWvW9OLgqaterrSh
tx37PTznjmFvevHwnJ4/G92XXgK8dwM/LOtPLxGe4tiPU4JeEj7/9m1k7xzp
JcO7tKR56yH0UnBPEz7pDRpOLxVezWizeSPopcHbeqnXATd66fC6d3Z87E4v
A96DDW5K4+ldgBf4e3KPifQysY+m02dPn0wvC96Ru5FbvOllwxvcK/q6D70c
eCV7437408uFp2iyv9MsennwOsw7MSaI3kPs49LLS8uD6eXD8xycezqUXgG8
XycK3oXTK4S3te371gvoFcHrsbxy0GJ6xfAefP07T0GvBF7QOI2kFfRK4TW7
Ks+PpvcZ3hEzU+W19MrgOW/pabOeXgW8kj8DfTbRq4K3zG9UXBy9Guyj4wOv
7O30auFl9plVFU+vHt7EAxFGe+jJwkXxr2ar3BPpKYcLxbb5W1Yk0VMLFzKb
N/vSk+mph4vEh0OPl6TQ0wgXYs7pi1rH6WnCa6Z/2zGNnla48E5Z9TQ0nZ4O
vCHl75Iy6MnhvZ9QkX+Bnn64MFh+vUH5Mj0DeB0tm/XMomcE7/K2tr7Z9Ezg
TfrXeWsOPXN4v2fY3MilZwlv+2NRnUfPOlxk2diPNH5Izwbeo0OTxubTs4U3
t+XMlQX07OBpRIWfKaRnD+/ouxXvi+gJeENcN2sX03OE9+HsXqcSes7wVnRM
DSulNwyeQcyFg5/pucK78iPnSRk9N3iTvJ6oVNBzh1d7823PKnoe2Mf2buW+
NfQ84fWMr99aS88L3mOlpjfr6XnDmxuo+/Of9P6D17zAuLOyGd9/8I469Bin
Zsb3Hz7/oSkOq9TN+P6DV9p6xFkNM77/4K1YNPFDSzO+//D5G5YGtNGiFw7v
yqj5g3XoRcHzurB8vpzeIuyjrtOmQ/r0FPB2xO552pHeCni9ao6qGtGLhvd4
6vleJvRi4AXn3vQzpxcLr4VN/jZLepuwj2MJxTe70YuDN0zt+88e9LbDK537
p7MtvXh4KwubeNjRS4DXyVEn2p5eIryrqUYZDvSS4E3W6V46iF4yvLqlA3Sc
6aXA2/nZxXkYvVR4tu6e4a700uDlZ/onj6KXDi/EJKxgDL0M7KPFpmVqHvQu
wEut3WDrSS8T3nCfBH8velnwPualbJ9KLxveKttzOdPp5cDrlHijxo9eLj7/
LPXHJjPp5cGbEvrGI5DeQ3h/isqi59LLx+cf71yXMY9eATzbtMYf59MrhPdE
3kY3il4R9hGyotOQRfSK4bX81i1iKb0SeMc9+h9eTq8U3vCs4c9W0fsM75P5
hMYx9MrgrYrz6x1LrwL7MGqYF7CRXhW8a/6KHVvo1cCb8nD9rW30auHV2+3+
tZNePbz4pCOmCfRkEULRu3nG+H30lCOEwdPw7NUH6KlFiKx5xQ/PHaKnHiG8
NYe//niEnkaEKD6e/lU3lZ4mPJf2tUNO0tOC9zlaLfI0PZ0IkRhdoXXkLD05
POOJhs/P09OHdy3bqkkmPQN4U7va97lKzwhew/ZhM67TM4G3SzZ+50165hFC
9Jnle/s2PUt4T/NDft+lZw0vtP9Sswf0bCKErNXh2AmP6dnCO6G5a81Tenbw
XBccPv+cnj28zyVnPr2kJ+CtHnG97Rt6jvA6n3sw9B09Z3jXDV5FfqA3DJ73
2i9HPtFzxX4bqn49/0rPDd7uyarq5fTc4dndam33g54HvAJrg5k/6XnCC9vV
Nf43PS94rVT65f6h5439ngwaWvuXng+8Ec/GmSuZ8/0H74vw8VQ15/sP3pqj
wTFNzPn+g9dZe8mFZuZ8/8HLXrzucwtzvv/gTfu4U96aXji8v27Jw9rQi4KX
cDE9qi29RfDsjK+ltKOngPds/f3CDvRWwJv/66V6J3rR2EfraZ/tOtOLgZd2
p2amGb1YeCN6quyyoLcJ3tc9re5Y0YvD57Wmcce67vS2wzMJsezSi1487unG
C7uJfeglwJvmNGRtP3qJ8P4dH3txAL0keAm6078MpJcMr++yuXqD6aXAe/5l
0fCh9FKxj/lj1y5woZcGT+vKjqMj6aXDSzM99GI0vQx4IzefbjqO3gV4ZXVX
+06glwkvxvferEn0srAP0/svdk2hlw3vRu9Pd6bRy4E3ff/POl96ufBkzZQt
ZtDLg7cnTHPSbHoP4fV73X7dHHr58J4PsbgUQq8AXvipPl/D6BXC027n3C6S
XhG8UyvdXRbSK4Y36rv3wiX0SuCVjZ9zbBm9Uuxj7bWFL1fS+wzPzCKm2Rp6
ZfBubt3ebx29Cng+f5Nmb6BXBU8249TuzfRq4O19dOXuVnq1uCf7fnl/dtCr
h1d4sNBiNz1ZpBARLT5O2ktPOVJkaUdWr9tPTy1SeJ9+2yjzID31SCFzc2lZ
dpieRqRQfDujr3+Mnia8dR26uJ6gpwXPbE3vRafo6cDLqXRKPUNPDs930pii
c/T04TW6OVXjEj2DSGGwzyrI/go9I3j2OxcEXqNnAu9FozUJN+iZw4ucvS3v
Fj1LeG2eHqi/Q88aXvqANMv79GzguR257PWIni28763uxj6hZwcvduHzzGf0
7OGZf/hQ9oKegHdrZJX+a3qO8HzPy0a8peeMfSh1arH4Pb1h8BLXtTv+kZ4r
vP4/zV59oecG7+UU2+bf6bnDi7zt2L+Sngc8nR6jg6rpeUaK4vTdU/b8oucF
b7Rq4L06et7wyudENTTQ84kUibHPo7s26sL3H7wug7ZOVunC9x+8W8f2r2/c
he8/7MOvzcnLTbvw/QdPeWnmt+Zd+P6Dl/gpt30reuHwBox5NkKbXhS8l5fe
L9altwheVOcfx/XoKbAP3Y3/XrWntwLemd8aLQzpRcMbM11vgDG9GHjld03n
mNKLhbe+V6+9Xehtgmexb9D9rvTi4N1u4vbXmt52eP7zJlv1pBcPT7lo1pTe
9BLg7R8cuaEvvUR4DidXXelPLwleUdu474JeMvaxYHliByd6KfB0y46PHEIv
Fd7ZcZeWDKeXBs/96u0TI+ilw6swK3jtRi8D3oYtJS3G0ruAz9+ivmLAeHqZ
8HL9/s6ZSC8LXsCDZvsm08vG569iJ3/gTS8H3oEDJv986OXCc9Do2S2AXh72
8Wr+wKmz6D2Et/DNyI1B9PLhtR3mdTWYXgG8jNMzy0PpFcJz14/oGEGvCF7l
qpWjFtArhrexfPPSxfRK4Fl67jupoFcK78711Dcr6H2GF2D5/2i416Cc2y6M
wxEpQkSkEBEpKSVl+6dESiJShBIpQolI+30RSokUoqRIIlIKET1SiIhISkkR
SomUvOfMe/a9jmnWda/fvT4YNwcG02uE1zv6v7n76TVhvmf/vdhxkF4LPMHh
w+lwem3wKp9/fxpJrx2e+6y//6LpdcKTTeqrfoKeiJtQlTlwuPVJeqJugs8K
t/Hh8fTE3ASFHx+m5iXQk3AT8g4bC01J9CTdBGFy5hKFC/Sk4D0avcb0Ej1p
ePah9j7p9GTcBBGxlt3pGfRk4SVY+Vdl0pOHN68gXOomPQV4lVNOCbfoKboJ
1h4xF53y6CnBGyGaHZ9PT9lNiL/hWFBSQE8V3sqyUpFH9NTh/Zhbrf6Ynia8
8JRv1iX0tOGpSXeGl9LThVfkIXG3jN4szMOhTqa5nJ4AT8x03Jh39PTgJWZr
LKuiZwBvvuJc3xp6hvDehxlfqaNnDM+zzbK6gZ4p5jHCevOgr/TM4GUV7prX
RM8cnrmmn3MLPUt4LXGHz7TRs4IXIXbyWTs9a3hqThd6/KVnC6+4/IaGiAr7
B2+L3gMbURX2D16fS88jxFTYP3jnZKruSqiwf/Dm+3xtllRh/+BVNfwZI0XP
FfPwNBNfLk3PDZ7craF+MvQ84GUrKV6VpecDzzxc/YM8PX94re2zByvQC4IX
YWs0X5FeKD5PUx5b7FSiFwbvsbbdWWV64fC2xLs8V6UXifcX7+vbU51eNLxz
LoematKLgaf3LnaDNr04zKPaIOWILr14eF7pmfdm0UuAJz/i/o+59JLgZfs/
G6tHLwXeqq+Vyw3opcL7ad7oZ0gvHfM4ktd+1ZheBjz1SX1qltLLhPc4coi0
Gb1seFv/jtEzp5cLT2LzFBdLennwkkpmJVjRy4enP2Nx6Xp6BfCqE1aJ2tIr
hOfdf5OmHb1ieCP37LR1oFcC72aVd6QjvVJ4FosP5u+gV4Z5/Mw40bKTXjm8
yJHJiq70KuBpBF83c6NXBe9J0z1/D3o18BxXl2R406uDJ3H/XY0fvQa8//nJ
X6SD6DXCW3Dst14ovSZ4H0TEdoXRa8H7+2yRTjxMrw3eyBcKL47Qa4eXM1ut
VzS9TszD4vxMrRh6IvuE+DYpw41x9ET3CQpR+8yjTtMT2yfkadTa3j9LT2Kf
YP10iXPrOXqS+4Qqxxte41LoSe0TfPqOCVuRSk8aXvL+mIDL9GTgLWhNunaV
niy8mrXXaq/Tk4fn89/dIdn0FOCN0niqn0tPEV7uiYpdd+gpwbPs9TnxHj1l
eL+2/XrxgJ4qvKhXvXoX0lOHN3Xe4GnF9DThlVwYvekpPW3MY9uQyUef09OF
189rxoOX9GbBS/608OdregI8g2Urx1fQ04NXe3PDyvf0DOD5jnMK/EDPcJ8g
jD7kef0jPWN4ub/2f6ynZwpvtc3xoY30zPYJIr8fnVvwnZ45vKNaGbt/0LOE
p3kq79xPelaYR0mfJy9/07OGt935be9OerbwJN/WT/vX3T94Kfptm3qqsn/w
FqaJRvdWZf/g1Q4bVCCuyv5hHn6+o9r6qbJ/8BS+qCgNVGX/4N1aoWs+mJ4b
vDW3DYKG0vOA93vCiszh9HzgRUfY1MnR84en1bFdZjS9IHjPNnoYjKUXCm/H
k1DX8fTC4EnqHEuaSC8c3oUziWUq9CLhLep3VWwKvWh4H3fd0Z5KLwaef2Wx
3TR6cfAUFr2J1qEXD+/2lU8FM+klwLOS+9k2h14S5tse0HPCfHop8I59G7hq
Ab1UeFoWI4MX0UuH9/zupBtG9DLw/jtUdD6Z0MuE1//ogmHL6WXj83Sxa/nC
lfRy4S2yt95jQS8PXt2zbefX0MuH5z/T/dU6egXwxpwL6bOBXiG8OwOip2+i
V4x5WO1N2GxPrwTen+r0Y1vplcI7ZnT7v+30yuBNu170y5leObzSUeUTdtOr
gOcUUrdqL70qzGPAj5Zgd3o18C6u6ZHlRa8OnuGDAfW+9BrgfVKTHx5IrxFe
wHHlRSH0muCN7Tl97wF6LfDubNVPPkSvDd7al8teR9Brh9cxZ734UXqd8I4n
O+ocpyfiLgjag/fZx9ITdReqSt2Dj5+iJ+YuWDt/jHp4hp6Eu6AwcOnZ34n0
JN2F+NSsyxOT6UnBWzz2lsVFetLwPh14FJJGTwZe4M9XWVfoyboLIorrP9Zf
oycPL+/hj+FZ9BTgrZsqYphDT9FdyOuI7e92m54SvJjecil36SnDm75jYvl9
eqrugs+L19MkHtJTh7dzvp5uET1NeANTTR2e0NOGd2nouphn9HThGXlvLXxB
bxa8+vq97a/oCZhH0PIg5bf09OAp5kZaVtIzgHd3/JnQanqG8NYfTsuupWcM
r/N3TsMneqbwTmwolP1Czwze9OIyw2/0zOG9nFbr1kzPEp7L6eaUVnpW8KQk
/pX/omcNL22nZN8OerbwjCpkZ3TRs8M8GhZM2NJjMvsHL/iy1olek9k/eONk
5z/qM5n9g3fPb+mfvpPZP3jrG60mDZjM/sH7u3LL6kH03PD+J+7s2T+Engc8
HeXAm8Po+cArO3Lk8wh6/nh/l87TI0bRC4I3yO7S4jH0QuGlPb25bxy9MMzD
WPfhhQn0wuF9PvvyzSR6kfCCJWv6qtGLhjfetWmGBr0YePfe/92iRS8OnrVh
v9jp9OIxj66rw4tm0EuAFyuv1DGbXhI83SBNlXn0UuCVfRfW6NNLhbfL0uTA
Qnrp8Abnr8lZTC8D3mVVhy9L6GXCWxLtKreMXja8z//8jVbQy4UX4hDhvope
Hjyl0lMXV9PLh5c/K/XtWnoFmIdNUnY/G3qF8LoG/jdzI71ieHFuL7ZuplcC
b0ZNdewWeqXwXhl/L9pGrwze7szODid65Xj/wQp9VXfRq4CXHjrMag+9Kngm
LePC9tGrwft/sZqa60mvDl5owdxGH3oN8JTUl8gH0GvEPO7HrDYOptcEb4Oo
vcd+ei3w/jnuTj1Irw3eyTK/inB67fBmCOGSUfQ64b1OOTnrGD0RD6Fqt/RF
xxP0RD0EH2nPrLiT9MQ8BIUrdQ+K4+lJeAh5JqalnQn0JD0EoTG7SvU8PSl4
oYrfrC7Qk4Y34WBH2CV6MvAetInfSqcnC2+DtczXDHry8EQeKY68QU8B3klN
jSU36SnCm3lyjuctekrwysWML+XRU4bn6mT5Lp+eKrwhb+z6/0dPHd4VvV2z
H9HThLf0ku+2x/S0PQSRrzKHT5bQ04W33yfucSm9WfAmfk75W0ZPgPfA7Mbk
N/T0PARr21v3176jZwCvx4TnB6voGXoI8afC39+qoWcMb9afxq919Ezhldv+
GfmZnhm8PY/7mHylZw5v6PShXk30LOFdjR+b1kLPCvMw7ate2UbPGt5Xl9kD
/tCzhXfg3eI5f+nZwVNeaLFdRI39g1eQvumUqBr7B2/jCJcnYmrsH+bRI8Cn
S0KN/YN3+utBtf5q7B+82ati10nRc4P3Ji/5kDQ9D3h7J2XelqHnA29oVP43
WXr+8DL+lowaSS8I3rLNlSYK9ELhfSv54qVILwxe2Iz2NCV64fCUE8XeK9OL
hPdf/yEDJ9OLxjw27hkzV51eDLye1Wo7NOnFwYtfPOu0Nr14eLOvGT7VpZcA
7+3IVf9m0UuCtzd44xSBXgo+TzLNzuv16KXCu7ba+7ABvXR4y+6H3TGkl4H3
/z75xHdjepnwwo6dH21KLxvepB7Xl5rRy8U8Hm65521OLw/ephdPL1vSy4cn
Oufdeyt6BfDiz38eaE2vEN6cQb/n2tIrhlexr7eTHb0SzMOtdnC8A71SeMNM
FEoc6ZXBu3ZjsogTvXJ4y8fMVHehVwGvaf8ia1d6VfAOtq4Md6NXA09lnW2e
B706eA//c2ryptcAz07DS8GfXiO8XrEHTIPoNcE70yvGJ5ReC7y525PSw+i1
YR4VrzKqDtNrh7dv3l2pSHqd8IZffCJE0xPxFOKvD6lwiqEn6ikIZl4N8XH0
xDyFvKZPbSWn6Ul4CtaHlvXqkUBP0lMQUc0ZpJFETwpe4bjRNin0pD0Fhc2H
VCNS6cnA6/Vb9+5lerLwztosbL5KT95TqJpbtGJMJj0FeO+0NizLpqcIz/3U
Dt9cekrwhot7XrlDTxlepvP+6nv0VOGZvT02qICeuqfg06x/bl4hPU14h9Ou
OhfT04anOjzvzFN6uvAe+T5+9pzeLHibv7zpUUZPgNd7Zb1GOT09eAm3f9pU
0DOAJ0wUPfKeniG8ygipex/oGcNz7xj54yM9U3iym1TGNtAzg3fjic7yRnrm
mMcKHQO/7/Qs4f04Y3b1Bz0reIf72Xz4Sc8a3uTd2we307OFV1TpPr+Tnh08
+0WhO/919w/vL3Y1+mzPKewfvAS5xOe9p7B/8OYFXukpMYX9w/u//3Z7quQU
9g+eh0XxhoFT2D94I+6VHxlMzwPzuKHy6d5Qej7wVh5t/TGcnj+8lq4eivL0
guCF2w80G00vFJ7ac3n/sfTC4BXNnJQxnl445uFwbnrNRHqR8PoMXCCtSi8a
XuLe5XpT6MXAm/9hvctUenHw3httS5hGLx6e5/V9pTr0EuDJjQ4RnUUvCV5W
yFHNufRS4Jn/OGs7n14qvJY16ZEL6KXDi3hwK38RvQx4U6YUtRjRy8Q8io+/
VlxKLxvelp51Zsvp5cLr49jiv5JeHrxzL0WuWdDLh6c3d0DtGnoF8KqS5Yas
p1eI9/carKy/gV4xPDkP7V2b6JXAy/6ol2hPrxTvb7502Yut9MrgtWat67WD
Xjm8I2MdtXbSq4A3Jcxt4256VfAe/wyK2kuvBt6W9VH33enVwRMvPNPqRa8B
XtLUy+P86DVivnpxuSsC6TXBq+79KCCEXgs8rx2vrh2g1wZPvry29hC9dng3
5/8YcoReJ7xVqf/0j9IT8RKEn0P77z5OT9RLqDriPeJcLD0xL8FHvWHCy1P0
JLwEhSfLp/U+S0/SS4jfmjt/2jl6UvAklEw3JdOThpd0eO3Ri/Rk4Om3b3mQ
Rk8W3ocNe39eoScPz7s4cPx1egrwRmpHrsyipwjv5un4wBx6Sl6CtYVE2vXb
9JThte3M+XiXniq8yIqHQx/QU4enYVC24CE9TS8h78nlmt1F9LThOco2n3tC
T9dLEOnr3/XyGb1Z8M439hN7SU+At8BcVvs1PT14H+4o2b2lZwDPR1krupKe
IbxRkfMKqukZYx45nSZttfRM4VnaWSnV0zOD1/bUwfwLPXN4Ubp7gr7Rs4Q3
NSEgs5meFbynkkfqWulZYx7bXE/L/KZnC69vVapBBz07eMmGN1276DnASyi3
LRVRZ//w886Htmztqc7+eQnhgp6zaC919g+/P/D3ntje6uyfl6Bemeql2Ued
/YN3ySawSJyeBzx3mTDbvvR84C0uOtLRj54/PFmfmMj+9ILw99drxasMpBcK
70ZDUr4UvTB4gacurRlMLxzeCrNrLdL0IuEpiuccGEovGt6P3LuKw+jFeAlN
ec4Pc4bTi4N3WOmp2Qh68fDWvX35RY5egpdgOjm8wn8kvSR4nfo1cqPppcB7
1N6QoUAv1UtIj0lrMhpLLx2eve2vGkV6GfCmD+9yH08vE57Y415DJtDLhvfC
t1/qRHq58BK0B+tPopeH9975ZXiFCr18ePPiR++aTK8AntRKJckp9ArhVUpM
TlSnVwzv0m3NWVPplcDzcJnxQpNeKTyjifMcp9Ergzfi3cJe0+mVw6uPMInT
oVcB74bBSq0Z9KrgBXWsKZ5JrwbeyvQNG2fTq/MSpMZtcuicQ68B3g9ZpyiB
XiO8u09cVefTa4IX7u95X49eC7z1OgFWC+i1wVP7ur/VgF47etF5JiJsEb1O
eEXmx8ctpifiLfic6Hc614ieqLcgOOSdW7GEnpi3IKWzO7XRhJ6Et1AlNikj
wJSepLcQ/7IyW345PSl4iZF518zoScNzWfSf8Up6MvDm/31ca05PFp7U1Rce
FvTk4b23eztkNT0Fb8EpTe5D6hp6ivA8S+r119JTgmcc+L1iHT1leCNmtO2y
pqcKr+Fbp+QGeurwshJEz9nS04QXbNF39iZ62vDM+w96aUdPF964e8O22dOb
Ba/FdVTvLfQEePdUxp/cSk8PXkSVyrRt9Ay8BRHro1Mfb6dnCE9tse4mJ3rG
8P52zf3rTM8UXnGGwVEXembwYu2XTN5NzxzelpErHrjSs/QWSnSer167l54V
vD7BNj/d6FnDK5tpf9Cdnq23oH6uaft4T3p28Had233Li54DvPmrPVb6dPfP
WwgfNND/q293/+BV5YcG+nf3D97lveEjA7v7B89r8rHrQd39g2f84eSSkO7+
wZM7lvgxtLt/8D4bXfQ80N0/eNkiV4ce7O4fvJDrWZcOdfcPnvmWOwvCu/sH
b/zogncR3f3zFqxbS4t3R3b3D15+SGn/o939g3dk9ptz0d39g2f9o2r28e7+
wZty/tPLmO7+weta821bbHf/4D2W+tn7ZHf/4MU96Dh5qrt/8Lbs66kd390/
eLpTJJ6c6e4fPPHagXYJ3f2D9+q4TFdid/+8haZzS0ZGJ3X3D96unuPUkrv7
B0/vxqSClO7+wRvsqLHuYnf/vAWFagWdttTu/sG7/HLOobTu/nkLeV77Fyil
d/cP3pK5xrevdPcPnnzrcvOM7v7B+5Js+e1ad//gZa+1Dsrs7h+8kMGbR2V1
9w/7v+q/bZnZ3f2Dp+SxyySnu3/wfqq71+V29w9e/kdfr9vd/YN35ESITF53
/+DZLD2cdre7f96CqXqvaIP87v7B+5cVV3m/u3/wHm9LcC3o7h+8uLEXBjzs
7h+8ra/Skwq7++cjmM4IuzGniD/fw0dQkJh3u6xYnf8fgo/Q9Orn/e1P+Pu9
fIS8pAtFYiXdffQRfHavf37qGT1xePpDyrVLu3sJT7rw/ZMX9Pr5CFXVnnV2
Zd39hJc+9WvXK3oD4Hl/aoku7+4pPJO4P2pv6Q2CN3JZj/8q6EnD+9JbfH0l
vSE+QvrNmwN+ve/uLbzQHUMPV9MbDs9inPyEmu7++ghSE8rH3qmlJwfv50Hl
VXXdPYZ3f77690/0RvkITpG/tIMbuvsMb0Pq7NFf6I2Bp2Gjf6ORniK8f0ON
ln6jNw7ek0fLPn3v7je8k94W3s30JvoIgqPW+mEt3T2HN7Nh0+VWeirwJE45
Lmzr7ju818td3v+ipwbvfJ99e9q7ew/PNddnYAc9DXgLnIPPd9LThCetdGhu
Fz0teB/eRL361/19AO/K4dgdPTT+7+nA89E/20dUg98P8Ja2J5/upfF/b6aP
UDIy7fJ0MQ1+X8Br3JD5tI/G/7058HKG3dosQU+At784/19fevPgWfo+OiZJ
Tw/eBO1nUwbQ0/cR4ts+v/pvID0DeA9OV64fRG8RvKgVH38NpmfoI4jYSjQe
HkLPCJ7G7R8TZOgZwxNxab8zjJ6Jj2D9dIKIhSw9U3inKsSaRtBbBm9bRP8Q
eXpm8GYaDFEYRW8FvL4dI7JG0zOHV355jOkYehY+gnryxon1Y+lZwtsjO8Vn
HL018BY8mTZciZ4VvCH+s9In0FsHr2a63iJletbwrjYaVk2iZwPP94zpXlV6
tvCWmq+SUqO3Ed6ofuuSp9Czg/f1zkZBg549vNxdW19PpecA74DyTictelux
r5aVe8W16TnCmxjpHT+d3nZ4vxYG6ejSc4JX0BlWMoOeM7yjVyLtZ9FzgWdr
d0JkDr1dPkL4VLkzx+fSc4XXo+S8+jx6e+GVBKQ9nE/PDX06pXvdWp+eO7xt
33J+L6DnAW9Wwr3whfS8sK/9LAonGtLzgfdGsiRvMT1feMl3yyyM6fnD2+P6
rmkJvQB4Biq1IUvpBcEbWvVZYRm9EPSpNqo5azm9UHhXDX+brqB3AJ5vV1f9
Snph8EwzevuuoncI3mh7SVlLeuHwvslLX1lNLwJe7jNZQyt6kfAOBClUr6UX
BW/1zAlu6+lFw1NumjzIht5xeL8TtVI20IuBV2A5c95GerHwjg6YX76JXhy8
jfmLnDfTOwVPc+9SCQd68fB6TjY/s4XeGXgl1Va6jvQSsP+no22fbaOXCG+7
0RaHHfSS4M0Wce7hTC8ZnuT1PTE76aWgT28cvDR20bsIL2VUYOFueqno+97S
AzZ76KXBWxhypH0vvXR4MrNjIvbRuwKvtvm0sge9DHgZSUl3Peldg+e35pKl
N71M7P8yqWvNPvSy4Ck8uBnqRy8b3je3u2MC6OXAu6X2MDuQXi68sJony4Lp
3Ya35vjLhhB6eejdpCUVvvvp3YX3u0eNbBi9fHj/ZTZcOUjvPrzorU2Gh+kV
wNuk8Ks6nN5DeFov/7odoVcIr+f+XoOj6BXBezan34Wj9IrhxbcMmn+M3hN4
O5KHvzlOrwTenLWjd56g9wye5GClvnH0SrH/bwtUz56k9wLeBXfNGafplcFz
U5/xPJ7ea3iLPgpbztIrhydzYmHPRHpv4X00MTlxjl4F+n5NdOXU8/Qq4fln
rXmUTK8K3vJtGzZcoFeN3imMdfhzkV4NvO9lO45colcL7/YB10mX6dVh/w8K
nvfS6dXDs/rpv/oqvQZ4ky7s/5FB7wu89nUR+6/Ta4T3UPr42Bv0vsE79vDU
zSx6Teidnee55TfpNcPTmpr6OYdeCzzRT1f9btFrhfc8NnvEHXpt8M6Y5l3N
o/cbnlPv/xbfo9cOb87Nxx/y6XXA67/jxb4H9DrhVSi+HfwfvS54F19XX3hI
T8RXENl3sH7+I3o9fIWSRfO/vymiJ+orhA/79XPnY3q9fAWnuoudfZ/SE/MV
1K9biyaU0BOHFzC078zn9CTgLX8kVVpKrx+8Md7Dtr6kJ+krWDdpjhJ9RW8A
vDv142Jf05OCd+ikiuYbeoN8hTyr5VOL3tKThqfSR9f2Hb0h8P7kzO2opCfj
KygUOhlEVtEbDu/4+CUqH+jJwrN7Y5ZfQ08O3rTDq9d8pCcPr5e+TUsdvVHw
Sn9vPlBPT8FXaDpzabviZ3pj4Dlt2J3zhZ4ivLnDPMy+0hsHb0Cx35dv9JTg
vfMJ9W+iNxHexWnhcj/oKcPb9zk6o4WeCjzD0yeNftJThTd8RWJNGz01eJ/E
L7r/pqcO7/qtK9J/6GnAC9iZdbGDnqav4GM24Y7eX3pa8MZWPHjbRU8bXnN4
sYvI1P97OvDuLCjt13Mq7z94h/6UJ4hO5f0Hb+3lqpm9p/L+8xVMVTd+KhWb
yvsPXsfwb1vF6QnwCh+3ivalN89XSD/u1xHbj54evM3Te2r1p6cPT7tRvHgA
PQNfQar3mYEbpegtgle6UqZzED1DeGf7joySpmcEz/mOoupQesbwhF2T7svQ
M4E3UFnDajg9U1+h6t276a2y9JbBSz0yJ0yOnhk894ULxo2ktwLe4k6j3FH0
zOHJXlm+QoGeBbxPmywbx9CzhJc5wjpAkd4aeIFP7eTH07OCtyJg2zUleuvg
KeruMp5Izxpe89d9tcr0bODlnfX1UKFni309vCpkyGR6G+GtkzycqkbPDt7k
u0f11enZw+vYHVehQc8B3qNJCbs06W2FF/M+RXIaPUd49lHpidr0tsObbnhj
lg49J3i9u2690KXn7CvEv7h633EmPRd4CZuLes2mt8tXEHbKP4+bQ88V3rxn
r7UEenvhDQx6XzyPnhu8yhl1G/XoucO79L2xU5+eBzyPxJYoA3pe2H8jyz+q
i+j5wJMd0OOBIT1fePX3+qw1oucP78aeAT+N6QXAC1IdetCEXhC8ldVy403p
haB3itFjby2jFwrvx2LllWb0DsC7+2/K1xX0wuCFX9MONKd3CN56h9kjLeiF
w5s8Sv+6Jb0IeJ3PFy9ZQy8SXlHwso9W9KLgnZhl4bmOXjQ8h+Z1Q63pHYc3
PWnTJRt6MfDE1jgusKUXi/1/OdDl3UZ6cfAS77vttqN3Cp6Lm09/e3rx8Oap
BZ9zoHcGnlTNwdlb6SXAe38s6qUjvUT0Pc04dtt2eknwPHuc7e1ELxmeUWby
SWd6KejdiK2Xp7nQuwivYXTm4130UuFlvcjd5EovDfsfFJr/dw+9dHgr5zw6
6kbvCrxxLSWT3ellwGs5/+qBB71r8O5ZVa71opcJL3zQx5/e9LLQu/UFXw76
0suGp+b+Y7w/vRx4f6e03wqglwuvuPbfyiB6t+GdiBH7FkwvD56DSf+gUHp3
4emIDhl1gF4+vD5ZIzLD6N2HV+Y4xuQQvQJ4iWMm1h2m9xCeS5maVwS9Qnjz
D0yTiaRXhH0dJMxKi6JXDK+qdb5BNL0n8NJSDCuP0SuB57nO1DWG3jN4xtKr
BsTSK4Un93BtUhy9F+j7Z4+Nc07RK4OXpbG17DS91/CC65y3n6FXjt6Zx+4V
S6D3Ft54U+9TifQq4LX2CtJOoleJfb2XHfbkPL0qeBHbI+1S6FXDs1Y80XWB
Xg28Ka/jo1Pp1cLrCjuvlkavDl7xvLSCy/Tq0bvYtmvrrtBrgLflYk7bVXpf
4Ola3zt0jV4jPPGhhUqZ9L7BKyt8evsGvSZ457zKzLPpNcPbpfnu2016LfD0
6muCcum1wht88vOo2/Ta4FUta868Q+83vMtiv03u0muH55XTVXePXgf2dYlT
b+/79DrhyY+XHFZArwve5/LBl/+jJ+InpGcfkl1YSK+Hn+AToqfw/hE9UT9B
WPVbaU8xvV5+gpTSpckDn9AT8xOqWm20zj+lJw4vX2bm3Gf0JPwEpyNF8149
p9cPno3Poh0v6EnCU5+2tE8ZvQF+QklXw8rTr+hJwXt8ymp6Ob1B8OLMbJ++
oScNb6v4ls0V9IbAm3HL6d87ejLwxHfuOfae3nA/If6VkteUanqy8JLeBvz3
gZ4cvN3hB9bX0pOHp7/gyK+P9EbBG/zn+OFP9BTgVaedntBAbwy8dNukO5/p
KcLzHn5pVSO9cfBMHmd8/0pPCZ68383g7/QmwvuifXd0Mz1leDe//HfjBz0V
P0E9NP7J0lZ6qvAsVr789JOeGjylvhXev+ipw/t5+8Owdnoa8O67NFz+Q08T
XuTEpoWd9LT8BJEN79re/6WnDU/9yN89/7rvP3j/DHpJ9dDk/ecnWD/p6Jvc
U5P3H7yT6YOEXpq8/+A5bhr+urcm7z94M0aMduqj+X9PgCfxdLy4BL158F77
q8b3pacH77yOpo4kPX14rl91S/rTM/AT8vTPCvYD6S2CJ71qocggeobwPvQz
OT6YnhG8K3kr1IfQM4bns3vNw6H0TOCZTNpgPYyeqZ8QPvK9/e/h9JbBa4zc
ET6Cnhm8nEWuE+XprYC3/69H3kh65vAsrvpbjKZnAW/C5v1NCvQs4bXJRYSM
pbcG3oOSYwrj6FnBiwo8lTWe3jp4G2acM51AzxqexveL9RPp2cATSbzqM4me
rZ+g8NQie7gqvY3wTvXPS59Mzw6e472CRVPo2cObuedxlTo9B3h9VV/snUpv
K7zyqjdSWvQc/YSm80erk6fR2w7PdXG9MJ2eE7wF/7691qHn7CeYDrn202kG
PRd4Nfad4rPo7YJ3ZaTomdn0XLH/Ps8ldOfS2wtvabDUM4GeG7xRs4Y5zKfn
Du9r08ge+vQ84OWcGxezgJ4XvP2rVTQW0vNB7ywHTi1cRM8X3sT7OjaL6fnD
+7V3brsRvQB4DyYbRCyhFwQv6oOx8lJ6IfBsj5ndNaUXCm+q8WrL5fQOwOvR
w6bZjF4YvKfXN4eupHcI3qkt28esohcOb9vo3dkW9CLgzXrhvmw1vUjsf79Q
v4Y19KLglc8O9V1LLxpe8o/DsuvpHYe353z0FWt6MfAMrE4abqAXC2/ooMRq
W3px6HvNgwtum+idgnd135VBm+nFw/OdkpViT+8Memdae3veFnoJ8EbHPCjf
Si8R3tclxc7b6CVhX3N7lkrsoJcM78CN8jNO9FLgrXas0t1J7yI85TGfnrnQ
S4X36+VXh9300uAV7G/tsYdeOnp3dG5HzF56V+BtbO0xdR+9DHiaKeKP3Old
g9dj3cANnvQy4ZUMlvnjRS8L3un/5I/40MuGt91DcZIfvRx4szUm3fOnlwuv
X5366kB6t+G9OTH9RxC9PHgpS+fsD6F3F97eXgvG7qeXj31dmG108wC9+/CG
bl++/CC9Ani1Yy0/H6L3EF7Gq/V+4fQK4fmF2Y04Qq8I3rJ5265G0itGj0e3
uSw+Su8JvG8X9n2IplcC79Z6333H6T1Dn8KGhAw+Qa8U3prCQxdi6b2Ap+x1
dP5JemXY199T496covca3n+fzu6Mp1cOLzoupe9Zem/hbVqWfjaBXgU8TbEb
M87Rq4TXM+fW8yR6VejTsx33tyTTq4YXP66o5wV6NfB2lD87cZFeLbzZh15P
vUSvDp6k3vtHafTq4b399XFDOr0GeBdSG/9cofcFnptNy5EMeo3wFsr8mXSd
3jd4MkUi+Zn0muB99O6zJoteM7xrWgNasum1YF/9GoYcyKHXCm/ZKTnFW/Ta
4CmYjc25Te83vO99lM3y6LXDu5075ctdeh3wwpy1/fPpdaLHa5Rmyz2g1wVv
0lu9jAJ6Iv6CdfvhxUYP6fXwFxQe6i+rKaQn6i80Rbevci+i18tfyNuUtk76
MT0xf8FHy3bTxSf0xOGJDnfUK6EnAe958c63z+j1gxfv6+ZSSk8S3g5tn34v
6Q2AN+dLUEIZPSl4/eMPznxNbxC8ihVRpeX0pOFdkIjd+pbeEHhut8+IvqMn
A2+RS3JsJb3h/oLpsImXNavoycKrq7heVE1PDt61iFzbGnry8PwN8jtq6Y2C
t7yjMLKOngK8MeklKvX0xsBr2vgqv4GeIrzbspVrvtAbB+/gk9qWRnpK8Kz8
vxz4Rm8iPBWdH4pN9JTh/Wn8ndNMT8VfqHp45p9ZCz1VeMfMxRpb6anBs+vX
P6CNnjq8aXnS8r/pafgLUr12j7jWrsl//wPvufIY4w56Wv5C+pnKCbWd9LTh
OUWqeXTR04E3d9G0ISJavP/gDfg7M7WH1v+9mfAqrszXF9Xi/Qfvop1hRS8t
3n/+gtM+OdNdYlr/9wR4hiXmkuL05sEbHrg2UYKeHrw63Y2z+tHTh3f925YX
kvQM4AUkODsOoLfIXxDMLPb2kqJnCG9sf++4QfSM4DXdDdSSpmcM745rWPEQ
eibwDqlEbpShZwpvbVVM5zB6y+CpHo2PkqVnBu+P4XlVOXor4BV2XbovT88c
3vGMa1aj6FnA22yf0zqaniU87ZH3wsbQW+MvlPR6/nCcIj0reKVBT3PH0VsH
7+zMshVK9KzhOTdVNE6gZwNPOFcToEzPFt6A1Z/lVeht9Bfi3w1ovqZKzw5e
av4vYzV69vDc93bVTqHn4C+ILJ7c21OD3lZ4wz/0G6pJzxHep+jBl7Tobce+
ZhrJLtCm5wQvUETh3XR6zvBWXFfarUvPBd7YLZP7z6S3C17zKK1zs+i5wssr
nTF7Dr29/oL64ZB5L+fSc4O3bvaibfPoucNT/WHSW4+eB7yOpJUn9el5wXu0
xmqaAT0feDFSto8X0vOFZ//AYZMhPX942vuc/i6mFwCv95Q9R43pBcF7UeM5
2YReCLyE4wEPltILhbdzyYG1y+gdwL4KPY/8XE4vDN7AG8cPrqB3CF7l1tPj
zemFw7ukkHRrFb0IeB4vU1da0ouEt3h/xtfV9KL8hXDZuTcDrehFw6tvyRu5
jt5xeDeS/7u+nl4M+hS49skSG3qx8FYMfvlxA704eIr/vfXcSO8U9vWH+4eh
dvTi4d1Vb7i0md4ZeIc/fl/gQC8B3roTbe+20EuEN3np392O9JLgdYr2GrCd
XjJ6V5TVN2kHvRR4MdsGzXGmdxGe/djhZTvppcKb/mrU9l300uCJhY0Xc6WX
Du+loHpqD70r8BJ+TtV2o5cBb+cF3Sf76F2DN2+9YOdBLxOe1JCFXZ70suC9
f7gk2pteNrxLnivUfOnlYF89pq4p8KOXC8/ok826AHq34Y2Is28LpJcHr8F0
x6Fgenfh3ejtqhRKLx9e0E2P2/vp3UePV+7wNw+jVwBv3Lj93w7Sewiv5XV4
0GF6hejT3YPHRkXQK4IXPv9U5hF6xfDW/0o0iaL3BPuqlnqx7ii9Enh/ra96
HaP3DF7R0GyZGHql8E48upN2gt4LeA7eBQZx9Mrg6Wg9rjxJ7zX61Keh1PU0
vXJ4L0++GXCG3lt4icurk87Sq4Dn0qd+TiK9Snjzc7+VnaNXBW+Q88/t5+lV
w3s/vlMshV4NvLQ3PU9foFcLz/OwxPRUenXwjPWlnl6iVw9Prl1m82V6DfAa
Lo38l07vC7ysDeOOXaXXCC94mMqUa/S+wTMv1vjvOr0meON9ddbfoNcMr2Xa
3F9Z9Fqw//c+Lzh8k14rvIjTxhNy6bXBs15hducWvd/wpkisXnWHXjv69PeW
9fc8eh3winduDr5HrxN9j52wffR9el3wtlTsuvGAnkiAIKUb4b70P3o9AoSS
PgZ+nx7SEw0Q4sv+hHg/otcrQHA6d/nwsGJ6YgGC+q6N0Zcf0xOHpyd7cuFT
ehLwBj1JeF9Crx+8Kr8Le57Tk4R3efqVgS/oDYDn1Xjj/Et6UgGCyJIzt+e+
ojcInpz5g1ev6UnD+9y3eMcbekPgZd953qeCngy8kF3lp9/RGw5vlXLV9Pf0
ZOGNr6x7WkVPDl7rka+bP9CTh5e/sPVfDb1R8I50/jn2kZ4CPJsrPdQ/0RsD
b4qd+MN6eooBQnjXiIHWn+mNg/f46dDfX+gpwYsLkA//Sm8ivK26ihO/01OG
p/tNOa+Jngo88QR1ix/0VAME61erpje10FODlyQ5J+QnPXV4u+/qK/yipxEg
5Om5GmX9pqcJb7DKctM/9LTgVb+3qO+gpx0gKKRHrff5S08Hnreh3fB/3fcf
vCVdjuki03j/wZPPcFnUcxrvP3hfNu+rEp3G+w/eTXnfvb2n/d8TAoSmkGfB
Un2m8f6DtyroULI4PT14SjOPCn3p6cP7+T32dT96BvDuJ5516k9vEbwjlini
A+kZwrMZkB4vRc8Innp+ps5gesbw/u25VSJNzwTeE9X79kPpmcKLq34kMoze
Mnhbo58dH07PLEDwmWH0Wn0EvRXwJETeP5SjZw7v9bWP1iPpWcBLcmj8PYqe
Jbzdo1rCFeitgadf2j5xLD2rAMFUOkTkriK9dfA+zOpjOZ6eNbz05v7NSvRs
AoR076QhoRPp2cIzWSM3ZhK9jfBGSo3NVqFnh31tvD9x2WR69vBuuk1pUKPn
AC9UTdtXnd5WeBY1s2Sn0nOEN+G43hVNetvhtRkvNpxGzylAqLrfY1m1Nj1n
eJGZq9x06LnA27B13aAZ9HbB01DYlDKTnis8kZdb582mtxfek9Cd5XPoucE7
OcfNWaDnDs+xxVtiPj0PeDOTg87o0fOC13ftQd0F9HzgvR4U9cyAni+88wUn
HBbR88e+urqf6bGYXgC8BerJMUb0guAN+ZimsYReCLwPMdcLTeiFwrtikmtj
Su8APB/R/PZl9MICBGFpVmGEGb1D8EZtK1FeSS8cXuOYV3fN6UWgTzll7ywt
6EXC23+gttmSXhQ8S+FL6Bp60djXiT+bx6yldxxeW8rv7HX0YuA9WPdvmTW9
WHhR0mKfbejFwbN9KOlnS+8UvKme0iM20YtHn0SmjrhqR+8MvKd1Covt6SXA
OxU74YMDvUR420zV9m2llwRvVu9pg7fRS4bX9+bMC9vppcAr3z5/vhO9i/CS
FQ3fONNLhbfn9dKdLvTS4BkcNO+7m146vCHz1551pXcFXk2b7Yy99DKwr1cv
bnnuRu8aPF9r5y3u9DLhmQ7d29OTXha8UY+8TnjRy4b31Stwqg+9HHi5mmGP
fOnlwjtQf2SDP73b8FafjPkTQC8P3sTl8UeC6N1Fn36JnZ8UQi8fXkHOpXuh
9O6j70edrq0+QK8A3sbxOT/C6D2EN/XN3f2H6BXC63H44dhwekXwSvSe3oyg
Vwzv9O+XyyPpPcH+b7tU8TmKXgm8WRtq/KLpPYPXb9jnEcfplcJ7U9R0NYbe
C3gpPr8Wx9Irg7dnWteHOHqv0TuDz73cT9Erhzf0dD/peHpv4dWaDb54hl4F
vAxxWb0EepXwfG+NfptIrwqe6U4llyR61fBGT5jcL5leDbxvbzUTUujVwrsV
PmPmRXp18A4smFeaSq8e3uo/C7em0WuAp3zZRDSd3hfs/2/blbFX6DXC+2+4
lWYGvW/wjj7eUHSNXhO8jX4Otpn0muFpTnfquEGvBV7PRtfIbHqt6PuzeE+V
HHpt8E6vDMjPpfcb3va+B9bcpteO3s2+E9Fyh14HPMldxw/cpdcJ7+3E04r5
9Lqw/ynvzuXcpycSKOTtPZJqVkCvR6Dgs3Bhxpf/6IkGCqYyndn+hfR6BQoK
H9Pz5IroiQUKVRmb/ssopiceKKT7jXhi9ISeBLxlT1/UPKXXD55CwFv3Z/Qk
4X3X+SBdSm8AvFtf6y++oCcFL+zsd70yeoPgrVnV9vYVPWl4kyT/upTTGwKv
PU9U8i09GXj/7e6bWEFvOLzoSYNmVdKThbfp/bAX7+nJBQqCVtQox2p68vBE
Dcf3qqE3Ct6zvypxtfQU4MVfnapVR28MvB2bdYs/0VOEN0de2NhAb1ygINX/
mUHnZ3pK8N4GLolqpDcR3oUZK1S/0VMOFJzcvq++/52eCrxFiTZWzfRU4Q2z
tG/9QU8tUCj52H9HWCs9dXjX7u0e10ZPA57/Ho/cX/Q04S1X9V/RTk8L3pjq
0MY/9LThfT8aHtBJTydQiL+9+Jh8Fz1deAf/nbz2r/v+g2d1LdG4hzbvP3gq
Dhdre2rz/oPXPvKqRy/t/3sCvIfPs4aIafP+g3cs+E5qH23ef/DsZhXoS9DT
hzetubiiLz0DeKJJpbsk6S2C93z1G8kB9AzhnRlYnTiQnlGgoO50/9OsQfSM
4c11+/ZiMD0TeP3VfjoOoWcKr+JDRy8ZesvgXTzW8+Qwembw9hlLTJOltyJQ
EDHsIfV4BD1zeMMyZTbJ07OAV7dl5N+R9CwDBevro8cdHU1vDbyAF5Mmj6Fn
Bc8sVOPBWHrrsK9j5uisHUfPGl7Tjzk/x9OzgXfn/IKDE+jZwjtkZTxemd5G
eGsHmd2aRM8OnkqB5UpVevaBQviffdZfJ9NzgFc4ZXPgFHpb4R2v3TZSg54j
vM0xu65Ppbcd3jQT9yVa9Jzg9RL1+ziNnjO80hshntPpucA763h4qC69XfCc
x0RfmkHPFd7csrgFs+jthTfgQMK72fTc4L2be2H3XHru2NfU1vT+8+h5wHNP
uXFuPj0veIbrbs/Wp+cDb7j0g5cL6PnC+/Rf0baF9PzhZXo8721ILyBQaArQ
KD+5mF4QPLO699OM6YXAGxtb93gJvVD0qXnp101L6R2Al9er9a8pvTB4h7L/
HF1O7xC8tdt7qK2gFw5PVVG8YCW9CHgdrwasW0UvEt6jsKFtFvSi4B2fJ39o
Nb1o7P/mtrFKVvSOw9O+qHx7Lb0YeL2t1c3X04uF92LI9G/W9OLgnS2cHbSB
3il4zl76ozbSi0fvBE2jzE30zsAbWL/MZDO9BHiVcRZ19vQS4aUuW++1hV4S
PHcxOxlHesnwFuc4pm2jlwJP1snFYAe9i/Dqx+2rdKKXCi+z3Md1J700eIGH
ggfsopcOb4XeoaTd9K7AU/wdNWcPvQzs/4/U2LK99K7By7M5u30fvUx4h2VS
xDzoZcFbV3T5lCe9bHiTfTK1venlwOvUuvXEh14u+v6oId/Oj95teDGnHnX5
08uDZ2/2LDqQ3l30brr4a7VgevnwxG5VFoTQuw/vhfPHdfvpFWD/E5Qa2w7Q
ewhv59sfhw7SK4Q3L7xd6TC9InhSC0TuhNMrhlfZLrbqCL0n8C6l9f8eSa8E
vfOwHRJ8lN4zeEbD5UYfo1cKb8TjMTeO03sBr9534tIT9Mrg3dCe8imW3mt4
QV+meZ+kVw5vZfysYafpvYU3bqXe5Xh6FfB+SCxeeJZeJby7t03fJ9Crghfu
smrPOXrV8NZPXDfwPL0a7L/au43nk+nVwuuM2Dr3Ar06eEUGO19dpFcP70TH
3h2X6DXAc0j37nOZ3hd4OpuCTqfTa0TfxUYcnH6V3jd4L59EPs2g1wQv0f/E
5uv0mtE7F50z/zLptcCb//X8sSx6rfCkzqZNuUmvDfv63vz6fzn0fsNL65e7
/ha9dnieefd+3abXAc94d+HhPHqd8EZMKplwj14XvIbKsjv59ESCBOusyHer
HtDrESSoBy+q/V5ATzRIEDH/+zn4Ib1eQULJuKvNox/REwsSwlvsft8ooicO
757cv6WP6UnAiyjpXf+EXj941oGSPiX0JOGpzZAe/pzeAHh/v8mml9KTglec
oLDoJb1B8GItJlSV0ZMOEpoc+qvtfU1vCDyde1pSb+jJwOuzZ2byW3rD4ZWp
zBfe0ZOFd65q0etKenLwXI4udaqiJx8k5M1fbC7+gd4oeIP+WcXX0FOAV5Vh
q/OR3pggQeGy/ZaSOnqK8DxHOtvX0xsHz/j5HpHP9JSCBB+5YK/jX+hNhPd5
ZqD6V3rK8LKbDjz8Rk8FXvC5I9ZN9FThma+O+d1MTw3e+IHx4S301IME09b8
pIk/6WnAy997Ka+Nnia8iMnXLH7T04Jn/eFmUzs9bXhTjt0N6aCnA6/L6KHC
X3q68B6LPM3qojcTXuz1l6Yi03n/wduypaK+x3Tef/B0R9f4iE7/vyfAE3/R
MLz3dN5/8F6FNKWLTef9FyRUnZv9a5E4PX14u378rZKgZwBP73wvt370FsEb
bNVvUH96hvCqpQanDKBnBO/yg+HzpOgZBwnpXvtGlw+iZwJvyRQlZ2l6pvDk
a1UlhtJbFiRIfTmueUaGnhm87CUzdIfTWwEvpOe8Z7L0zIMEp1U3FjrI0bOA
p+Ro0mMkPUt4PxVWxoyitwZe/ss1Ggr0rOAd2b+hcAy9dfBs5jrYKNKzDhIE
9dYd7ePo2cD7l+waoUTPFt7jtZ7KE+lthBc3OOCuMj07eFv/22+pQs8e3gyP
iGZVeg7wJDSOh6rR2wrv1cdTY9TpOcJLOnEuW4Pedni7l6Yu06TnBE+/V0aD
Fj1neNLZ2b7a9FzgVW/Lk9Whtwte+tj/rujSc4Xn/eqx4Ux6e+GZhL2onkXP
Dd7IeW/d5tBzx/5/+Vk9SKDnAe/mhfqUefS84IWu/z5Pj54PPIshbeX69HzR
pwmFnc4G9Pzh/fQU7buIXkCQEH9/at+zhvSC4EV+kpphRC8E3oa4Yc+N6YXC
01g2aosJvQPw/vUe39OUXhi8JzdVTiyjdwj7f3LH1Klm9MLhOY7TfbSCXgS8
meVzN5jTi4Qnccjgzyp6UfBez19yxJJeNLzzv8wmraF3HL1zTV19z4peDLwF
Njar19GLhSctY/9jPb04eB8ebd9vQ+8UvCveu8fa0ouH56PlcXMjvTPwljb4
LbejlwBv5KnQz5vpJcJrXB7u50AvCV5On2MjttJLhrc/9+RVR3op8CydExdv
p3cR+z9B6eKHHfRS4bW9ubLPmV4avAeHswa70EuHF6V/58Iuelfg2bY/mO9K
LwOeRlrxmz30rqHvIralO93oZcJ7OuxNX3d6WfBOFVed9aCXjd45+n6a4UUv
B95M7W/Pvenlwuv7pXWLL73b2P/y0x09/enlwUte0TM2gN5deK4SEppB9PLh
Lbg9sCiY3n14Q1xkbEPpFcCrmTCyYz+9h+jd1QrFyDB6hfB8IiapHKJXBG+p
gUb+YXrF8EZ1TF8TQe8JvK+X57QcoVcCL3fjggNR9J7B2y9rrBhNrxSe5ZPl
OcfovYA30d/SLIZeGbxf062/nKD3Gl5Bo51/HL1yeFFntsmdovcW+2prvivj
NL0KeFP7uRudoVcJr0eeb81ZelXwSnaFuCfSq4Z3SvmwdBK9GnjbKo9ePE+v
Fn2fFRmnl0KvDl6/RQlvL9Crh/emM8UllV4D+pR8Jb1fGr0v8PbY3Ui4TK8R
noHc7ZlX6H3Dvg4tuV96lV4TvNqAoq3X6DXDu6r7XDSTXgs832+vY2/Qa4Vn
mvBeM5teG7zRFnVFN+n9Ru++SX61zaXXDi/3bkvHLXod8A64/om8Q68T3mqV
Hqp36XXBU67qc/8ePZFgQep31ACr+/R6BAtVBYZDWx/QEw0W0o92yYX9R69X
sOCzMWPsuEJ6YsGCoGmvnPuInji8niPVVxTTk4BX8ky78TG9fsFC/Omg2QFP
6UnC2z5TX/4ZvQHwZjctvvacnhQ8yXPLjF/QGwTvjaVF7Ut60vBSBqz3eEVv
SLDgtDd/05ByejLwFu51TH1Dbzg8mcku+hX0ZIOFktpqt4p39OTgZUT77HpP
Tx6en1GwZDW9UcGC+jKRQ4kf6CnAU7geNauW3hh43xxiX3ykpwjv1qizjp/o
jYMXVprcq4GeErw1IZfjPtObGCyITJqdqdVITxne7+bc4q/0VOD9l5S/8Ts9
VXjRax51NtFTg7dJ6lnUD3rq8LQevFJtpacBr+e+yvs/6WnCe6b20eoXPS14
8TVfWn/T04a34/iPsD/0dODNWdI+rpOeLjzJniK3/tKbCe9tptjKf933H7wL
W/t/FdHh/QfPTWFIYE+d/3sCvEUvR4zspcP7D57M/jHXe+vw/gsWwj/Ombik
jw7vP3jXWtQ+itMzgOefPM2zL71F8JavnTVUkp5hsJCnMFjvUn96RvC+Fxgu
GEjPOFiwvu1u+k6Kngm8g+qrdg+mZwrP6uPa/kPoLYM36cTGc0PpmcFrN9k6
exi9FfAeiu58OZyeebCgcCxr77YR9Czg2W3z7i1PzxKe1tigkyPprYEn+ips
2mh6VvCeH4h8rEBvHbwzwolNY+lZBwtNO37G/1WkZwNvzoXzR8fTs4XXf33a
5An0NsKrkL7+YCI9O3gXH+asnUTPHp6b572fKvQc4C2aWnhwMr2t8IZ9ejp+
Cj1HeHWxZbfU6W2Hd9303cqp9Jzg+feu/apJzxne8pufA6fRc8H+j9nRPHI6
vV3wmhR/X9eh5wrvzuuuJTPo7YV38GDvupn03OBZzZf0mk3PHZ7Kr8Eyc+l5
BAumfy7Kpgn0vOAVWisYzKfnA+/Y0AmVevR80Tu7R5NdF9DzhzfNW2vAQnoB
8HppzUxaRC8I+19aP2/OYnoh8M6cXFRmRC8UntPypduX0DsAb24fc7Gl9MLg
Dci1OmVK7xC8d0622svphaN3F8dveWJGLwLevjdOdivpRcIzPLyny5xeFLzh
+l7RFvSi4X36HaC2mt5xeNcvHShYQy8GXsCGI+vW0ouFZzYspm0dvTh4Y4tP
H7Kmdwpes0+S0gZ68fDuTLt025beGXiHPmeYb6KXgH1de/rmNzt6ifBUV9wN
sqeXBK9D/OGoLfSS4RXeepK5lV4KvOM7X5pso3cR3uYJFXXb6aWi79oVH7yc
6KXB6x3RILOTXjq80gVNaS70rqBPZ/+0GeymlwHP+fLfSld61+AJG3vt2Usv
E/s6ULbfwH30suC9ezzovDu9bHipfsPnetLLgec+ffQrL3q58BY3jt/hQ+82
PNkzqn386OWhd59Wap72p3cXXmbfGdMD6eXDC7wjPA2idx/eil0LN4fQK4Cn
qGzyL5TeQ3jN71YcO0CvEF7ekTVTDtIrgnd44Yb/DtErhreu0359OL0n8CZf
2fErgl4JvI5Nrocj6T2D92iE54Sj9EqxrzFP/e9E03sBzz5g/6rj9MrgTdeN
+B5D7zW83t+OBcfSK4f34uyp0SfpvYWXsOrcjVP0KtDjnZKpS+PpVcKbd/fq
pzP0quANdM32TqBXjT5VTsobdo5eDbxL7wsuJ9GrhecR9XhhMr067Otiwxfv
U+jVw5PterPnIr0GePVXqwdeovcF3o3N9efT6DXCC5L/Pjed3jd4K579fHWF
XhP6pBjUuSODXjO8HzNExa/Ta4F397tEfCa9VnjhiVI6WfTa4K2zHFaSTe83
vMkDRtnn0GuH13lvnMgteh3wivaoHL9NrxPeCdWp6nn0uuDZV+s8vEtPJETI
mx491zqfXo8QIVzMyOD3fXqiIYLpy3/G4QX0eoUI6onXzCY+pCcWIjTtdFid
V0hPHN68UTYWRfQk4EmVbm4qptcP3vvg7SFP6EmGCApps3YrlNAbAM+j2T3r
GT0peEZJfqal9AaFCD4j1oTWv6AnDa9hYLhPGb0h8LLuRw9/TU8GXpDbyfRy
esPhrVRLXPSWniy8cTUXqiroycFrOXZlbyU9eXj3jLOkquiNChGqwnvcSa6m
pwBvfeYDoYbeGHhqW4tf19JThPd3dKlTHb1x8IpflIvX01OCdyK0Kr6B3sQQ
Id1hziedL/SU4em0fC1ppKcCr09yq/03eqrwyqw6RJroqcFLHNQzppmeOjyX
AnGNFnoa8Oa7DyxspacJb5C6jE0bPS14VbXy7b/oacNLi1GMaKenA8/TZJJy
Bz1deMaiGnc76c0MEQS5rOmWXfRmwfvsOKf5X/f9By9rzILQHrr/9wR4wWVG
Y0R1ef/BMz+wPLuXLu8/eOMFy2Viurz/QgSp1tb1DX10ef/Bu5di5ytBbxG8
iHXbZPvRMwwRnKyld12RpGcEb8rDfYYD6BnD6/LwrR5IzyREKCnWCHEbRM8U
XmzdoUHS9JbB2xJ7NGUIPTN4uqZx82TorYAn3juhfBg9c3hl2SnOsvQsQoT4
c9vTJeToWcLbpXjjjDy9NfD0Xt/SHUXPCt7gg/efjaa3Dl7VvCKHMfSs4V1u
e9ZDkZ4NPK+Lr2PG0bOFt8T6vYYSvY3w5IfWFU6gZwfvc2GjjTI9e3jZXi3t
k+g5wAvR/BOhSm8r9n9VvcgkNXqO8JRO9rk3hd52eK3LBqzWoOcEL19s6I+p
9JzhHcmR269FzwWejdPYsdr0doUIIurjlW9Op+cKr6t8ynJdenvhPT6k/XkG
PbcQwTpOb7bfLHru8Lb+1hsxh54HvBmXFl+dS88L+yq+YdniefR84L2Ssfgw
n54vvKSidfv06fnD2+2zabABvQB4+tMcLyykFwRv8Oed8w3phaB31afc3iym
Fwov3cxnpzG9A/C8xYP7mtALg2dy6+DZpfQOwZPfGTVjGb1weF+UYp8vpxcB
7+bbM1tW0IuEFxqe3NOcXhQ8iwWXT6yiFw1P6c/1qZb0jsP7mZb7aDW9GHj3
bfM3WNGLxb5GDn/0Zy29OHgbHpccWU/vFDx1v1eTbOjFw/unXXlvA70z8J58
qV29kV4CvJPxX35sopeIHm9d+WP/ZnpJ8Gb0bR/rQC8ZnsSdfze30EtBn167
iJk50rsI7/zE/l+20UuFt/udtP8OemnYV/0jI+Sc6aXDk144JmMnvSvwPnRM
MNpFLwPelXS1mt30rsHz3jTNfQ+9THgmI2ZJu9HLQp9GPp1/cR+9bHiN/oZ6
HvRy4OXomL71pJcLL/SruYs3vdvwLM6u7edLLw/ehFUbE/zo3YXX1m/rzAB6
+fAe5DmXBtK7Dy9y996twfQK4G2Y5C0aSu8hPI33gbH76RXCE4kK0wyjV4R9
fboosuggvWJ4J//G2B6m9wSe49X4jnB6JfBmbj4feYTeM3h95dNUouiVwisv
uZZ/lN4L9Ph8YM6aY/TK4LnOuNdynN5reAu+Pzxwgl45+jQk8aliHL238Gos
ynJO0quAd6X/O7PT9Cqxrz73ar7E06uCt3TPZ/+z9KrhjVJtlkukVwPva9Wv
jHP0auHlHO0yOk+vDt7+xb1rk+nVw7P818/jAr0GeBOvDR6SSu8LvF/2sqmX
6DXCezBSQf8yvW/wop4rVaTTa0LvbIMn77pKrxne1FlaktfotcDr0Twj8Tq9
VnhPz82bdYNeG7xTqxe9yKL3PxrtPirH/GvjcEhKIUqKUCRRiJLSi4tCFEKI
kpBEIUqiJAq9111JSEohSookJFESQkiKJIQiCSFKnvP5zdmfn7VmjjWz5v5u
e19rWuFt6DPP9Qq93/CMihaJ59Frgye93S7+Gr12eFVjVutep9cBL/XNutIC
emJBgtu2g26ON+l1CRKEGZbb2gvpdQsSxPp38Y25RU88SKh9ezFA6zY9iSAh
8fz6kKISepLwdg+NsrtLTwqeVXlcyz160vCGBh0LvU9PJkgo+2x8Uu0hvd7w
8r6l55XRk4UXcuqC9WN6fYME7WV2Vxqf0JODN6rvjYCn9OTh/bp1W/kZPYUg
IbJ4x4PsSnqK8A6Me2r5nJ4SPMe6F3Uv6A2Cp3Pojc9LesrwusxtkH9Fbwi8
sq7N6bX0VIIEh2OXfpq9oacKb6Pr3+q39IbDM1YV3/qOnho86YqevT7QU4f3
PLjviXp6GvBOT1E0/khvFDyvliFPP9HThDfz9IgNn+lpwetvr9X9C72x8Or6
6RxtpqcN78Jtg4nf6I2Ht8dHuP+dnk6Q0Gw1fuaaH/R04Q19P+fvT3p68JoO
Wx9opacP79o82zF/6BnACxVfdauNniG8ZZedl/+lZxQkFIzauOlHBz0TeK3D
PMPEJv/nCfBuP/MZ0XUy978gQSU21P9at8nc/+A5Tg1e1H0y9z94Oj8jP0tM
5v4XJPh1TTu4V5KeObxHKxIG96Q3C16i/ImL0vQs4G28kzanFz1LeMa+59/1
pjcXnozO5Z2y9KyCBKsXH67370dvPrwz8cVn5egthOc1//70/vSs4c2UKH+p
QG8xPIWrz7cq0rOB927T614D6S2Fl61Wf2IQPVt4e6qajAfTs4M3P/zH0yH0
7OGpmLZvUKHnAO/Lr64Sw+ithJefLpUwnN5qvNfQlbJ6I+g5wrNVGPBAnZ4T
vNH3Bjtp0HOG93uXWscoeuvglehqxmrSc4EX2zB+7Bh6rkFC5poE/eKx9DbC
0104xV6bnhu8bpIzfo6ntzlIkH2cZxmuQ88dXuLmheoT6XnA26S+LF+Pnife
q8kLh8X69Lzg9Ypc22RAbzu8arON+wzpecM789tjiDE9H3jbM7xzTOj5wjNf
vWeuQM8P82mAYtD7qfR2w3tfGuFrSs8fXvbuWIXp9ALg+esdzZhBbx+8BZ+S
Z5jTC4SnmnimZha9IHjN1lmeFvRC4OVL5faeQy8UXlh+/sm59MLh2bnfMrGi
FwlPU6O0Yj49Ebw/1Y83LqQXjfdaIqqSWEQvBt7BGbUJi+nFwnNqe69nQy8O
3sTMzw+W0jsET3xNi5MtvSPwHiu1ddjRi8c8TnrQ5aA9vQR4bv6S4xzoJcKb
ot/n9kp6SZhPvT/3X7GaXjK86iTlX470UuClLR4e4UTvJN7rDunRI53ppcKb
VaB9fR290/AUt05a4kIvDd77USZfXOmlw7tYY7Z/I70MeAHRFkPd6GViPi00
X3BpM70seMP+2sxzp3cBXnPWig8e9LLhXXdy2uVJLwde+KANA7zo5cJbXuZ+
bju9y/C09u6Y6U3vKrw/Brtf+dDLg3enaf82X3r58OKSw/v40SuAt9bmwKnd
9G7A0+sVP8WfXiE88ZvHnwXQK4L3xPP0pn30iuEd18zsEUivBN7m2pxjQfTu
wBMOXJsUQu8e3n/v2UUPQ+mVwnvZcXdtOL0H8NIvPPoXQa8Mnrdz5UERvUfw
Zg9+NS6a3hN4io/f3Y6hV475/mFf44pYehXwcgy//zpIrxLe3ubfEYfoVWHe
LTwhpnGE3gt4w5b1KIinVw3va+/eNgn0avD+Cwrlm4/Rq4UX4TUoMInea3jL
xwxTSab3Fp7WG43cFHp18Npix1mdpPce3l0LvfpT9Oox7w6JGfudptcAb+1F
U8U0ep/g6a2fnZlOrxFe96HzzTPoNcErf7Kk9hy9ZnjJgfZeWfS+wttsvEb2
Ar3v8IRvLqnZ9Frg9Tm1Rcih9xNeje32ykv0WuGdlfVzu0zvNzzvW/skr9Jr
w/ufvSMsMY9eOzylcTH6+fQ64NW/PVx2nZ5YsKByKS7J+Qa9LsFC8945qWKF
9LoFC5nWXc/FFdETDxb8hl+6qF1MTyJYsPrmkldym54kvBsqhQ536EkFC7UR
T++03qUnDc8+uCyylJ4MvDFTnmk8oNc7WBDav78seEhPFt691DqbR/T6wju0
/FPzY3py8Jz7fQsspycPb9LtVpUKegrwJHz+5T6jpxgsyD7VlphfRU8JXvI7
mYbn9AbB23JYbnc1PWV4U+cNVKqhNwSerLhq1it6KvBe5Y6c9ZqeKryzG8a+
fkNvODyfYRO319FTg2fxzLDve3rq8AaGTjv9gZ4GvAZh1tQGeqPgXfoxr+oj
Pc1gIXHfmcWbG+lpwVu0YrlUE72x8NTkHZO+0NOG971kvcFXeuPh3di5+dE3
ejrwIid4rWuhpxssuK344NvlJz09eGPj9x76RU8f3l+r0PG/6RkEC2X3ukff
+UPPEN7hK4dWttMzgrduU+Lvv/RMggVtfbVTon+d+x+8HlVnR3Ux5P4H72lY
9o2uhtz/4KVMu7pU3JD7Hzz3Xze+djfk/gdvWnpJUA/D/zzzYEGs78qHqlL0
ZsF71b/ick96FvAy7lbPl6FnCW/nrrcNvejNhWep+3F3H3pW8AY1NCv1pTcf
XsPRX1n96C2El7ugY5Y8PWt4+3t0f9Of3mJ4i/OkdwygZwNvxOZ+/ZToLYX3
fYTSmYH0bIOFyJvPh05TpmcHTxSh/nwwPXt4DmZjtgyl5wBv3G+dnqr0VsL7
e3by8WH0VsMrXTV1sho9x2DB4cgA88cj6DnBW186d/1Ies7wDHYv6jqK3rpg
oaCHnt3h0fRc4FV8XDVBi54rvBPH1t0dQ28j3quHtduqcfTc4JlKbfujTW8z
vL75O6Mm0HOHV7slYLQuPQ9450aG3JxIzxOeb7Vo2SR6XphPlqK4b/r0tsMb
NONY8GR63vA+/jkxzIieD7zL59KvGNPzhRfoeGHBFHp+8BYrXfko0NsNb8SD
gj3T6PnDa9lze6AZvQB4hZMenJ9Obx+8qMby2TPpBcJzSHrxxpxeELxxi9/s
mE0vBF5Hz4Z+lvRC4d2//uXMHHrh8OI9fk6bRy8S3vpRf59b0RPBM6jp5r6A
XjTev2R0T2lrejHwns3sm7yIXiy8k+0DDJfQi4PnkTXkiQ29Q5hPpk4jXJbR
OwKv3yCtbnb04jHfXz+ccGQ5vQR4mQEGOivoJcLzNRDuOdBLgjenacbqVfSS
4Sknz2lbTS8F3qcl1tFr6J3E+78iY6u5ll4qvMAbKwud6Z2Gt8TT2XY9vTR4
6pqbvrvQS4f349XWkA30MuAVxfgM30QvE/Muapb/VTd6WfBWdgQt3ELvAjzt
C5Gf3Ollw/u39qD/Vno58B4oJwzaRi8XXvyjlAte9C7Dc9mXZrGD3lV4kw3P
v/WmlwdPqjnXeye9fHiVKdfldtErgHdyaXGaH70b8Lb2vm+6h14h3r9Z4ZMX
/vSK4Ml5PXffS68Y3hut19L76ZXAy3z9ITmQ3h14u2KbDIPp3YM31+LHkxB6
pZjvg8XaXcLoPYDXmN1VPIJeGbwr66TiI+k9wrwLGiKrG0XvCTybJwql0fTK
4Y0MHOx4gF4F3v9PI7X2WHqV8Iq+jo6Jo1cFL/rkeK3D9F7AW2WrX3SEXjW8
8bJT7I7Sq4Endmt6SwK9Wsy7B9stQxPpvYZ3dOxCteP03sJzfbs0L5leHTzD
OAfrE/Tew+s5Z23jSXr18Cq7bAxIpdcA71SOh/IZep/gebp4Z6fRa4Q3XWWP
5Vl6TfDknwbWZdBrhvcmKMInk95XeFkmsfLn6X3He/X7Hp9+gV4LvHmpyWYX
6f2EN2T5meoceq3wGvtmeeTS+w3vavElmSv02uAFe+enXKXXjvm+VPuW0TV6
HfA03t0rz6cnFiKU/Tz02LWAXpcQIfLW3Crxm/S6hQgOMd1q4wvpiYcI2qtz
3+veoicRIjSP3/C5tJieJDyxYS2OJfSk4D2s+NN+h540vISQLgfu0ZOBt0GQ
HHOfXm94hj9633pATzZEKOh5pv/yMnp94VXZK/94RE8OXqrc8LAn9OThbSsZ
NeIpPQV403dqX6ugpwhPfsKkRZX0lOC9fW/8uYreIHjnj5jtfUFPGd5uK4vB
L+kNgTev+4KLNfRU4A25YjOnlp4qvM8bV7x7TW94iGCVN9xp51t6avBCKl37
v6OnDm9pmPvZ9/Q04GlM2zG9nt4oeL9++r1soKcJrzht/9ZP9LRCBJUDDuG9
PtMbC291/wMnmuhpw5tw94hxM73xIYJfl13Hn36lpwOvTOf0hu/0dOEdqz/X
/Qc9vRChdsPRnKM/6enDM1pwbWIrPQN40j2K7v+mZwjv+dW7a9roGcE77fbo
bzs9E3jbRlQe6KAnhAiZM57XjBEz4v4Hr3/Eu1tdjLj/waszbVzezYj7H7wL
rd9+iBtx/4O3++zvMAmj/zxzeFarxNQl6c2CN3RAj3wpehbwmu71WixNzxLe
NT/5Jhl6c+GFTBy0rzc9K3jLPqoOkaU3H96oYxo5fektDBGE1oXj5srRs4Z3
W1LvvTy9xfAOXDPyVaBnA89xi6mCIr2l8HRGzs5QomcLr2u11YxB9OxCBNlH
kUtqlOnZwzs23d5zCD0HeBv/OPZWobcyRHAzPudyUpXeangyjltMhtNzhPdC
cXuFGj0neKfv79qoTs8ZnteefRIa9NbBmzkpLGEUPRd4Co3Repr0XOG9Szz8
QIveRrz/C4uSnMbSc4O3p2dqxzh6m+HNv54RO56eOzwVj4tjdeh5wPuikVes
S88T3rWXN+316HmFCImhUXd+TqK3HZ7tzLJwA3re8Ea3V6gb0vOB9zvzZb4R
PV94t9fULTah5wcvduCnpin0dsNb8/Drvqn0/OHpBrQOMaUXAK+bwb8cM3r7
4D363H3eDHqB8BKPy3yYSS8I3qYlcrtm0QvB+zeRGTjAgl4ovF43VM5Z0guH
92LryJlz6UXCOzN67Kt59ETwtr/S3TafXjQ88xjDPgvpxYQIYgNmTTtlTS8W
3ru/5lMW04uDl31+3rMl9A5h3vmvXbxpKb0j8BYoL+9hSy8enuqj1cfs6CXg
/X/Zu36SPb1EePmTNz9cQS8JXtiXbWtX0kuGZ5fi+28VvRR4mkv3HnSkdxLe
716h45zopWLeldyMur2W3ml4B7cdWrGOXho8J63EX+vppcOb+PpkhCu9DHjd
Ys+O3EgvE97j2dnXN9HLgpf078qSzfQuwHPLvvFlC71seFPWlez3oJcDr9eQ
h0M96eXCq3789NI2epfhpe2vnred3lW8/x1Gbz/soJcHb9bXhl0+9PLhDTjZ
PMCXXgG898t+ndtF7wa8i306Zu6mVwgvoEi8dg+9Isz3BdulvQLoFcNTHdtP
dh+9EnjNbxRT99O7g3l3/eBQIYjePXjhluqVwfRK4dl1GeMWSu8B3qtmjo5k
OL0yeH/WT06MoPcI3p2hU/VF9J7AiyufWRZFrxyeU9Bc5xh6FfAmmiwSi6VX
iXkn/t027iC9KnhPTq3SPkTvBbzjdutKDtOrhufW180hnl4NvCnFnq1H6dXC
6+29M/IYvdfwXo4L0Eii9xZeel1wwXF6dfB2HBLZpNB7D2/W3LjmE/Tq4Sl2
OxZ4il4DvA+XTqicpvcJ7zXHNT33DL1GeAGqF6zS6TXBW1hxuf4svWZ4w0IK
/M7R+wrv65Tbiln0vsMraLmfeZ5eC+Zx+Oly82x6P+Ett39Re5FeKzwtuTde
l+j9xnxqu10ve5leG7y7Pl9Sr9Brhxc3/qeQR68D73Xt+/bKa/TEQgU/vSPd
Nl+n1yVUELpb9ZS6Qa9bqCBbLt436SY98VCh9vjlAQZF9CRChcTNG4c8ukVP
MlRwE4aPWHebnhS8PpWaXe7Qk4ZXEzrh0F16MvDSpxqML6XXG573zyl37tOT
hTc7bcbKh/T6wlNymPO7jJ4cvHp5a9FjevLwcu4sG1VOTwHeXt+VN57SU4Rn
reO89Bk9JXjD6zd+raQ3KFQQ+xa/Neg5PWV4BfN9VKvpDYEXIeF/+SU9FXj2
V4Pmv6KnCm+MW2RDLb3h8NrVDu5+Q08tVCi7W3VUqY6eOrxD4SlZ7+hpwHM2
TZv1gd6oUEF7UmvW63p6mvAkzuZu/0hPC175yut9G+mNDRUikxWKT3+mpw1v
y73SqV/ojYc31e9JVTM9HXiyE59v/kZPF15NQ61UCz09eGcTPiT9oKcPz2dh
k8EvegbwLCR/PGqlZwhv4LW2dX/oGcGr39y1azs9E3iX1KUO/6UnhAoO+170
mfCvc/+DtyhS4a6YMfc/eGrTB6/qasz9D96338P/dDPm/gfvRsboqO7G/3nm
8CJXjx/dw5j7H7wVivo3JelZwBt732RZT3qW8Np3T/8mTW8uvHt6lsG96FnB
O/xpwbA+9ObDW5e49IosvYWhQvOkRQ4L+tGzhifRc+1HOXqL4T3N37CnPz0b
eCnuHgMH0FsKz13D+7wiPVt4U1/unj2Qnl2oUCAbFfhmED17eK9mROwYTM8B
XkbbgX5D6a0MFVR2ZsafUaG3Gp7FmuRpw+g5whs48Mzz4fSc8P4bHmRuGUHP
GV6u/6WeI+mtg7dfP/+4Bj0XeIs+F00eTc8Vntrxe4816W2E933x4/Vj6LmF
ClY3pau6jqO3GZ6o4NVhbXru8FZsfT9hAj0PeGNHf76rQ88T3t+a76sm0vOC
Vxr9548eve3wjph3idan5w1v3d8empPp+cDTP9+70JCeL7wea/vbGtPzg1cx
SPm7Cb3d8E6UDQsR6Pnj/bvvHTV8Gr0AeNMma181pbcPXt8vegun0wuEV5ts
/GkGvSB452zM/M3phcDb2cti0Gx6oaFCpuXN+Rcs6IXDG7TNxmIOvUh4HzVX
vJ1LT4R5d7l2jbcVvWh4+w+4yi2gFwNv8Wz3tIX0YvFeR/zbbrqIXhy8lgt+
LxbTOwSv0Hm/uw29I/BEg8Oll9GLh+fwOCbZll4CvHH7jxgup5eIeddhePyJ
Pb0kePebU10c6CXDO3LiXLdV9FLgrV+Wc2Q1vZPwDPpc01lDLxWeZFHhPSd6
p+E987q72pleGrwTYx61raOXDs/jzbNoF3oZ8EwP1mhuoJcJr5/lu8KN9LLg
vRZrtHWjdwHv9dzFb98308uG57v+d4g7vRx4c4aKqW2llwtPuVwiz5PeZXif
AntZe9G7Cu+ysXzjdnp5mO+B3wYGeNPLh7fklKryTnoF8NTtNLJ96d3AfPoh
O87Sj14hvMJbE+t20yuCF7XDyMefXjHe68pxpvJ76ZXA066blb6P3h14/+Ks
zALp3YN3f86S6iB6pfDiu9p7hNB7AM/lkqNMGL0yzKfJri4p4fQewZNS3WIU
Se8JvGdPvcpF9MrhnQze5RpNrwLe1in7xA/Qq4Rn1hIaH0uvCp7c6WjdOHov
4L1efrj0EL1qeJn9khyP0KuBt+v2qfZ4erXw5vpkxCTQew1v8PiLWon03uK9
fnp3tSiJXh28K4dv2iXTew8vaN6dlhR69fBsxMtCT9JrgDfycoVaKr1P8H5s
eJl3ml4j5nHRsDrrNHpN8KKffWxMp9cMb1Xo14AMel8xn7Sntipn0vsO79+P
juwsei3wHpzpPucCvZ94r0dXyLzLptcKz1VebmcOvd/wJt9R6p9Lrw2elK/K
2cv02uFVThg5/Sq9DninPox5mUdPLExQ8YzX3ZpPr0uY0Gw237BXAb1uYUKB
nMS0EzfoiYcJkW+umBsX0pMIE6yyNs17WkRPEp6f2uINxfSk4M2tsuteQk8a
3uDw1Ufv0JOB1zht/cR79HrDu/rL7X4pPVl4wenb1jyg1xeezUrfvw/pycEb
qbD3wCN68vB+3g0Z84SeArxbu6JuldNThBeje2h5BT0leKsajv14Rm9QmJA5
PuFkWBU9ZXhiC8+OeEFvCLyHPbKvVdNTgZeQd2VRDT1VeK6bb3x+RW84PEP1
kr2v6amFCX49XzwY/JaeOryqiKcX6+hpwEs1q57znt6oMKHW8/ebdx/oacKb
ntGws4GeFjz51c39P9EbGyYIbwf8OttITxve+dK/05vojYfnt1u85gs9HXjz
9KQ9v9LThTfkU9/e3+npwft8TPFkCz39MEE2z3qoyU96BvCCpdQrftEzhLc0
X2vjb3pG8DTcdSTa6JnA+zVyckI7PQFecbWg10FvKrwY0cwH/zr3P3irZ8x1
6mLC/Q/ehDbrjq4m3P/gdcm0jRU3+c8zh1fmuGqshAn3P3gJSuuKe5hw/wsT
Ejc82GQvRc8SnpG/58+e9ObCk9bfGS5Dzwre80Z/9d705sNLTQrO70NvIbxt
i0WL+9KzDhPcZkjHNfWjtxhe/4KEffL0bODVeZwYokBvaZhQdn5Ues4Aerbw
dtecn6tEzw6eVfTl9wPp2YcJ2kPNC3yV6TnAa2ovVhhCbyW8vKz7GUPprYYX
4lQ+Q5WeI7xlg17UDKPnBG9U2WtPNXrOYYJYa0B9b3V66+AVG3w5OZKeC7wD
TT9MRtFzheeY3F4xmt5GeDo23TZp0XOD17VXzx5j6W2GV3ZD9tg4eu7wjnkO
mDSenge8jZpDHk6g5wnPuFZtrS49L3gyBzT/TaS3Hd7zWRMOTqLnjfd6ukN/
nAE9H3heF6bcnkzPF95M5xkrjOj5wVMYPOeXMb3d8OoeLYyYQs8f3oV9y0ZO
pRcQJjjsMVx5fRq9ffDmN69dYkYvEJ7KiY1fptMLwnxqWrp1/0x6IfCu9fYZ
OoteKLzQwj2XZtMLx3u19QqaZ0kvEt7oMZEf5tATwWt9HbtrHr1oeLdjjw6Y
Ty8GXqxFyrkF9GLhrRFLm2lNLw7zSedi1qtF9A7B67o+d9sSekfgPRpyvc9S
evHwEp/cOrWMXgK8TYGlU+zoJcIzNn7ybDm9JHgy36o2raCXDO/FydoeK+ml
wDtj++HYKnon4W2XbZrkSC8V3sxbLQ/X0DsNT2FH29q19NLwXt+N7Sq2jl46
vOy3knHr6WXA84/ro+1KLxPe/DkKJRvoZcFT6TrYYRO9C/C+5AxvdaOXjXmc
7zI6cgu9HHhhKuM1POjlwrN9OqlgK73LmE+jg01sttG7Cu+3yfRmL3p58Eq+
WwTuoJeP93owdYGKD70CeGuWL83dSe8GPN1+Dla76BXC63bbqd6PXhG8x94b
/PbQK4aXpO2hGECvBPNp07sdmXvp3YFncni3+X569+D1mhdYG0ivFF51twiv
YHoP4KXlHpANpVcGb/uG+NQweo/gmQ9LFiLoPYE34Nnpykh65fDeh2S6RdGr
gHdRuCQZQ68Snv+Pa4kH6FXBW3CmSP8gvRd4r6or7pXF0auG1yz32PkwvRp4
10sqxeLp1cIL2/kq7ii91/DsJrzXPkbvLTzND40lifTq4P058t3hOL338O5Y
/WlNplcP72D3LqIT9Bown5yu9Bh1it4neBM39b6RSq8R811crf/SM/Sa4D2p
HPQ1jV4zvKSwYUFn6X2F5zZtlOo5et/hTfk17nImvRZ4vdP15p+n9xPv/6WD
ccMFeq3w0vqb7b5I7ze8HXdnK12i1wZv1q75Wbn02uEp6trMukKvA96HevvX
V+mJhQtlF4+u2X6NXpdwITFggWvf6/S6hQtuC3u4ny6gJx4uCMPytk+9SU8i
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
wH58vGrx7W+d9z08Kd1l0d/pHYS3OXz5ipbOex9eZb2D5g966LIppo6/fnTe
//BOHV1b+JPeYXi9W9dH/KJ3BJ7ngo22rfTi4b1M3zzyd+f3AXhmPbZ+/03v
KLz0lV7X/3R+L8C+LZfnHdJG7xg8b4VdS9o7vx/Ae+O2Z/hfeuiSWff2fvnb
+T0BXtaIoKsd9I7DU/QL3f+PXjL2z13PIxaKTf3PS4H3QTd6aJep/N4Ab25E
7Cf0/7wT8HIaDl3qOpXfH+ANNjvq323qf94peAEJifPE6aVi325sTR7UnR66
ZOHCUx+60zsN7+rZMxck6J2BN0wyY1cPemnwglZlWUjSS4f3NS97gBQ9dInN
gNy3UvTORgpaBZuvnutJLyNSiBlZmu8tTe8cvHD1mzNl6GXC++l3S64XPXTR
8hclr3rRy4J3a2JpWm965+FpRT7c1ofehUihJfrjY1NZetnw2swq+vSlhy5a
dazqRV96F7G/3/1dfaofvRx4461r3eXoXYIXl/F2ijy93EjBTkzqg3R/euii
tas/PutP7zK8h9c+JyvQu4L9XU/x66YB9K7CO7qlxVCRXh687vd/9VCihy5w
Hdn2RIneNXjluzuODaSXD8+wuovrIHrXsX8e1+uur0yvAF5PkaT4YHrogs2f
pMsG08NirFY1vU/8EHo34QmJ/ZyH0iuEd+pPf10VekXYt/ssUhJTpYcu8Dyn
XKpK7xa8GimVuGH0iiOF0OmOwx2H07sNLz1fXVuNXgk8eaXR7Wr00Hne7mNK
RtC7A+/tfe0YdXp34c3W0HUYSe9epNCYtWeSlga9UnhKLye3atBD5/lNMika
Re8+vHrR1MjR9B7Am9doZqdJ7yG8nBnmGlr0yuANSbJo0aKHztvbNrdgDL1H
2N8/L1oQOpbeY3jWmYtsxtF7Au9qz6Vq2vTKIwXr4WvsmrXpofOCr6/IG0/v
KbxvSqsDJ9CrwP6+1MPJWofeM3gFD9ap6NKrhKcxakOjLj10boS/W+5EelXw
fr10D9Cj9xyevf42q0n0XmCfvRW1Q1mfXjW8MZ931uvTQ+fGzNydbUDvZaSg
3J4U4DeZXg281e37LQ3pvYJ3d3GIohG9WuzvE7LC64zooXMPSUdlGtN7Da+L
0wEfE3pvIoUA54I48yn03sJ7ODBeXqBXB2/S1mO1Aj10dsLD4+lT6b2DJzH6
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
npKydxq9X/CuJh32sKP3G/tiyJ/0Ifb0GuHtccuot6eHLmw4dfqqA70m3Nue
Hc/tcqT3B95N7/OznOj9had/9aKOM71m7Iv9mle+OtNDFzatyrvkQq8F3sIH
N7dPp9eKfVEw9M6MGfT+wTPccq+/Kz0FseCTUPbgkys9dEGr8ePzbvTaiAXD
JfuKt8yk11YsJD74/MJpFr12YqHZyOZVn9n0FOFJk998mE0PXdDu79uz7vTa
iwWD5TPfb5pDTwnek9PVdh70OsAzVantOZeesljwOuTzrXIuPXSB8rX6U570
OsIL7P1r/Tx6KmIh/sXqJpv59DrBm/iwWX0BPVV4R/QUyhfQQ+d33truhBe9
zvDWvFYKWUivC7yy8SpWi+h1FQuNVvs7d/WmpwbvRK3aK2966Hz1qRpHfeh1
Ewt66w/1Wr2Ynjq8t3/7WC6h1x2e7az+nXzpaYgFz8zMgS986aHze3UanOpH
rwe88MV6AUvp9RQLsR+u6Zsvo9cLnmOfUR2W09OElx085ulyeug8rUfjkvzp
9YYXOcx0+Qp6feB93moxfiW9vmKhYcYby3YB9LTgXTKxehRAD503MM5GEkiv
n1jQ3fllmm8Qvf7w6qY6jl1FbwC82Sku/1bR0xYL7teaXe+vpofOGzJ7dkIw
vYHw9p7x8F5DT0csRP/sNH/UWnqD4HkuWfh3LT1dePl5PndC6KFz9fv6xYXS
Gwwvbs3yBevoDYH359FK/fX0hoqFuoXDV/1eT08P3t3INTc30EPnGpaHxoTR
GyYWtBNNw+ZupDcc3r+48KGb6OnDW/J1y49N9AzEgttD2+3Xwumhc8el7twd
QW8EPFlL9OzN9EaKhShF99hBW+iNgrf8bNy3LfQM4T1VTbi8lR46x8xXvCOS
3mh4KddlrtvojYHXUevQgO30xoqF2sC1aZ+30zOCV1J09MIOeugcS/0TW6Po
jRMLWke3nXLeSc8YXpeKM3130RsPb41Z9sdd9EzEgsvr+Jxzu+mhc6y/XQ6P
pmcKL2PaNfs99MzEQmT3tBu99tIzh7e+9da7vfQs4FW63z0dQw+dNe1c4YZY
ehPgnelcNHUfvYnwNP2edt9Pz1IsVIffeF6+n54A76PWyxNx9NBZTiGvQ+Lp
TRILmucfV1gdoDcZXj+Dqq4H6VnBi9z+8dVBetZiwaG24tPRBHroLFfzr6sT
6U2Bd/nAd0sRPRuxEKFT19BJTG8qvJ12jS/E9GzhfU/7myqhh850/9caIKU3
DV7enLYWMnp28IZmtVeW07MXC1V7u3QsltNzgPfLTzU5iR46c97Nrv7J9BzF
gsatft1NDtFzgmcQ2lMxhZ4zvLgnvYtS6LmIBdu/Bv2kqfTQmYt2aPul0ZsO
797bQUaH6c0QC2GjLYYqHKHnCi/x4PDCI/Tc4Cl8H5F4lB46w9d+tE86vZnw
Hh02MjxGbxY8YwWT5mP0ZouFCpmHecFxeu7w2mdPjD9BD53h33WyVwa9OWJB
rXjpFIOT9DzgmefbNp6kNxdeSn+H/FP0PMWCtco659jT9NAZQU9neGbSmwev
dMQsvTP05sMTouY0nKG3AN7RSs+8s/S84HWd4BV9jh46Y22Ct3sWvYXw3nxf
optNb5FYCJ3isKwum543vIwjK3LP0/OBp9EmKOoCPXT6hrnBbjn0FsN7lx2i
fZHeEnh2ahtqL9LzFQtlZ5ZtyrlEzw9e71ubIy/TQ6dHDNjmkktvqVhQrV4X
pXWF3jJ4zsW7q6/QWw7v/MiYrKv0/MWC0H/n/ohr9NDp294dcMijtwLelwki
zev0VoqFYLdEadV1egHwLtcnZd6gFwhvkGNq2E166LRdR4/Y5tMLglff5rjG
LXqr4M3xPFlxi95qsVCSdz4z4za9YHh63bJC79BDp8Usv2BdQG+NWFD+feuS
2l16a+HN175adpdeCLxb66+n36MXKhYsRjzLD75PD50WP6pAKKS3Dl7zzvuq
D+itFwuB3lUPSx7Q2wDv3sQnaQ/phcEbI3oW+IgeOln0o8SiiN5GeG2cypQf
09sEzy+9vPgxvXCxUPyo7bvkJ/Qi4I2f98H/KT10svxCjUkxvc1iQVFJ/Yvi
M3pb4K3wryt6Rm8rvOLbP6TP6UWKBROLgb/9XtBDJ6du+GNUQm8bvE7PWxRK
6W0XC/6rDNs8KKW3A17pLkXRS3pR8Ca977D4FT20NN2y0+gyejvhqYm7tJTR
2wUvpKHb3df0douFojdOPQ68oRcNz+aY5sJyemjpyXZaIyro7RELCj3mD2iq
oLcXXliOzq239GLgvVMfsq+SXqxYMLJfMWzeO3po6dk7BsOq6O2D10fH8GcV
vf1iwW9z2Njr7+nFwat+brznA714eC6jzeZ8pIdOvLB7wuBqegfgDfggfK+m
dxDedsH6Sg29BLFQ+EU8decneonwZv60m/mZHjox19lpYC09Ee7jQcenf6ml
J4a3W3HmxS/0JPDq57tv+0pPij3gcXHu9G/00InXuy/oV0dPBk9v5aKaOnpy
7IHYgsXZ3+klwfuts3RzPb1keAs2+jv+oIeOv/0ioHcDvUPwRoxZ/b6BXgq8
A9Frz/ykl4o90Pxh3cZf9NLg+UzaOO03PXT8fUlEj0Z6h3Efj/m19W0jvSPw
xC47TjbROwqvzYld6/7QS8ceWNp+75S/9NDxRQv2dWumdwze+Evxr5vpHcce
SNJIPNZC7wQ8pQDJmlZ6GfBW3pVP+vf//z/cx88GpXRWsOf/HzyLTYdL0f/9
/8FLK0k/3Mae/3/YA53GZgS1tf/Py4S3es/pCe3s+f8H7+XHsx0V6Z3BfTxp
8vlnivTOwjsmvXioPb1z8NR+565QopeFPRA6Pc+0Az10bPmJm+2V6WXDs1G6
81iZ3nnsgVNe92Qd6V2A1+Pyg6Uq9HLgbezxeFwneujoqoDiNqr0LsKzv/fi
gSq9S/DO6b4SdaZ3GXugT/ibxV3o5cLbUvp2dFd66Oiase9butK7gvvYZW/1
XTV6V+HlVH8+0I3eNXgDrL4tVKeXhz2wQ1Y/ojs9dPTX3z+butO7Dm/mjKZb
GvRuYA9cyWje14PeTXi6HRTm96SXDy96Ybvhveiho35cVvrVi94teB49VW5o
0rsN70Zg57296d3BHhh2X82jD70CePsGawzpSw8d1Rjeq74vvbvwFrzsc1WL
3j14d4z67+pH7z68kTEDZ/WnVwjvYI2uzgB66KgWK72vA+g9wL3tI9e/pE3v
IbzCxpHbB9J7BG+s65gZOvSKsC8kJ8f1H0QPHdVW2fTTIHqP4S1dZHFel94T
7IvHuZZbBtN7Cs+kl5XTEHrF8JKDbPoMpYeO7FA47cNQes/grRzieFaP3nN4
zyNcNg2j9wL7YsIrV7vh9ErgHR43u6c+PXSkaqxHpT69Utzbqz/NO2VA7yW8
V9YL14+g9wre5CQfm5H0yrAvjjf5qo+ih47s5rb8zSh6r+GFnlp53JDeG+yL
CuVVa0fTK4c31XvN5DH0KuCdvhLaZSw9dERPzbCXY+m9hbdxVfgRI3qV8N4X
blk1jt477AuHodsnGtOrgpe1eafKeHroiL5l0c/H03uPe3uLcWyKCb0P8D7F
xq00pfcR3vTPB83M6FVjX1ycIlYyp4eO0E6WPTGnVwNvx59kuQW9T9gX39zS
lk2g9xnerNNHjSfSq4V3teOJtpb00GGDfU49tKT3BV70Vbxa9L7Ca9DMXjKJ
3jfsi7mrc8ZMplcH7+aDy62T6aHDhutdu2dF7zvu431bbhy0plcPr6ns1qIp
9H7A8xp/d6QNvQbsi4J9hX9s6KHDRtU+uj2V3k94B22e7rel9wv7ojX5+fxp
9H7DW/y3dLgdvUZ4D2a+/mVHDx1qlFlxw55eEzyJStVeB3p/4LVb/NHDkd5f
7IFl1z4NcaLXDO9J76/1TvTQoabB368602vBfZz8sGGXC71WeMrDGmdNp/cP
XsDWvzoz6ClIBLUXr1u/zqCHDp1o0vayK702EqHs8P72O9zotZUI1p2/KLvO
pNdOImQET1UdMIueIryyQ10/z6KHDrZqVr8wm157eMdn9dzqTk8JnvqZ3s5z
6HWQCOnrOvXr60FPGd7bxdofPeihg23zBp2bS6+jRCg53WdouCc9FXi91gy3
n0evE7xNj0b0mk9PVSKofhg2+t18euhgx0ij0wvodYaX9Wb8Bi96XSSCoGVq
PnUhva7wtsZN7L6Inhq8z18mlS+ihw6cYTvlhDe9bvAuptiG+NBThzewxd5q
Mb3uEiEtarZz1yX0NODVnZnxagk9dOBs1VlHfen1kAjFV5fMWe1Hrye8Idc9
LZfS6wVvT1+vTsvoaUoE5Z9rvF8so4cO9CxakrqcXm94N4cvC/Cn10ciWOhv
W2G+gl5fePvLAzuspKcF749p8NOV9ND+C+NDkgLo9YNX8HX98kB6/eEZTts0
PojeAImQnJC6ud0qetrw/rVEPlpFD+2/xD1KspreQIlQ9ODsbt9gejrwxnWO
GbuG3iB4Ut/9/9bQ05UIioo3DtxfSw/tv1xLlBBCbzC8J2ul3qH0hkgEE7PH
SaPW0RsK75B+6t919PTgddx+5M56emi/wIpjcRvoDYP3wuzkgjB6w+FZHsjU
30hPXyJIj3w793sjPQN4Xewu3NxED+23Ju1STDi9ERKhsKz1ytwIeiPhWc+5
PnQzvVHwTpzL/7GZnqFEUOjepeDaFnpov/V+93dvpTca3tsbD2dH0hsDb1q/
J4O20RsLLzPk2bdt9IzgaT4pubydHtov3KBsxw564+B92F7uGkXPWCIYOb2t
HLCT3nh42eYfPu+kZwKv38GaC7vooX0i62q37qZnCu+zXZ1zND0zeK6Hf/Td
Q89cIiRe+vfr4x56FvB0PP6c20sP7bMzqyU8ht4EiVBQ16WNQyy9ifDclypq
7qNnCe/azQ5V++gJEqF5SP9OmfvpoX32hnYJi6M3Cd7PJ91s4+lNlgiG80b0
0DhAzwpe/g7NigP0rOHpV/bNOEgP7RVnMSA0gd4UeH8O6lgn0rOBt+j7YDUR
vakSIf6u/bAyET1beIZHDNLF9NBeiQqGwRJ60yRC/j+PsYKUnh0832xjVRk9
e3gPu5qVyOg5SITGccsmpMnpob1k+UJgEj1HeIoDrC2S6TlJBAP/dVOVD9Fz
hvf0qV3xIXou8MxGOiWn0EN7pkRN90+lNx1ex3duJmn0ZsALmuCueJieq0SI
LUmYW3SYnhs8y/r50iP00J5HHRb5HaU3UyLkdTm62Cid3ix4a9ssVThGbza8
13P9C4/Rc5cIDdbnAxKP00N7Zqit9jlBbw687svXGmbQ85AIehturWvOoDcX
XuWAjQUn6XnCm7Y+Iv4UPbT7meKtXqfpzYOnOWqHQSa9+fAidu5qzKS3QCJE
f3y3J/8MPS94ThP3xZ6lh3Y/nxjveY7eQomQ2+9Hgl4WvUXwtjlKGrLoecOr
PSrPy6bnIxHqXNumRJ+nh3a/7HnY/QK9xfB0LqTr5tBbIhF0d3XLqMuh5wvv
+/LTuRfp+cFzv3026hI9tFue9nm3y/SWwhu64aJ2Lr1l8GKe5dbm0lsuEaJ+
jcrLuULPH968XTcjr9JDu92quu1yjd4KiZBjYHlPK4/eSnjxogfVefQC4P39
UZR1nV6gRKhd5FQccYMe2u1e+guHm/SC4I1u90ozn94qiaAtmvemKp/eangK
OW8zb9ELhuer/j7sNj20yyP/ats79NbAM77zWaOA3lp48oHfKgrohUiEyPZh
9Rl36YXC83/+M/QePbRLsWGT9X166yRClvnuZrVCeuvhpb7/V1ZIbwM8FaHd
sQf0wiRCdZBYac1DemiX0oaOkx7R2whPcO7cuYjeJomglX5MrbSIXji8rooa
hx/Ti4C3dn6voCf00A5vcvpMeEpvM7wp3ft3LKa3Bd7JFQOfFdPbKhEiNAp0
Dz2jFwlvg47eiuf00A7vwvRNX9DbJhEy7V6MbF9Cbzu8s6PHPC6htwNe7+hx
slJ6URKhKuKDydKX9NAO1TgBXtHbCc9ZYtmmjN4uiaB54efkB2X0dsPr72Ij
ek0vGt6249MWv6GHtv2i6Di6nN4eeG4LXFrK6e2Fl3vR9W4FvRiJEDZIY/aB
t/Ri4e1a6bGwkh7atr5g3oh39PbhPp4zaGHTO3r74V3f6HOril4cPL0S333v
6cVLhIqYMcvnfaCHtv0dvXLYR3oH4M3/GPTzI72DEkHj9qQ116vpJcAbIQ3d
U0MvEV78rw1zPtFDWze7hA/+TE8Ez/vElu+f6Ynh3W+//UotPQn2wBivnTu/
0JPCE12KnvmVHtq6TY/Ygd/oyeD5BcR9+UZPDq/o7sGLdfSS4I3XFW/7Ti8Z
nnyTbHo9PbS1Umlyvx/0DuHeXjE2reYHvRR4z/YczW6glwrPovr45p/00rAv
UiefcvxFD23dSXam9296h+Gt+p31/je9I9gXL6fnnGmkdxTepIzLG5vopcNL
V7o27Q89tKC28EaPv/SOwQu5fOvtX3rH4ZX3uHuymd4J7AubwMJ1LfQy4J28
92hKKz200GPw027//v//h3s7LPz563////+DV1VaekzBgf9/8OyNXq9p4/Cf
l4l9cXZvxaS2Dvz/g9en5l3ndg78/4O32epjKfq//z/sixrZp8OK9M7Bc2n8
EtSeXha8CzO+T1Cih7YYcLKhYwd62fC2d2h81oHeeXhfF/49pEzvAvbFzNzW
FR3p5cDL7dnWTIUe2kI3qL1SJ3oXcW/vvq/8pBO9S/B+DFaVq9K7DM8jouuy
zvRysS+uv1Q37kIPbTFsXM+2XeldgRcb0/thV3pXsS8aa7TEavSuwVtgrb2k
G708eLflg8ao00ObjGwa0qpO7zq8A67D73WndwNey8kRBzXo3cS+8FEevagH
vXx49xcZjexJD20y9sr4Pz3p3cJ9LO5lfrsXvdvw2q6auF+T3h14Swsnze9N
rwD7omjIlOF96KFNTDbb/upD7y68pFf2N/rSu4d90cHYea8WvfvwVsbO8OhH
rxDes08zh/SnhzaaMGVOfX96D+ClJXleHUDvITzVPwt2adN7hD2w2s171kB6
RfBenlqio0MPbTS547KvOvQe4z4+5r3i0iB6T+B1uxq4XZfeU3ihmsEzBtMr
xh4oXxXSfwg9tNHUB+s/DaH3DN6poZvOD6X3HHug55bNW/TovYC3sSzSaRi9
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
E57mDZpLTxXe4RH53+bSQ4epRt257Emvs1yoWF15b8c8el3gvbJ46DqfXld4
kxMeD1hAT00uaBz/Xvx5AT10WDeHkgte9LrBCz3yautCeupywbZCodx5Eb3u
8KbOrezrTU8D3uns9x+96aFDe6rVnPOh1wPexmW14Yvp9YT3Pv+b/RJ6veRC
hsOAH7186WnCy1r3650vPXRo3+Km0370esuFsi0jWzYspdcH3qcoBdtl9PrC
m/6uncZyelrwLk7oULGcHjpUO1Elw59eP3g76juHrqDXH943h27WK+kNgDfr
qIZaAD1tuaB2tY1mWQA9dOhgz77pgfQGwos+3z84iJ6OXLBuUNMRVtEbBG/u
8sGqq+npwrt5S69kNT108HBtg7RgeoPh7Vs/KnANvSHwmorHWKylN1QupHuN
MlYOoacHr2CnaXEIPXTwqCqL5FB6w+RCycGJgv86esPhtSZamaynpw9v8Q8b
xQ30DOSC6gNHu6IN9NDBRumO0jB6I+BJ2k7320hvpFwQ2s1zM9pEbxS8ZRdm
K4TTM4T3pNvcwnB66EBT//mJEfRGw0u+vdBnM70x8JQHLjbcQm+sXEgL2ODX
vIWeEbwXz5YXbKWHDpxoGBAfSW+cXCg+vGuV1zZ6xvA6v19jsJ3eeHjBlusa
t9MzkQvKZaKw/B300IFWDeGxUfRM4R132uq5k56ZXLBQP7Zdbxc9c3jr2u1q
2EXPAt7beXvydtND+9vmxEZH05sA77R6vPseehPh9VqRoLuXnqVcSN50R1y3
l54A78NAeW4MPbS/Y9ihqFh6k+RCUdbzNLd99CbD0xqdrr2fnhW8rbtP1O6n
Zy0XFD+/P5UTRw/tP0M4GxlPbwq8i+JslwP0bOSCycCfOVoH6U2FF+WcW32Q
ni28umPXshLoof1mK96MSKQ3Dd7V+bcdRPTs4A25eFdTTM9eLkj3dH9QJabn
AO/niqJMCT20n2fB0zApPUe5UHhT54WtjJ4TPP2NLzXk9Jzh7X/xukJOz0Uu
KPwZ/TYjiR7ab2F0VWgyvenwCj58tD5Eb4ZcMDKc9FkthZ4rvATJ17IUem7w
/v38np5KD+2zxOVncBq9mfAeHG8UDtObBW9c+2bVI/Rmy4VE6YJ/JUfoucNT
vNT28FF6aJ/lGkpB6fTmyIWCJys7TjhGzwOe2V3VjsfpzYV3aJDas+P0POVC
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
jX9QS+8APL0U0+S39BLg7fs1yauOHvp327wpRu/oHYTnljVNup5eIrybclbl
9fQOYQ+MXjYr8T29JHgJV2w9PtBD//7b197gI73D+D5e7j+//SO9ZHjl5U63
GuiJ4BkNc4n/RE+MPXB46xK3Rnro3zI17vqf6aXA8zb2bPtMT4I98DB2ZUkT
vSPwJnzyif1CLxWeZLqfSzM9dGtXyTrdr/SOwlvzO7DlK700eFUOwUXf6B3D
HhDObI7+Ti8d3rFuW51a6KFbFTwitH/QO47v44DCHc0/6GXAe662u6CV3gl4
U9fF7PxJLxN7IPPuPoc2eujWXroHNH/ROwlvY3hi4y96p7AHXtcczvtN7zQ8
q/EpEX/oZcE7sy/Vrp0e+ptq47EBf//9/g9eqOWJD3///f5PJLxeO2f+Qilb
/v7v///72h2vov/zsvHz7ukJp6EdbPn7P5HQprDAeTf6f7//w88r884uX9H/
+/2fSHALOLd4gTS9C/h5neG65Io0vVyRUPK8+9IhHemhg3pect/Vkd7F////
4+nxpSO9PPx8C+ztOV+G3iXcl1m04rIMvXyRMO3l6pWDO9HL////f/1X7ehE
7zLum37L53MnegX489643ndeZ3pXRILSaS2/S53pFeK+1/fXDupCDx2osnnd
9i70rooEXSu99Z+60CvCfZueBM6VpXdNJMSeiQi6KEuvGPe9HRM8sCs9dKvq
q03butK7LhIyrKM3f+xKrwT3hU7YMkeO3g3cl10fdkGOXin+/N/tD+/fjR46
sN+UiK3d6N3EfbObtr/vRu+WSKgJO7xjtjy927gvx2rXeXl6Zfj5/uFHVL/u
9NAt/Y9Gb+lO7w7um2MX8647vXKR4LLt795ZCvTu4nviYua+cwr07uG+hgX7
+/aghw7Q6HJgcw9697E37bMT3vag9wD3bV+SOFOR3kP8/b2kkHRGkV6FSDD/
fOlwn5700C2aK0SbetJ7hO8HB5WUNz3pVeLv985rkhlK9B7jvgLf1NNK9KpE
QtGX/mm9e9FD+w+5fWxjL3pPcN+CwOOvetGrxvdG1JAT05XpPRUJ0YUPMk8q
03uG+75tPtWrNz30t6Ejsjb0pvdcJKQtrD7zoje9Gty3Z/u5qSr0XogEhWuG
50+o0HuJ/dvyKqdnH3pof909uev70HslErRdTPOe96H3WiRU731/aYoqvTe4
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
PbT/sHfyCz3pmYsF7UVxClc96aGrYyYrDl1BDx1V3Nhz9wp6U8SC0Hqo19cV
9NDNw2f0XuBFzwL3LW5RueJFD+2074jqkJX00HI3bNV2raQ3Ffe1/en3ZSU9
tJ/+if7zvelNEwtabo4DL3vTQ1fv7zRo8Cp66J03z2ruWEVvulgw+7NY6/Mq
eujmUd215/nQsxQLqe55Qy/50EM7JiwfNmg1PbRcmfLw7avpzRALBX+v6n1a
TQ/tO2a1/lxfela4b7n6qIu+9NBViTdHD1xDDx1ZHjBm2xp6M3GftNbYj2vo
oZvG3jea40fPWixIVoQYX/Cjh3Y8PNyk/1p6aNn7VRO2rqU3C/fJREx8v5Ye
2td4zKTZ/vRsxIKm90vhvD89dJVot3m/dfTQkQ9NLLasozdbLJh2qZ/6bh09
dJPJ/umzAujZ4j4f8xnnAuihHSSfrfqup4eWrUyy3rye3hzsla5WNm/X00P7
TPwxe2YgPTvctyZ1zplAeujK1Dlz+2ygh46oarfftIHeXNwnn+nwZgM9dOOk
BY4zgujZY6+s7ex0Ooge2uHYuYW9N9JDd37qumjjRnrzsFcUFBa/2kgP7WN+
yXV6MD0H7JUAT7eTwfTQFcd7u/faRA8d8bxo2YZN9OZjr/T0Xf5iEz10g0X/
FVND6DnivsBbXidC6KHtM9d799xMDy3zUstn/WZ6C3Bfrwern2+mh/aevnnN
lFB6TtgrG/XWHg+lh6449cS/xxZ66PDXEQHrttBbiL2iYhj4dAs9dMOMVxsm
h9Fzxl7ZFL3xWBg9tN2ZCZu6b6WHlnlbH7J2K71F2Cuq8aFPttJDe1lPCZsU
Ts8F94U2bT0aTg/94Nzhbd220UOHvbPavmYbvcW4r19r5ONt9NAfbI7unBhB
zxV7Jcwu6kgEPbRdzt/dXbfTQ0t/yNyzeju9Jdgr/Z32PtpOD+01p8u+CZH0
3LBXtmXHpUTSQ9/LXRLfZQc9dFiDQsKqHfSWYq9o5B98uIMeun7uikPjd9Jz
x33bVQ6LdtJD2166ltxpFz201Gdf8cpd9JbhPs0Bkvu76KE9HW4fGRdFzwN7
YGfg0cNR9ND3Lg851nE3PXTolwfpK3bTW449MCQ04+5ueuh6xxGZY6PpeWKv
RFWfPBRND21TuP10hz300FLfDM8s30NvBfbK0Ndn7+yhh/ZYuCd7TAw9L9y3
xzTnYAw9dHnR+wt/Y+ihQ1riLy7bS28l7tO1uHR7Lz103aIv+aNj6XljD+xN
LjgQSw9tc31m4Z9Yeuj21tarS/fRW4U9oJd27eY+emgP17nXR8bR88FeiZO6
sT+OHrrsxsnSX3H00CG/nG4t2U9vNfbKSNmyG/vpoWvdzt8ZEU/PF/fFu93d
F08PbX2rx/2f8fTQv//kP1h8gN4a3Dfaq+L6AXpo92V9Kocn0PPDHjhY/Hhv
Aj10WdmaJz8S6KGDpQY+XXSQ3lrsAcOyZ9cO0kPXLt9QMyyRnj/2yiHtl3sS
6aGt7j589T2RHvq39JY3Cw/RW4e9YqT/9uohemg3r6d1Q5PoBeC+5Mj63Un0
0Lfuj/3wNYkeOqjTm48LDtNbj/vGx3y6cpge+rX3xM9DkukFYg+IPzTtSqaH
tqo40PwlmR66rcvUb/NF9DZgD0xo/n5ZRA/ttlr0Y7CYXhD2yhHrnzvE9NCl
lT/bPovpoYPkjv2el0JvI/aKmX37pRR66JdrOkhpSugF476jpzpESuihLZ8s
7NgooYdule/ayf4IvU24T8jpnHeEHtrVf6msRiq9EOyBdEW5iFR66NKnl7s1
pNJDB/ZY2d3uKL3N2ANTVHvkHqWHfhlwXXFAGr1Q7JUMP6XwNHroaTUDlT+k
0UO39rzT2/YYvS3YK1OD+uQco4d23TC0r3o6vTDcd7JCLSydHrrk5Rb1+nR6
6EDlkQNsjtPbivssnw3MPk4PXbNxxyC1DHrhuO+00eDQDHroaW/eaNVl0EO3
qOzVtj5BbxvuszLTOXuCHtol5OMw1Ux6EdgrZxOGh2TSQ5e8nTqiNpMeOqDv
V32rk/S2Y6/MEo/KOkkPXRM6y0DlFL1I7JXstjHBp+ihLeqPjX19ih66pd+8
cZan6e3AXpktPf7UaXpo562nTZSz6O3EfRecTYOy6KGLP3Q1e5lFD+0/4MKk
aWfo7cJ9du6TM8/QQz/b1nOK0ll6UdgrFwssAs/SQ1t8Wjmt5iw99DeNvpYW
5+jtxl6xL5mRcY4e2jly7UzFbHrR2Cv5GrMCsumhiz7fsXmWTQ/tP3ijrfl5
enuwV+br2KWfp4eu3vlorkIOvRjcVxA2zz+HHtq8eeT86hx66OYhzx2FC/T2
4r4FO53SLtBDO+0e5yyfSy8We+Vq7SK/XHroom97F1fl0kP76UxaYnaR3j7s
FecGt9SL9NDVew66y+XRi8NeuTbNwzePHlr48XV5ZR49dLNuygrTS/T2Y6+4
2KyUXKKHdoz95S2bTy8e95Wk+/jk00MX/pznW5FPD+07oqOfyWV6B3Dfkqy1
4sv00FVxi9Z1LqCXgL1SKrfeu4AeWvh9IfBBAT1008hlQcZX6B3EXlmqFJx8
hR7a8cCVTTKF9BKxV257b/YqpIcuaO+75V4hPbSvwY0wo6v0DmGvePiHJ12l
h648OChCuoheEu67U77ds4ge2qxD8I7yInroRsNhuwyv0TuM+zwroxKv0UM7
JG2Nliqml4w9cG9UjEcxPXRBx5q9ZcX00D7jdu0zuE5PhD2w0nh/wnV66Mrk
t/Ht1+mJsVcexCa4l9BDm3YWEm+V0EM3jv90aNQNeinYK6sSD8ffoIe2T5ku
+n2DngT3Pfomdiulh86XlUhKS+mhvU1np+rfpHcE9/n+Php3kx664sjxY203
6aViDzx2OO56ix7atJvMiZJb9NANZmcy9W7TO4o94OdyKvY2PbR9Wres1tv0
0rBXqnPPuJTRQ+d19zhXXEYP7T2513ndO/SOYa+sK8yJuUMP/SB9VW7LHXrp
uO+ZWp5zOT20iWLppaJyeugPU9Zd1rlL7zjuW695JfouPbTdibuF3+7Sy8Ae
eBFc5HSPHjpPSbe48B49tNe0x9e179M7gT0QFH4j6j499IOTo28236eXib3y
quaW4wN6aOPeUWUFD+ihP1iOL9d6SO8k9kpw3d2dD+mhbbP23W96SO8U7qsV
HjpU0EPn9mmsyK+gh/aceahS8xG907hvs2VV5CN66Htnvz9pfEQvC3ugTvLU
vpIe2ljN9nleJT10/aw/NRqP6Z3BHtiS8TLiMT207fn5rxse0zuLvfJeptau
ih46R/3s29wqemhP28XvBjyhdw57JVz+ffgTeujyCxc/fHjy7z0I7vvo0WBb
TQ9tNFC5Maf63/sQfG/bXf2s/pTeedwX4fMl7Om/9yL43s7r97X+Kb0c7IHG
0m82z/69H8F9gwJasp/RQ3vMG9yq9pzeBdy3497P0Of00OX5m37VPf/3vgR7
pUn3j3UNPbSRVlX72Zp/701w3/xtUn1f0LuIvbLLQHrzi3/vT3DflRcd376g
l4f7vkZ1mvny33sU7BVtky5nXtJDezi9k+3zit4l7JXoOLlNr+ihy65Oln/z
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
Qy8beyC9NW7JG3poo8Yz8bfe0EM3D1kgGlFL7zb2wMLOxAO19NA2+86f/1JL
Lwd75Yb1hcVv6aGzm7pfuvmWHtp92JXk4XX07mCvWNmn7K+jhy7f3zv1Ux29
XNx3M+Pqonf00IZfVl+78Y4e+rNK/+tD6+ndxX3WORn76umhrYM2ZH6sp5eH
PZCtmLXwPT109tf7t66/p4d2G7nl9pAGevewB5aq3NnbQA9dHvw490MDvXzs
lRzvvAUf6KENWkfnX/tAD/151PP7gxvp3cdeWeb/YE8jPbTV4fEP3zfSK8B9
d6uL5n+kh85qO1h89SM9tKvGlJJBTfQe4D77+ie7m+ihy44cffquiV4h9sA9
o2fzPtFDG/z8VH7lEz10k+bJioGf6T3EHnAwqdz1mR7aKvz7y7ef6RVhrxTE
vZr7hR4689eC15e/0EO7jvtdM6CZ3iPslVVJtTub6aFLI5bUvWmmV4z7CsXq
53ylh9bvuvL+0ld66MbxKz70b6H3GPetlvq4o4Ue2vLEjabXLfRKsAcerfk8
6xs9dObf/s0XvtFDu0y887VfK70n2APObt+2tdJDl54c/P1VK71S7JXHBW0z
v9ND63Xf2n7+Oz10o+6Ijr5t9J5ir7iU/NrSRg9tEbPr98s2emW4r1Tjz4wf
9NAZPSr+Jv6gh3aesq+bdDu9Z7hvg46YZzs9dEns6x6V7fTKsQfKgnsa/aSH
1pPQ7yX6SQ/dMPW9pFQHvee4b2O4lEcHPbTF2RnSFR30KrBXnn/ua/iLHjpD
Mrpf/C96aGfDuf0lO+m9wF7xaJNz76SHLkk4K1/eSa8S972wUDD4TQ+t26dr
UNxveugGowuDJbrovcRe8bQZ4tZFD21+rsfQsi56VbivKnWY/h966PS+Diqx
f+ih18zsoyr+l94r3Lctc6TrX3ro4qS1o0r/0qvGXqmWG63373/v/3CfbK5G
zL//vf/DHpi1UVOsm/V/3mvslR1KWi7o/97/4b5LD8aVoP/fq8Feqdk6Xre7
Nd//Ya/IqU6IRv/3/g/3mTyZ2E2M3hvsFW8fXWcxeuiiy2P0isXo1eK+txVT
Jvagh544MGBqVA966DrTCdP+9qD3Fvf51BiuEaeHNks9ZFQkTq8Oe+WdvqDT
kx46bVDDzMie9NBO84/N6upJ7x32yh5hjpMEPXRR2heTQgl69dgrDdGm2r3o
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
2Udl9NBx5mIJE57Ru4q94ndFdOIZPbRkuv25P8/opWGvfOidtLqcHtp9yI0L
D8vpoVUWrrk0/jm9a9gr/v0vH39ODx2YkZPy+zm9dNzXtCF1VQU9dPPQwWkP
KuihYxcVXBv3gt513Ld/y/VjL+ihJW6q3Pj1gl4G9srnx5krK+mh3VV2Zd2v
pIceZq2RPfYlvRvYKwee3z76kh468Jb/nZ8v6WVir3wdf3dFFT30Z9XXefeq
6KFjbYLzx7yidxN7JXhKwZFX9NDiOfUPfryil4X7vh19uLyaHtpt1IxHd6vp
oZWXfS4e/ZreLdwXcrLk8Gt66IBck9Lvr+llY6+0fX+6rIYe+vPos8/u1NBD
xyy3eD7qDb3b2CtHflccekMPLX4vqfLbG3o52CvtS6qW1tJDu2r2qL5dSw+t
7JD6euRbenewV46ueHPwLT20/32pt1/f0svFfb9u1C2po4du0lpbf6uOHjra
Ua5hxDt6d3FfxJ0PB97RQ4sVun388o5eHvbA78GfFtfTQ7uOf/D5Zj09tNLq
rc3D39O7hz0QOaJl/3t6aP+ikm+f3tPLx175u+v7ogZ66MYJY37caKCHjl5b
0T70A7372Csn93Xs+0AP3e2xTufHD/QKcF+3mt8LG+mhXXQP/bneSA+t6KL/
b8hHeg9w36n33fw/0kP7PQkXa/xIrxB7oIcgbtFED92o96VnehM9dJRrdC+l
T/QeYg/Ezu3t94keultZm1TDJ3pF2Cs946XNP9NDO09dKJP2mR5acWNXP8Uv
9B5hr8Rd6O/7hR7at9xmQP0XesW4T1J8oFkzPXTDtKsKqc300JGbHBQVvtJ7
jPsS+ij5fKWH/luROaTuK70S7AEp56GmLfTQzkYDhqe00EMreOaqyH+j9wR7
IHGjqvc3emjfl0pqtd/olWKv9C0cZdJKD10vbBud3EoPHblVdYzcd3pPsVeS
nmh6faeH7nrlo1XznV4Z7uunqT27jR56zawX4y+20UPL7wiYIPuD3jPcd3HC
pO0/6KF9amp0q3/QK8cekAvRM26nh66fM1U/qZ0eOmJnw1SZn/SeYw9cPjZt
60966K5aYXrVT3oV2CvyzUZCBz20k+kp4VwHPbS8j6mx9C96L7BXrvyY5fmL
Htr7Xfycyl/0KnHfIMu5Rp300HVmf0xFnfTQ4b4XzaR+03uJ+9KWmnv8pofu
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
6+c0M+wdPXSlSZ9Zbe/oZeM+nwwTxyp6aNPEtaa5VfTQre8UzMa+p3cP9/XP
mRv6nh7acc7Gea3v6eVgr+wYOt+hmh46L+mxZU41PbR3tbeVxgd697FXFNWs
j3ygh66c+3xRywd6udgrO/0X29fQQ5tcG7cku4YeurWmzE79I70H2CuDguwP
faSHdrCY5ND8kV4e7guoWm5XSw+de/3wiqxaemivTwYr1T7Re4j7htStCvlE
D11hecK56RO9R9gre4xdbOvooU3Svq3NrKOHbvkcvU71M73H2CvDzNcHf6aH
dlj4y73xM7187JV9cR429fTQOekLPTPq6aG9Gjo3qXyh9wR7RSVxS9AXeujy
RUu3NnyhV4D79ktts26ghza+fd0nvYEeurnRyVf5K72nuE9V1i/wKz20ve3t
nfVf6RVir4S47rJqpIfOuTNgd1ojPfTm7zl7hn6j9wx7ZZRn4J5v9NDldsOC
6r7RK8JeOZS/37KJHlrI3nYgtYkeuvmH2kGl7/SeY6+MLj4U8J0e2m7ZriO1
3+kV476jmqEWzfTQ2Tmvj6U000N7tgYdH/SD3gvcN1b3hP8Peuiy5e8jan7Q
K8FeOXYk0ryFHlp4MC0quYUeuqmt7rTiT3ovsVc0I874/aSHtnOadbb6J71S
7JXwplizVnrorIdnzie10kN7/jGPU/hF7xX2yoS2i76/6KFLV12Mr/pFrwz3
RVhfMm2jhzbK/5eQ2EYP3fg3MVH+N73XuG+ifZLPb3po2zU9kit/0yvHHjiV
es2knR46q2Dl9YR2emiPLn1vyP2h9wZ7QDczzfsPPXTp2nXpFX/oVWCvnFbM
MO6ghzZ8dv+2uIMeulFi0x3Zv/TeYq/oKd/1+ksPbeP2JLv8L71K3BfjkyN0
0kNnPh+VK+qkh3bv/uKBzL///v/hvqkBDzf/++//H97b7uMfl/377/8f9kBs
eb5RlyX/89CGJfsL4tD/+/+H93aPyYW9ui7h/z/sgWnVzzzR//v/h/s2Hn1e
iv5/rxp75YLhC0MJeuiM0s8l5yXood17nSyV7kbvA/aKkUmZRzd66OJN31+X
dKNXg/suxrwxkKSHNng9722sJD10vczvSqnu9D7iPkFU5d6dHtraa1F1cXd6
tdgD4i41+lL00BlvrnyMkaKHduu77JNkD3qfsAdmSX9260EPXex9o76oB706
7JWEVQ160vTQ+pV9G6Ol6aHr+935JtGT3mfsldlu31170kNbbR/4o7AnvXrc
dyW3RbcXPXR61abWqF700K4Kw9u69Kb3BfeZFfx26U0PXbRj+5+C3vQasAeu
qv/VkaGH1v/wojNShh66TnF3l38y9L5iD5hrSazpQw9t5f+m25M+9BqxV1KC
u0+UpYdO+zi5x0lZemjXwR+k/8rS+4a9Mj+01+q+9NCFAdNlHvel14T7Uuv7
TJCjh9arO9n3hBw9dO2Q2f3+yNH7jvsWNMuv7EcPbbn3rMLDfvSasQduWiiO
l6eHTqv/PfC4PD20i3L84N/y9H7gPmubISv600MX7us67EF/ei3YK7eSlMcp
0EPrfV2mckyBHrpWpafqLwV6P7FXbNJGLh9AD20ZvHrU/QH0WnFfptzoMYr0
0Knf7mgcVaSHdhm5fuxPRXq/sFeWDNJcNpAeuiDkwfh7A+m14b6szRNGD6KH
1m0ePvHwIHromlFPdX4Movcb9y311V06mB7a4vBovbuD6bVjr2SXTBmlRA+d
2rJ76kElemhnjQnTvivR+4O94lBhuGQIPXTB0QNGd4bQ68Beua8njBxKD63z
68PMA0PpoWvGHpv1bSi9v9grjkazFw+jhzYP+2J6exi9Ttz3INJshDI9dMrv
2eb7lemhV43/Me+rMr1/uG9l7PxFw+mh88PnL7g1nF6XeMHvUbvVcBV6aJ2O
eOt9KvTQ1RMW23xRodc1XohYLWG7cAQ9tPnJq0tujqAnES905DssHaZKD53c
2XPZXlV66FU6Nx0+q9LrFi8oujg7LhhJD/3oVD+nGyPpSeK+p1krh6jRQ2t3
dV+9W40eukp38JpPavS64z7XPJf5o+ihzaK3uF4fRU8qXmh/puI2WJ0eOrlb
4fpd6vTQTlN2bPioTq9HvKCwXmPjvNH00I9iXnpeG01POl7wLd6zeaAGPbSW
lLbXTg166Kqpb7d+0KDXM14I3xCybe4YemjTc1O2Xx1DrxfuK6nxHTCWHjpJ
Osxvx1h6aEfDGf7vx9Lrjfs8G3bNGUcPnXfh1O4r4+jJxAs+r0z39tekh9bq
3RK4XZMeutLoXNA7TXp94oWwzZbBs8fTQ5uK/hy4PJ6ebLzQ9lp8sJ8WPXRi
H9vD27TooR1ndjv6Vote33hBfmty6KwJ9NC54uVhlybQk8N9Fb3C+2rTQ2vK
pZ/Yqk0PXTFrzck32vT64b5t8qdmTqSHNrl8Nyp+Ij35eKG10j26jw49dKK8
UswWHXpoB9OHZ1/r0OsfL8j5ep2bMYkeOvfKiAsXJ9FTiBe83xfG9dalhx47
wE+0SZceusJsjPiVLr0B8UKoX+ml6ZPpoY2T916+MJmeIu77oH2lpx49dMLA
yqSNevTQ9vMOJr/UozcQ9+3ST5k2hR46J+Xj9XNT6A2KF7xqw2700KeHHqsk
3NygTw9dPv9r+gt9eoPjhSO7ozKmTqWHNr4xJ/PsVHpK8UJLXcud7gb00OKh
5++uN6CHtrdacO+5Ab0h8YJsYEfOlGn00Nk3L+WemUZvKO77YpvXzZAeWmO4
5KN1hvTQZdbXHj8zpDcM9wU5Ppk8nR5ayOj99PR0esrxQvPX9MKuRvTQ4hEu
RWuN6KHtFvcvfmpEb3i8IHMg+8WkGfTQ2ZkbXp6aQU8lXtjcpPTq3wx6aHW1
R2VrBHrosiVby58I9EbEC4cOqlZMnEkPbXT32duTM+mp4r5mv3d/Z9JDi9TH
vl9tTA9ta/+q+rExvZG470hgzYRZ9NBZ9ybWnphFTy1e8PxZ+enPLHpo9TGH
Pq80oYcudZj65aEJvVHxQkhobcP42fTQRrnHG4/PpqceLzT9Epp+z6aHjhvX
+H2FKT207YrTPx6Y0hsdL/Q6bvZz3Bx66My8n63H5tDTwH3t59t+zaGHVtOy
al9uRg9duvLvn/tm9MbgvhMJf8fMpYc2fLzk39G59Mbivg7Jrq1z6aHjtFMk
HMzpoW2cV0jmmNMbh/siZaQ05tFDZz651ePIPHqa8YLHP5eeLfPoodUmKfS2
t6CHLnG5J5NtQW98vBAc5SGrPp8e2rBwiNyh+fS04oXGro/7Nc+nhz4/2bu/
nSU9tM26kQOyLOlNiBekzxQpqi2gh84o2jkoZAE9bdwnOU6paQE9tKp+2RBb
K3ro4vX7hmVa0ZuI+87qDFddSA9t8OKdSvBCejrxQoPUYdXGhfTQ5w0M1Gys
6aGtPT6NyrCmNylekDofPlplET10xsuZY4IW0dONF9x7fhvbsIgeWmV6tKa1
DT10sedcrXQbepPjhaC41gnKi+mh9csuTAxcTE8P9/VeOKl+MT107IxOXStb
emirLZf10mzpTcF98Xb6Q5fQQ6eXdzfYs4SefrzgJnt9Wt0SemgVY6fplnb0
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
yms1Y/88euiEPsWzavLooe1n7ppt/pDeJeyVrZpzkh/SQ+eIX5spPqKXgL1S
EWTu94geWkNO16L6ET10+az3880e07uMvbLtyIKkx/TQwuVpCxXy6SXivso6
a998emixfIRNVT49tJ3pLFvTJ/Su4D7fpiWJT+ihs6+cWSpfQC8Je+W9+TKf
AnpojQFtDpUF9NBlZhcdTZ7Su4q94mftlPCUHlpI/rdSrpBeMvbKh8TV3oX0
0KKB9msqCumh7eb1WGv8jN417JVdqa7iZ/TQWSkr3WSL6KXgvlpZd68iemh1
pcwN5UX00KXz120UntO7jvt2K24SPaeHNrpxf7NMMb1U7IE6T6/NxfTQoqHK
3mXF9NC2Vk+2Gb2gdwN7INBne9wLeuism6N29Cqhl4a98qXYz7OEHlpteIB/
aQk9dKn1+ADDl/RuYq8Ele8+/5Ie2jBj/17pUnrpuO+r7j6PUnrouBHVQSWl
9NA2i48GG7yidwv3HTAMiX1FD52Z+fmgVBm9DOyBpojD7mX00GpqJkeLy+ih
S5Z8D9V/Te829sDBmLCY1/TQhnfnhUuW08vEXmluO+FWTg99Xl10sqicHtrG
ftEpvTf07mCvHOlyOvoNPXTGvSvREhX0snDfT/sY1wp6aNUx0rGFFfTQxQ43
zum+pXcX94WuuhD1lh7aILfvxS6V9LKxB35lilwq6aHPj3MTF1TSQ1uvGJig
847ePeyB47mXI9/RQ2fkbbrS+Y5eDvZKu/JV5yp6aBWtguT8Knro4pXbU7Tf
07uPvXJCPTXiPT20/uMXNzre08vFfR0BN1dV00PHamvdelRND23l/CZD6wO9
B7gvMjgz/AM9dPqTyVntH+jlYQ/8q77rVEMPrTIp9F5eDT10kcv0+5of6T3E
Hoiqzw37SA+tX3gyr+0jvUfYK11nP3KspYeOmdz8OLeWHtpq3dknYz/Re4y9
csbiaegneui0ot+FrZ/o5eM+yfgihzp6aGV9m+KcOnrowvVdSzQ+03uC+84m
vTzymR5a78WyVy2f6RVgD0j1fG1fTw8dY5BWnl1PD23psbpC/Qu9p9gD5+Uq
D32hh057eedd8xd6hdgrPde/t2ughx46fdCHrAZ66ELPBzVqX+k9w16J21wb
8pUeWrdseF3TV3pFuK/308+2jfTQ0TN8v2Q20kNbbBn9VfUbvee4L76kMfgb
PXRq+e6mxm/0inGf7IRmmyZ66KHGFT8ymuihC7Ye+Knynd4L3HdJ71fQd3po
3bcf2hq+0yvBXpE71m7dTA8dbWLUkd5MD23h8+Wv8g96L7FXEiP/Bf6gh059
N7vrlx/0SrFX+v+QWNhCD600J1byZgs9dIHvfKlhP+m9wl5Jau+x9yc9tE51
fM/PP+mV4b4Bi3svaKWHjpor0edGKz20+c6rskN+0XuN+645yO3+RQ+dUtNT
/tMveuXYK4Nu9p/fRg+tZOE84HobPXT+rn4DB/+m9wZ75XrWoF2/6aF1Pq1X
+vibXgX2itLgofPa6aEjLfOGXWunhzbfs2X4wD/03mKv3FAZsfMPPXTy56eq
H/7Qq8R9w3aoze2ghx60UEP9agc99KPAl6MH/KX3Dvel7xmz4y89tHbDhHHv
/9Krwl4Z/lZzTic9dOSiEK0rnfTQZvunaPf/99//P+yVjJqJ2//99/8P9zUe
m/QO3XuHW1AG+v/dLkuF/wNcyJ/l
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.001], Dashing[{0.015, 0.015}], 
      LineBox[CompressedData["
1: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
V+6O7m36X/kryatxh0W+93TlbPLq3bGxKD356m7ymt3x7MiRMxGHyWt3h/ap
hh7Js+T1uCPpwoDxyavkCXng8hWtpZ73yJPxgOQtp8r+Z+Qpe8CrXjC09z15
Oh4oatxrYf2DPCMPdLyozfj0h+nPA6Zvv1/fLC1N/XlgzWclcaPx0tSfBx51
Wdk/nyRN/XlArT9uQ9pMaerPAzF/c+9pmUtTfx44L3Fl1G0H8rI9IDK63TXR
h7x8DyxSGLNdLoK8Eg8UqM59cjGZvHIPtE8KUwxeQV6NBwynbfQT2UBevQfS
DcsLjuwgr9kD90xbWpwPktfuASUrcfXuk+T1eCB84YywXZfJE/LEKVff4vm3
yZPxxJBPxoc3T8hT9sTCkGO6696Qp+OJvKjHsfrfpOn88cSbhMHSR7/Jgyem
C7S/LRkxkvrzxNLlLjNVx42k/jxxa/US3jWNkdSfJ+Q27j/Hnj7yP4/vieBt
t/tGzhtJ/Xni2O4fc8/YkZftib79E5b7eJKX74kFR6yvDIaSV+KJnJMJf4sS
yCv3xMvzO6zslpFX4wmdK1czv64lr94TvJsfb23dTl6zJ6rvyUqa7Cev3RMy
jaaOL0vJ6/GE74vw7IxL5Al5ofjNpgeTb5En44WuT+dk7z0iT9kL87teeXBe
k6fjhfW/JHYofCXPyAtPhw2eVf4iD17QlPBXZonJUH9eSBi1OlB8rAz154WK
caV7j0+Uof68IKH6pNV1qgz15wX3SX80e01kqD8v7J2qE1lgTV62F77Mci2x
dCMv3wsmpks/vQ8ir8QLq3Fg6sZY8sq98ND+boLBEvJqvDDBtefkk9Xk1XuB
7aP6Y9kW8pq9UB5sa6ReSF67F4SikhbfPEpejxecEnZdjD1PnpA3dvFrBkZf
J0/GG+9TP5ude0CesjdmrpZL939Jno43Vmwwqxn+SJ6RN+5sjRQ59JM8eENh
92YbB+FR1J83WPsvZH0bNYr688aJktbbuRNGUX/e+H1CcqSp7ijqzxu252e5
vDYaRf15Y1tVwJZMkJftjdc3Mh9NcSEv3xtT75XJP/Anr8QbSx4/9eazySv3
xo3m4V1KfPJqvDH6je6LKyvJq/dGwCc31Yhs8pq9ceT7shDJfPLavfGz72DR
icPk9XjDcvjeW4+z5An5YJN4r3b/VfJkfPBcRi167z3ylH2gPc7+2ILn5On4
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
p/M30pu8khhIOZkVXQwkrywGJx+4WkmHk1ceAx+PyLdBMeRVxOD306WZp5LI
q4nBAf/N2iKLyauNgf2rA7e8lpNXH4NO1gX2kVXkNcYg7/3dEb/Xkdccg3kx
rUedc8hri0Hr1x6H/XnktcdgXbLk1x8F5HXEYFqParbNAfJ6YvB4yazpu46Q
NxCDpb9tH3w+QZ5QLNTSA5LnnyNPIha3hJNlt1SSJxOL+LWZZ97UkCcfi7FS
uz1m15GnHIsL2WU9WffJ04hFkOy1vOZG8nRiIZL31Fj/BXn6sTg2/ktTeht5
RrFw3TOc8qidPNNY9KrJK2t3kodYFB7UrVzSQ55dLBbozA+8M0Cecyw+HnMb
UhGaSPuLxZbpUXuTJCbS/mJhdGaZxTWZibS/WLyYndMqLz+R9heLjEsHM9jK
E2l/sdCZf1GzQp08fizuV9+7PlKHvGWx4Fu3RYTok5cRi/F1P8XOGJKXFYur
jlIloqbkZcci8sFEex9L8nJjIe1h+OmoLXn5sTjz1G7DoBN5RbHw9Q+cusiD
vJJY/GlJvlfkR15ZLA6y1iT0hJBXHgvH97tH2UWRVxGLb9EnTu6OJ68mFju+
XnP9yiWvNhZmyU1d5kvJq4/F2+4v27amk9cYi/VL/hq+W0Necyxm/JZ/YryJ
vLZYNKZNWbx+G3ntsVgubK74chd5HbFQX+t+cfo+8npiUSvJ9ss4RN5ALBKy
UwceHydPKA5yslsKJp8hTyIOFbnFZksvkicTh9Dxl1ruXiFPPg7ie+rTJt4k
TzkOx9XeqHHukqcRB7eDvdXXG8jTiUPfZOkwhWfk6cdh7zE1kZhX5BnFwXq6
UXHlO/JM4/D5tL3NqC/kIQ5bZwd9CO0izy4OJpc4WWf7yHOOw0uztbrif5j9
xSGzOv+2r6ga7S8OutYnY49LqdH+4vCg9rr0nzFqtL84CByflboqqtH+4jDh
wVfng6pqtL84XHMX+vZTi7xlcYh+Om6LvR55GXEY6a83s8CAvKw4nG0xf9Rh
TF52HPxYHjzL+eTlxmH4HVt++wLy8uNwOHr5ufcLySuKg9PXLd5zXMkricOP
pEN9G7zJK4vDzu5Lu1oCySuPg8WS+3MNwsmriMPbgTfNq2LIq4nDhrS+1CdJ
5NXGwUB4pKruYvLq49C0Rv3KsuXkNcZhheTskPpV5DXHQSt74V+19eS1xaFu
THARN4e89jgk53KtbuaR1xEH+fFZbxX3kNcTh8qCgszYA+QNxIGldkq76gh5
QvGQOHjj1uiT5EnE48Tk5+ywc+TJxMPzWMeIc5XkycdjQF/4mMQ18pTjse+0
gqN/HXka8bCZPfVr6X3ydOLx5aJF9nAjefrx2GbmOd39BXlG8ZhTHf2guI08
03i8WrAiua+dPMRjTe1WWYdO8uziMdXx8Jk9PeQ5x+Ph/QqPbwPkecYjxf1B
D4TUaX/xUHn6Ni9XQp32F4/rfr+M22XUaX/xiGkZ+WyuvDrtLx6jWRpLNymr
0/7icf7dbOXX6uQti0dgtEPlTB3yMuLx90twYKY+eVnxKEniDT01JC87Hs7d
WXunmJKXG4/uxXsslluSlx+P/IFTrfdtySuKh2XazQwNZ/JK4vFBqFmT70Fe
WTw2rum8fsuPvPJ4GEqKRCqFklcRj2ebFMXjo8iriUfamGklV+LJq43HpFxL
e1keefXxuKvo9Sl8KXmN8eAUxGw4n05eczwU1dKmSq4lry0elw9suxewibz2
eERMLkk4sY28jniMOFY5Smg3eT3xOKn/8KTHPvIG4uF1+p3r4UPkCSXgt1F/
16/j5Ekk4MBFme2OZ8iTSYC9mabR3ovkySeg86rxk+9XyFNOwPYFjosX3CRP
IwFza0MUd9wlTycBrx34Fz82kKefgLX31/nNe0aeUQKmuRcOZL8izzQBj56c
Lmh9Rx4SsNTvlpnhF/LsEqDW0tyypos85wTcCP2W9qyPPM8ExL8TUZ/6h9lf
AtaXj2RdFdag/SUgsHfH6Y9iGrS/BMyYoyE8VlKD9pcA4WXH3eeN1KD9JeBJ
5eyDEaM1aH8JODJ0tTt7LHkZCUi1cLC+MI68rAS4ZDTmto4nLzsBGteD30uq
kJebgB7RT7MN1cjLT0CtLW9toCZ5RQkoWDf0dI02eSUJSLyTpXNSl7yyBFiO
HJvybCp55QmQd9lTJzSDvIoEfMiZrDR1Fnk1CbjUcCrGczZ5tQnIlptXsWIO
efUJCPW6KVUyj7zGBBjuXBTw0Jy85gSIP39+vB/ktSXgmXLEoKYNee0JKA3s
dHKyJ68jAel7UwoFjuT1JMC9Vbhzrwt5AwnQ1sw2r3MjTygRv8IVc7o8yZNI
xN1DRa+VfcmTScS+9qkG1gHkySeCO+X8yoRg8pQTYR1n2bCDRZ5GIhTL7mhU
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
80+A5un5H1dK6tD5J0BZ8qS5x0bq0PknQPqZE+sfj9ah808Aj545zYNjyfMU
QMf4ut5kBfJ8BOhf4py6SIk8fwHuXWq6m6JCXpAA+36zVA6okccSgDv/a/xd
TfIiBLBNX1zVo00eWwClmr8yE6eQFyvAF+GNwXbTyEsQ4Ir1uJPJM8jjCLB1
7b7h3bPI4wsQWTfF9fps8pYIMEeqfP/XOeQtE0DaybxrnBl5KwRoya6DhQV5
GQKceuC+LdqKvEwBMmVb3my1IS9LAB8PtmGlPXkbBNDL61r9zpG8bAGGnqY2
yiwib6sAD8aLa5u4k5crwEH/LYJQL/J2CrB4j/Kt9b7k5Quw8FWxwtkA8goF
UFGfwX4ZTF6RAN9Yly6IhZFXLMC1gwtGzIgkr0SAvPf1vr7R5B0TIEbH92hG
HHllAsyLedN/LJG80wKMOh7v0Mghr1yAN19784f45F0QoHx6xpfJKeRVCJCV
LG3mmkpelQABZ/I2LU0jr0YA/R61lgMZ5N0QQMj4mP69TPJqBWhcYpT2M4u8
OwKUXLpyf+JG8uoFWPrbXs1+M3kNAjjPf5zE2UpeowAa6UHV+bnkNQnQXd0+
5sZO8poFuCXMZXXkk9ciwG7rwf+j4T7janz8MI7LSBEiMkpGRANpUISL7Jmd
lYiszDp7n/uICKWshIjIjIiIIrJCRESIjCJERPTj3+v1v3p+zvvZ9bm/D+7X
ndRiF73CECxZvdpoQBy9ohAMuN5kwsJ4eu9C0Mw0Zl9kAr2SELwZ2an8fCK9
0hCcDT/u/eYovbIQrLvrEd0oiV55CPzMM9/0SqZXEYKeE8a4+6fQqwxB3ejH
q8NS6VWFIO/RnLxTafRqiZDYstSuIJ1eHRFU08SSepn0jEXw2VnrRvcseqYi
2D5f18r3Jj0zESpsWizSZdMzF+GG/57Uw/foWYgQu8++wcMH9CxFWP4mefp/
j+i1FmGQXf8jdvn0rEVosfDGn3EF9NqLUJw4YbTsJT1bES58LIjd95qenQgb
uy34dPstPXsR5i7/2u9HMT0nEdxOKjbalNJzFqF+eb2Xw77QcxXhmVtEj5Xf
6PUS4Zi4jTbmBz1PEbTn9udk/qLnJcKk3907fPpDDyJ08Updafmvpn8i/FZ5
XxlQuwv7J8Kd9DvNFtXrwv6JEGfkG7DZpAv7J8Iq79fJFxp2Yf9EGLo6qO7b
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
BP1KpWeugDb7aVqHi/QsFJjUeH6jURn0LBXo6vNlVkgmvdYK/I6UHd+VRc9a
gTu5df5l3aTXXoG4FhvHlWXTs1UgeGqruNY59OwUGLpjX9mgXHr2CrR55jQw
KI+ekwKl1mcjt+TTc1Yg3W/g60sF9FwViIq77VL8kl4vBea/niw0LaLnqYBn
p8LcPu/oeSlgFri407wSelDg5cHvIRtK6XkrcKpEfS3lC72hCqx2NLUs/EZv
hAK+S6MCTSvojVbA8UTbsy6V9HwU+Ft2sP7MKnoTFXjg4uK7+l9N/xTYH5J2
6HjtbuyfApKUoZWP63Vj/xQY+StnhJFpN/ZPgbZ9ZsQ4mHVj/xT4qnj7YWKT
buyfAlcvLu+rakZvkQJb/1WuT2hBL0iBRQMNBfda0VuhgJfQuFulFb1gBcyv
bVd1bEdPrECRse3dUR3pyRRIGX7MRtSZnlKBtet6L9/dlZ5WgRnZl9OvO9IT
FHBuPNr8a3d6oQrU9snzb+NCL0yBR5H+J73d6YUrcCj3g9FSD3oRCshbiCZs
7UsvSoGxU//tS+9Pb6sCHXeElRcPpLdDge9PLQY3G0IvVoHr1ruj+w6nF6dA
jF/Xt/NG0YtXYGncKfeNY+klKIDXXqFnx9NLVKB5p+t5hZPoHVXg3fzxXRr4
0ktSIPXgM4nrDHrJCmwomX9jph+9FAVmO5a1Cp1DL1UB16XyRSfm0UtTwPhE
3fNPFtDLUOBJ2cYGtZfQy1TgqEvrGY7L6GUpoAmJPzJpJb2bCkxI6ValCqGX
rUDnX2dHH5TQy1Hgl+egXTlyerkKZCuyP1Wq6OUpsPvilP62Onr5Cqz8V7hx
tIFegQKDBy55KVpDr1CBlsKPHnvW0StS4ONVjfbGBnrvFLhk3OD+1wh6JQpE
DI/uYBVNr1SBgHU2qwZvo1emQK/sQ1eWxtArV6BBY1eLbbvoVSjwfNzFgIw4
epUKJEUOO10ST69KAX3u/boWB+nVUmJyi5mTvQ7Tq6OEw9R3B+Yfo2esRNX2
FRUbk+iZKnHv6e+h55LpmSmxz3r1tlcp9MyVCPFrUtzgPD0LJYbH7fBwu0jP
Ugnr17ZhszLotVbis+3x/NBMetZKXJ7v4ZCURa+9EtEHr8jzb9KzVWJByejb
te/Qs1Oij+NjK6ccevZKNF46J2hyLj0nJQqPf0xT59FzViK5TNToUD49VyXW
uNTyu19Ar5cS00LWHf/9kp6nEt1Smv+zLaLnpUStX7vHjXlHD0rketrHiUvo
eSuRoEgu21NKb6gSsov9Bt78Qm+EEqP/XY/89o3eaCXaDZzw2qqCno8S3/QF
LkMq6U1UIutqoLCsit4UJbYbf83d9q+mf0osGa7odLl2d/ZPif7r6ok+1OvO
/inRNHvTNQvT7uyfEm8btbHsZ9ad/VPi3Lj9gYFNurN/SqyL7H52UzN6QUrM
yj1XP7UFvRVKOLfw9n3dil6wEnWn3jnU0JqeWInH26dWurWjJ1Pi8NNXI/w6
0lMqobQOilnTmZ5WiXF+FR+SutITlOgUp+371JFeqBIVrxqE1+lBL0yJm7Zb
Cpxc6IUrETu/Xbcp7vQilFh2MFGl8aAXpcSgEte7h/rS26qEpeMlmwf96e1Q
ojho+PI/A+nFKnHh+IP0TkPoxSmxsWym+djh9OKVmOPy3l8yil6CEm4hK0/G
jaWXqIRJyh+jW+PpHVXi6c/VE8on0UtS4pineby1L71kJXSKmPIhM+ilKDHx
YqfBy/3opSrR5d/x6O1z6KUp8Rueby/Po5ehRLY+0/3jAnqZSsRdHRPafAm9
LCWCjZ/k9VtG76YSQ4fP7bJgJb1sJVqvK5VEhNDLUaL0tvhGqoRerhIZjYxa
F8np5Smxedz6RWZqevlKzI9scd5dR69ACY/cPQ1mG+gVKtGwhcOMtWvoFSnx
csrpIyfX0XunxKnt/auebqBXooTh6Y3RdSPplSox1Xrirm7R9Mqq++T3/NOU
bfTKlfi7Z0F/bQy9CiXuv/q6MXEXvUol9tsqXz6Io1elhHi+sXNVPL1aKow4
GKHtfJBeHRVsStrcH3uYnrEKZQ4HOkiP0TNVITOox6q9SfTMVNh6PPXKrWR6
5iosLPO2+J5Cz0IFL5e7AW3P07NUwTzE9/TQi/Raq/D6zOu6KzLoWatw5mfQ
5B2Z9NqrsNbz54ErWfRsVZih0FV8vEnPToXuFxsOa3GHnr0Ktf9t2dY/h56T
Cg/RvnhBLj1nFQ7qD3tE5tFzVUFx1S3sfD69XiqMMU7PLyqg56lCh+EjHBoV
0vNS4XtYrrxXET2ocP32rNuz39HzViGmUbFVWAm9oSosHbcq6FQpvREqILIq
7dkXeqNVsMgNbVSvnJ6PCu+aN/XrXkFvogrnp+w8PrWS3hQVwrd3/qetojdN
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
u5BBK1vvremfBiZb1rQ+vq+mfxp8PZN9edD+mv5p8Cyv6eLHB2r6p8G1n1Oa
BR2s6Z8GJ1rFnq+VWNM/DbZ7vpq75XBN/zTQT7dr6HC0pn8aLFEsSb50rKZ/
GkyKTZox8URN/zTof/FHneKkmv5p0OVFn6PKUzX906DpP82kpqdr+qfB73bX
qg6cqemfBkVocKDP2Zr+aXBnzrgx987V9K96j/roHwHna/qnwd74/F2/LtT0
T4N1V22GbrhY0z8NQt4GfO6QXtM/DWYZJ25NyajpX/Ueu3zuP+pKTf80cB7u
+v5lZk3/NGi9SLop5FpN/zSos+5ib9PrNf2r3uPh2oW7btT0T4O828PWutyq
6Z8GGaXhztdv1/RPg8ONHjyZcaemf1pEdW+pK7vL3xtpoRo30351jjO/h6BF
4Iq991s/4P/rauET+U52PLemj1p4nnLs6P2InokWHXNX3HqcV9NLLcy+n1kV
9IReQy1+NP/TxuhpTT+1eOmOzC3P6DXW4uaU1Uscntf0VItTklsW6S/oNdUi
dnuTtImF9Cy0WJ06aV7xK3rNtVj+dIeZqqimt1pM+/PidNO39FppMci606yE
dzX91cKx36J6fYvpWWnR3O/4sXslNT3W4q+6fPK8j/RstCje4/H3V2lNn7W4
n6FK2PCZXgct0l5dGduxjJ6tFvtrm/xM+UqvkxYbbcfsGVVe028tpIM3Dyv8
Tq+rFnPmP/4SUlHTcy1GhVpvN/1Fz1ELt4NzsLuypu9atL2RUOzyh153LeqX
fIy4XlXTey3KTHt6zvxLr6cWTx3Er8r+0XPV4uqoC2GrjXr+33PT4nhQLZc2
dXryeaDFtg1Dnh6v2/P/nocW2uPr9N7GPfl80GLxvXsOT+r3/L/XV4uJZc1z
g0zpeWnRr+l0hVFDev216OKyx3arGT1oYT7xzW2HxvQGalEZbB+S3oSetxav
o5dZT2pKb7AW2WeSrxY3ozdUi7N5v4JUzekN1yLuZ78WzSzpjdBiXSvhYkJL
eqO0WOV5Y37f1vRGazFzeqPGOW3ojdViqGJCyjxrej5a9Ijd5lfZlt54LVpf
LDDe2I7eRC1qv+hwomMHepO0+Pg3cOrZjvSmaPGo3dF/ozrR89UiHV8PFnam
N02LxDm9fERd6M3QYrNe8cvUnt5MLZTxGXG7Hej5aTH/ar0Rrk70/LUY+3bk
1+vd6M3RwsM4YsfMHvQCtOjQ5dHAr8705mnRcHibD6td6AVW73Hh7M1t3Ogt
1OJ52P4+J9zpLdLi+uGS19696S3R4uTt7uufeNAL0mJnabDr0j70llXvsVHq
MyMveiu0WNb9r7C1H72VWkwd5+3kOIBesBZYsfZhOuiFaOEQeUc5aRA9cfUe
TzXrXOJNT6rFfw+m3lENoSfT4n15rKjZMHoKLe41f9324HB6Si3Ou3fJ6juS
nrp6j1OCluWMoqfVYoPkpOX8MfR0Wki2V1yqHEtP0MI/te+CjT70DFqMfKpt
YjuBXqgWrn+unT07kd5aLaytG/qPnkwvTAvjfj4mr6bQW6/Fl1lbkkS+9MK1
yFc/9W0wnd5GLTL3tDPaM4NehBZHM+Ylus6iF6nF1leJ42/40YvSQlP7S+VM
f3rRWiyyddv3dQ69rdV7HCwbGRpAb7sWXvMvfWszn94OLTqH1tl5IpDeTi0a
HxzuPXghvVgtfl3f8PHJInq7q/dY/CBq6RJ6cVrcNm3lVXspvb1apDjMerN1
Gb14LXaP2hfuuILefi3WBr13y1hJL6F6jxucnk8KpndIixnHV64uCaGXqMWQ
eynd1GJ6R7ToXvbnUTMpvaNatGw6UH1QRu+4FkYuoXZeCnpJWnyYcPtujpLe
SS0eBptL5qvpJWtxKXpyu98aeqe1OHQm5vpGHb0ULSLzXi63Feid00L+s1Or
cwZ6qVrMa7U4Y3QovQtajPE8sfDVGnppWvSe/t1cHEbvUvUeFZ6pDdbTy9DC
NFY9Z084vctalKdlmrptpJepRcFzk1M3NtG7qkXW3zHTZ0XSy6reY7uo2t82
07uhRQyeHA6NpndTC8OcthOtttK7rUWQfu6fE9voZWsxJf5g/OAd9O5W7/Fq
6aj8GHo5Wti/7fl9aSy9+1pYGEtia++ml6tFlV3a4G176D3U4u0wo0+Oe+nl
Ve9x4dAtGfvoPdEiNWx9v8n76eVrEX84523JAXrPtAi/3WKj+iC9Ai3EpdN7
WSTSe6HF7EZxLw4epleoxfDub0O9jtJ7pYXLOIce94/RK9LCasXyx/NP0Huj
Rb3I05rfSfTeVe/xZGWXTafoFWvx+EH/HNvT9Eq0uFwuSM+dofdRiyPNb7Yf
c5ZeqRZb3BvffHWO3ufqPU6ZuFJ8nl6ZFgsl21s3TKP3VYvx259f3nORXrkW
fVI7LnZLp/ddi05PFzS7mUGvonqPf46en3WF3i8tflp9m/stk16lFq+8ejdc
c43en+r7aZYy2eo6vSotTqsvz0i6Qe9v9R73GNcdcoteLR3WZIw6mn+bnpEO
K19FTFp2h14dHabXzquqfY9eXR0G21od2JZDz1iHboP9xzg9oGeig+X8Az8y
cumZ6lAr9MOuyY/oNdShJKHH0A959Mx0yL0e8ln9hF5jHS4Wp261eErPXIcE
03/9Dz2j11SHCIfB772e07PQQTYqbNP9F/Sa6xAQdLd3YCE9Sx3GbLAo/P2K
Xisdeh33XbupiF5rHdrd2+Xc6S09Kx1Myl4/OfeOnrUO38y76sYU07PRoaDn
UvvXJfTa63Btwqn74o/0OuiQFPxT1vATPVsdtkd7dYz7TK+TDvozultuZfTs
dAjKy1p18yu9rjpM/tnQyq+cnr0OA1qNz/z2nZ6jDl09ty5ZU0HPSYem059Z
WP+i112HP/L2aUmV9Jx1eLNz/rwhf+j11OFu2mGzp1X0XHU49/zL6WV/a+4/
Hfb9dZtVp5YL7z8d1reT19tu5PJ/z0OHEKQfc6rjwvtPB785dadcruvC+0+H
YfoRfycbu/D+06Fn/MaED/Xp9dfB6mruWI0pPehQ922rnxYN6Q3U4VM9vz2H
zOh565BnFz+sX2N6g3XIGFb85X4TekN1OLKw2/bApvSG6xAdtgp/mtEboYP6
8NniTc3pjdIh8HZVRCdLeqN18Ckd6Jnakt5YHfo0WvNqTGt6PjrYds8Oe92G
3ngdGo1r6iKxpjdRh4rlU542tKE3SYeXETv1ce3oTdHh5slCB/cO9Hx1SH7Q
OfdmR3rTdNhVvljh14neDB1CmyfZlnemN1OHFe4/bq/pQs9Ph2lT+oRY29Pz
12GQRGN90oHeHB2ctl+9OsSJXoAOLVJNlz7tRm+eDv/yx7ZY3oNeYPUef0dd
rNOT3kId7lvlz9/uQm+RDmleNo27udFbosOBWQEpl93pBemwSX3Ib0pvesuq
97jnk/FHD3ordJib4XJC04feSh1GvZJMbe5FL1gHt9oX/x3qRy9EBxvb2of6
DaAnrt7j4GE+D0BPqsPXeeG/AgfRk+nwbPX9uD/e9BQ6ZCZYjogYQk+pw/Hr
M752GkZPXb3H4rgdqcPpaXXQmb4bOHYkPZ0OSxwcP7weRU/QYdKoFZslY+gZ
dOgfdKaP2Th6oTp02fD7dZwPvbU6mB8fsN59Ar0wHX7fNbjemkhvvQ5FX24+
85tML1yHO+ZNDOVT6G3U4WzPSU5rfelF6BA3YcdD6+n0InVYF/xCeXIGvSgd
gqNtOw+dRS9ah1lnFt556kdva/Ue846JlvvT266D889vbevOpbdDh9atPLK2
B9DbqUNtT9WybvPpxepQOu2K5ZVAerur9yivnz5lIb04HdJ3jl7wcRG9vToc
Totsol1CL16Hzc/zzjZfSm+/Dsq/Vv6Jy+glVO+x3RyT/ivoHdJhHBKSHqyk
l6iD55yPvguC6R3RoaPe2agqhN5RHRrGixIjxPSO6/Aj8/z4zlJ6STq8ePOv
MlVG76QON+oN2TdWQS9Zh1N260YWKemd1iF22L1vEjW9FB1WL2y+00xL75wO
y8Kmee/V0UvVwffw7o/uAr0LOgy8XRR1y0AvTQfH0q5es0PpXareY6Nlb8rX
0MvQ4b9uyeFrw+hd1uH92F9ubdfTy9QhZ3m/5yfD6V3V4XyEfvXQjfSyqvd4
8nq3Z5vo3dBh4wOzvOWR9G7qIC0fr64bRe+2Dv7Nt9ntiKaXrcNI94K73bbS
u1u9xykdJFe20cvRoa0ksN3UHfTu61B/+5HrH2Po5epQdq5suTaW3kMd8vPd
W7XYTS+veo+/5RmJe+g90eGYVcbC/nvp5euwzate09x99J7poJ01MnXBfnoF
OixWb5pTdYDeCx0m7nloGnmQXqEOXhmtT3VOpPdKB7tXftPPH6ZXpEOT2vtr
jztK740OlR1LDhcdo/eueo/e3SdKT9Ar1uH2vOA/ZifpleiQsvpc/N5T9D7q
sCfhv1G9TtMr1SHs+qDvt87Q+1y9x+I1sbPP0ivTYabpncHfz9H7qsMQh2af
1p6nV65D91FTt7RNo/ddh1ZBsf1OXaRXUb3HDa/eDk2n90uHj8fsNj7LoFep
w6O7S3qtuELvjw6XviS9qHuVXpUOh8wrQndco/e3eo89+/bofp1eLT0UE7SP
r9ygZ6TH/OBrmqm36NXRY2x0g66lt+nV1cPjzLgc7R16xnp0yIuWtrhHz0SP
Bj/z2x/OoWeqx/eW7W72f0CvoR7PPeatzM2lZ6bH9WmJrRc+otdYj5Pyz5er
8uiZ6xGz03Vx5BN6TfUwpEmb2T2lZ6HH0ucXz59/Rq+5HlP/1g4Y95yepR4D
2w1v+OYFvVZ6OGBDsrSQXms9LOY8mNHoNT0rPap0LevuK6Jnrce7fTOP9npL
z0aPnMy9k26/o9dej9Q376pmF9ProMf+ek4HvpfQs9Uj3G7lmLCP9DrpIR6W
8qPtJ3p2evgv/LPr1Gd6XfUYEYahw8ro2evhenj152df6TnqYX371tYV5fSc
9KhX2mRAvR/0uuvxxWzy+x0V9Jz1eNItZlP3X/R66nFl7MvemZX0XPU4urxT
4dQ/9Nz02BqxaG1pVc39p4fm5HFn3d+a+0+PhQ/Kn7So5cr7T48J5R66w0au
vP/06NtcbT+gjivvPz06u2fez63ryvtPjyZTTOQLjV3/70GPX+IxHf+rT2+g
Hq+2bb4VaUrPW49b5x6vsmtIb7AeZ/KtrS6Y0Ruqx57fczLHNaY3XI+1VgeX
vGlCb4Qeq7xKLWRN6Y3SY/qsnmmNLOiN1mOwWjxvX3N6Y/XovueCWW9Lej56
tMyodeZ2S3rj9TB6NWSWf2t6E/X4YLS+3o829Cbpkdsx51iYNb0pelz0bjHF
xoaerx4H503/e6odvWl6RK7ekzCsA70ZesgT3owt6Ehvph7zrtv/XNGJnp8e
Y4qX7alnR89fj16mp4fFdKE3R4/2DpVfutvTC9DDdFT/7ZkO9ObpUb5EgK8T
vcDqPYbfKC7tRm+hHteONYrU9aC3SI+kuxM8LXvSW6LHji/bXh12oRekh2D+
PGyAG71l1Xvs2dHloTu9FXpMmbDg6cLe9FbqMSD4qP4/D3rBenSN/uqwuQ+9
ED2anemVa+dFT1y9x0cKxYV+9KR6vK3IsPUZQE+mx72WxtlvQE+hxzmPUSGy
QfSUeuybFmHdeDA9dfUe5Y+u7htCT6uHaGebpb2H0dPpMTttdovs4fQEPYY/
33/RfyQ9gx4uf0vm/xhFL1QPq3Y9Gq8bQ2+tHnURkmIzjl6YHp/9U/2Sfeit
1+Ox7q/x8An0wvW4vM/7RMFEehur95i5durKyfQi9Ih+c+dfvan0IvVQ17M4
FONLL0qPBXa+Pj2m04vWY/ywXb8yZ9DbWr3Hha/jfGfR265Hp7AuIz750duh
R6PDQV91/vR26lFx6+QOy7n0YvUo/Fgx8EgAvd3VezTz+jBgPr04PZK76TY/
DKS3V4/dY7P6LFpIL16P0OUNi/5bRG+/HisifNZvXkIvoXqPJ7e4dllK75Ae
3g+ePruwjF6iHt3K2xl8VtA7oodl8/lOb1fSO6rHP7fDD2XB9I7rUTL5i7Kx
iF6SHg/Ebp3jxfRO6pG2TXant5Resh4J5y6JsmX0TusRkV/HZo6CXooest/D
s34o6Z3TY67VxmXr1PRS9RjtlWvZTkvvgh7us1qlJ+vopenRTj1rwXCB3qXq
Pe7Z1+S5gV6GHl/T359dGUrvsh7PCp38jdfSy9TjqtEqk51h9K7qcaLj2aQe
6+llVe/Ru8r3aji9G3ro5w00mraR3k09glaHJn7aRO+2HpMSbo/XR9LL1qP/
dfPfllH07lbvsXjyviPR9HL0aGq6cyS20ruvxx/7wm8Pt9HL1ePNyM47F+2g
91CPO0sWe/+NoZenx9nwEx83x9J7osfeY9+juuyml6/H+rueXml76D3TI+SL
+o3PXnoFeviZXw1/u4/eCz2G9TR1l++nV6iH84Sxzxsn0HulR5vgqNXxB+kV
6VEn+kk3j0R6b/T4dLptXvZheu+q9/hornrOUXrFeqRXHLSrOEavRI/DLT/d
XXeC3kc9ojxcJO1O0ivVQzVN0u70KXqfq/coT7s+/DS9Mj18dhqteH6G3lc9
PNOGtlp1ll65Hh2fr88wTqX3XQ+zvzkLd56nV1G9RxvLps5p9H7p8XLAjNSr
F+lV6nHTP27OtHR6f/Q4pXtr+jmDXpUesfscTumv0PtbvcfM5dNbXqVXS8Dy
N6drH71Gz0jAtHq/D+M6vToCBtkNmPjoBr26ApyGGf4sukXPWECLhTfj/96m
ZyLg79rGo6Pu0DMVUJw48XuXe/QaCrh/a3tsWg49MwEXPj4fPP4BvcYCEsxs
P73NpWcuYGO3hVvkj+g1FSAde6xfk8f0LATMWf7tbfwTes0FjIrovdHjKT1L
Ae4nlb3uPKPXSoDNg8sv5jyn11pA/XLjNRUv6FkJKLMY3WN9IT1rAU/dIh+3
e03PRsDVyXma00X02gs4LrbqOuItvQ4Ctm/zz3n+jp6tAO25A9JVxfQ6CVic
/6F9/Q/07ARM+t3j5s6P9LoK6GclWun8iZ69gC5e51tf+0zPUYD5rH+Xp5XR
cxJQqRq8+PNXet0FFO0OayaU03MWkJ1+93zLH/R6CkgptAg4WuHK938E7DWa
1nDgL3puAtZ13J38qJJeLwHB3kUzFv+h5yFg5ryudf9V1dx/AoauXno06i+9
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
qz/BzvRCZMg5Mv2Avgu91TKk3EoctrcXvbUybPv45quzG711Mmxo5hCf15ve
BhkWdA/ynu5BL1SGUaMyPn7pQ2+TDO7L/2xX9KUXpu0xun/fNv3ohctgcErx
+nh/enIZvhflRwz0oifI8PyrkeujgfSUMtwwnfB8ySB6orbHXrsEXR96ahl2
TyzrHjOEniSDsNqmxN6XXqQMgTsXbcoZRi9KhslZxzuPH0EvWttj6de770bS
2ypD1z+912wcTW+7DC0tQjuYjKUXI4NO3ys3ksbRi5Xh7YzGQX0m0IuToTB0
hPm9ifR2yZCdsDV33mR68TIcvFSyqHYKvb0yRJZbmEROo5cgw5p6c7KtZ9BL
lGF2x+Q5mX709svg6/2xyfBZ9A7K4DLf6fSL2fSSZGgnhExbNZdesgyNks/V
bzKfXoq2x7y6qXsX0Dsiw+N3g8b3XEgvVYYr+pq/eYvoHZch1f7ewemL6aXJ
EDOs5YjqJfROantcMvW7IpDeKRkCIhL2tFlOL12GccdfDUoLopchg+ddu6qB
K+llymD7JTDmUTC9LG2PxulYGkIvW4Zap9o3umvonZfh5VhExayld1GGWytl
bl3X08uR4cz2G2U5G+jlans800w1PpTeZRnEh2N7vN9E76oMK3/GPtoYRu+6
DNNbP9tsIqOXJ8Ngd2u7ZDm9mzI4TvUv7CPQy5eh9frUtfeU9G7LUC++2mq+
SK9Ahg/nXfNr1fTuyvDg2foVkRK9Qm2POrltOkbSK5Ih2VLvSmYUvWIZtvYf
tnh4NL2HMqyfvaVF+VZ6JTLMD39wbtV2eo+1PR5oM69JDL1SGXpfnWmQEEvv
qQxWrw+m94yj91yGJnqV02/solcmwzdbx4Yz4umVa3v0CT5WvYdehQx5C7Mm
CAn0XslwUtTRaZtI740Mu44MTErbT++tDPJbqpHeB+m91/b48c6PR4foVcow
qVmLhKXJ9D7KMKD7ZJ96KfSqZLAftedzzBF6n2VosbwitmsqvWoZ/m3p3P/S
MXo1Mrw5ueTd+DR632S4V3Ryy/sT9H7IkPX1R+/QU/R+ynDA1LPcJJ1erQwR
vcLE5DP0fssQMvG6k2cmvb8yzFrdtPTeWXo6cgzdOTp8fja9OnL0zNph//sc
PV052pWWFkVeoFdPDr0/lus75tBrIMfntvM7nr1ET0+OR55Hbg2/TK+RHJdn
fF5ZfoWevhypoS4WIdfoNZFjR8Laq03y6BnIsfnSxSUJN+gZyrGwvH5Ll3x6
RnKMrTf0wo1b9Izl8OwYOX/GHXomcnTyvt+spoCeqRxG81tnCPfomcnxSzHD
r20RvVZylCft1ztxn565HLfy3h73fkCvjRzp7xwmPX5Iz0KOvfor6gQ+otde
DpV9ZnK9UnqWcqwY9ndU7BN6VnJMWzLgV9dn9Kzl8I4Q9l16Ts9Gju7Hbw2Z
8IKerRyt7javfl9Or7Mcul8mxIW+pGcnx4fmuwe0eE3PXo77Ti/eJ7+h5yDH
hbGdtnq+o9ddjqSVAR6F7+k5yhG9Pa1i/gd6TnKsP/NN/fsjPWc55j107xlV
Rc9FjhE/Q590/ELPVQ7X1ldlZ6vpucnRwV3fYcRXeu5yNJk6srj8Gz0POb6u
27Yh5Ac9Tzme7X5k0/QXPchx/Xy7Owm19PrJkfZsziqXP//9PznidA63u/n3
v/8nh8zy07UZOr34/+RY2t85sKZOr/97g+WYOHu1mVK3F/+fHP3Dz19sW78X
/58cdgd0/U806MX/J4fJ1cFGg/ToDZfj7ytN5uNG9EbK8bph4cxAfXqj5Lhr
a9a4flN6Y+TI8pl2ItaA3lg5Ehfum+xgSG+8HJL4um6uEb2Jcqw6Yp8ywZje
JDlm3lo2ptKE3hRtjx/Ta0NN6U2Vw7nZ78QWZvSmy9G2ez/fw63o+cnRYJS8
xtOc3kw5qpbd3FXYht5sbY9bDAcusKA3R47ck+M+/G5Hb54cR4t2bouypLdA
ju1fn/WxsaLnL0eoacdXZ63pLdL22GuhNMKGXoAcYyYec6noRG+JHH1W1zwN
6UwvUA6bnW6Kpnb0lsnRLGtDt3329ILk+Pk494GLA70Vcrz4rRd6sxu9YDny
2w639XOkFyLHac/ogpoe9FbLsWfGwxClM7212h5D21pauNBbJ8fyhFl5J3rR
2yDH1EuHlg1yoxcqx8DyylalveltkqNbvR6XAj3ohWl77LhqYX1PeuFy1PXO
br6zLz25HO/n1cly6EdPkKNI4T07tz89pRznk0T9iV70RG2PeQUnKwfSU8sR
9a7F1E2D6ElyrNOfUs/Uh16kHHPs9x45PIRelBzDh70c29eXXrS2xyVd/hQO
o7dVDsuIpQcWjKC3XQ7946eG/RlJL0aOmoKfX6NG04uV48lnz3ibsfTi5LjW
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
c9ZSeldFdJ17/8m3QHrXRZjKW8vF5fTyROgcmuHQfgW9myLeXttffGolvXwR
99683eCzit5tEdmNunV6GkKvQMSBLivuLF9D766IiKGZqxquo1eo7THgb7td
6+kViZilGXC9+0Z6xSJ8U4XAK6H0HoroeeeW2eTN9EpEtKtqnvMxjN5jbY9G
E/3DZPRKRXxx3G1kpqD3VMTj0S8yjwj0nou4HNRpVj8VvTIRqVsDGheL9Mq1
PZ5OO7FQQ69CxKbib5P/SfReiVj03V13ayS9NyLGmm1Ksd1C760IT7erY85F
03uv7XGy/u9R2+hVijBaO3L/q+30PoqojdvmuzaGXpWIiuxHNc120vss4taT
drv3x9GrFnHm75yBbrvp1YjY2+7wh1vx9L6JUOHTtll76f0QETTT2fN7Ar2f
IqZvXv1KTKRXq+0x8bzU/gC93yK6X9btdfogvb8iWr8c/MwniZ6OGroNJMXT
ZHp11PhgU9gtKIWerhoPBpk9bHiUXj01Li6YFrorlV4DNZKV+2wdj9PTU2PL
4dcFV9LoNVJj3U371ZNP0tNXY17lMstPp+g1UWNk0zN5Yen0DNTo7fB7mVkG
PUM1Oozo1/poJj0jNZoEyi/1y6JnrMa3yJsLi7PpmajxLM3QeNF5eqZq5N0b
l/XvAj0zNU5U75y9NYdeKzXiTJ7rd86lZ66GrGfHU+cu02ujxpLxC6eOvkrP
Qo1Jq47Ve32NXns1+sfUHFmbR89SDftMt3GGN+lZqdHi0YY/+/PpWavx91fu
Abfb9GzUeGPeaPjtO/Rs1bjrMfzbrLv0OquRNS06/vs9enZqHNjw0FtdRM9e
Dc2etp/aF9NzUGPVxVk7Tj+g112NmWWH+g4poeeoxtC6H14/fUTPSY2eVj0i
g0rpOath4bXKVe8pPRc1Gs7Nfr7rGT1XNapkdZSOZfTc1Hh00Nvx6gt67mpc
viaWTK6g56HG0TcFmz69pOepxo5Gpl3CX9ODGqFdptwze0uvnxr+Q/euOfqO
3gA1xga87NC/kp6XGn00XW4Wf6DnrUan1KVBiz7RG6yG4Z1T5jqf6fmo8evT
z9ytX+gNVaPcsG9A5xp6vmrkO4abnP9Kb7ga6aPzskd/pzdSjT1BBnNf/6A3
Sg3l1jFN1/2iN0aNoNMxpw1/0xurxtTiJ9MO/Pnv/6nh/b1Dg97//vt/anQz
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
bz3fx3ire20r4G0QKbued4evFfA2imSiRM879QYe73SbJbcXv4WXzT0e3mkX
9A7eJu7R91py8/fwNotUcefTjZfv4W0RKWKske2+D/B4l/xwmTX7I7wc7jFt
yDWfT/C2co/NZrcy+Axvm0hO29dNv/8Z3naRtnY7W7j5CzzezQufWUz5Cm+H
SMJQzWndvsHbyffxbZv8upXwdnGPs/uaX6uEt5t7bBgzZdV3eLyj1macH/UD
Xi732H6/SYcqeHtE6neqZOKPKnh7RTrX78eZcz/h7ROpy2PTJum/4PHeObnn
uMG/4e0XqeW/iJMt/8A7wPcxY57B2z/wDoqk3XLz6EPV8A6JNGfvpaNz/9a+
/3GPHhW6ff/Vvv9xjzcajmxSU/v+J9LDkQ6HHtfUvv+JNPDLAO3tdbz+846J
dGn+tOHTNLzw/sc9Gqn3udX1wvsf97jpqGaDel54/+MeOz8Iu8n7/95JkVZf
qN69VhPeKZH0BrXUGFsfHu8F5Z6DHbXgnRapKmHMjt9a8M7wfayf9vdiA3hn
uUf1jiCVNrxzIg1qczVnqA483oVHPv5q3RBenkjuvQ0DPzaEd16kg3c7bzqm
C++CSG3Hh/5Y0AjeRZHW/Zzp318PHm/DpWvXN9OHd0mkxWZnvj7Th5fPPe4o
89ttAK9ApNge9dbOaAzvskjlV2w/kSE83kOH9fHWNYJXyD2+m7jqjhG8K9xj
8op3G5rAKxLpaKN9HhON4V0VqUPWLdmlKTze2Q7fX/9rCu8a93immVuhCbxi
7jGwhyA3g3ddpJonw8sjTOHdECkhNqWbnRk83m9qspd/NYN3U6RI4WLZKXN4
t7hHq9cuac3hlYjUe7/O0qAW8G6LdNKzw+PmFvB4O94KdHplAe+OSDlRcYv2
WcIr5fv4Tb4/uyW8uyJlpB5x8LWCd0+kesb35xu0gsd75pY/d+63gndfpA8u
lvZbrOE94B4v0dwpreE9FKl08Ohb3WzgPeIeXy1qU88WHu+8GdtnX7OF95h/
rzYoKl7VBt4T7nHVB+uotvCeimRp1zixgx28MpHkY85FP+zg8dbuO7hlXjt4
z7jH+4nx6fbwnnOPE9YUDG4P74VIY3+fam7VAV4597jsaezbDvB4D2xe9+Ih
B3gvucddNqYpHeG94h7desf07QTvtUh7rk4418QRXoVI1hHLjZ84wuO96sOe
8dud4L0RqdHcm6emOcN7y/dRv7Jxr87w3on0fb1JdAMXeO9Fmtip+/GbLvB4
Pz07TG9dF3gfuMeBc0eN7QrvI9/Hso2HHV3hfeIe4y7o/HGF95l71HgVcakb
PN52kvYBVXd4X7hH6/Za4T3gfeUeD/YPt+kJ75tIi7yn7vnYE16lSL9LpLrH
3eDxjh1zODS1F7zv3GPl3Z393eH94B4X/f7XzANelUjXmlqEPPeA91Mkr60e
23YTPN5Hu0b9meEJ7xf3WLBwgKcXvN/c45Btm3W94f0RybiisOqON7xqkZbO
fB+w0Qce73/aBhsn+sL7K1J8plOlix+8f3wf2w3qU+MHr0ak4SdmrCvsDa+O
RLf8Mz/LfeDx7v3wpE9kX3gaEp2a9GS1nT+8uhI5Vdf58NUfXj2Jcpa39jwd
AE9TInMLP3VaP3i8Vbnj3wT1h1dfonru6b1aBMLTkmhmca74KhBeA4neR954
uW8APG2JRn362j1pIDzepSlNM3yD4OlIFNC423ODYHgNJTq3Mbzrg2B4uhK5
OM1ZtiUEXiOJduRteDJlEDzelsHnnbsPhqcnkfy8fHG9UHj6EmnHN3h4LRSe
gURJ9ew7rR4Cr7FEn+V+qVFh8HhH28Te7TAUnqFEDw6J7auGwjOSaIDvoZS8
cHhNJLp4p7QkfRg8Y4m6j/3VNnQ4PN57fjRPtoqA11Si1mnuN95GwDORaHWz
UTaHI+E1k6jR9tSZKSPgmUo0v9vWq31HwuP9/fJlK+NR8Mwkmjj0XcKTUfDM
JXr6Rq9wexS85hKFzHa0iB8Nr4VElxuGxPUaA493r7XTLzWIhmch0YH2q81u
RcOzlKjtqROT142F11Kitf0e540dB89KosaPa5o6jYfHe9Fk64l/xsNrJdHv
vz5nLk2AZy1RbMY4I2EivNYSPbdcNjZ8EjwbiYbs3X3CJgYe72se1/U/xcCz
lcjrxpeo45PhtZHo6Ejjo6lT4LWVqP2XrrqBsfDsJNo4f+gI06nweDc1Sj74
fCq8dhIt27S+QW4cPHuJapzzhiVOg9deovgLL/Z6xsPrIFFFiJZmowR4vIeX
24WVJsBzkOhmQsDujdPhdZTIr/6UOpNmwOsk0Qm1MKhLIjxHiTq1Obi9JhEe
7y1H7lQXzoTnJJFZ758DlVnwnCXKuGueEzkbXmeJ6o7v9csuCZ6LRIk/R/T/
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
mpQ7f0uD15t73KaVdnoJvD4K5bu2e5i2FB5vt8sBnYKXweur0P6wKakt0uH5
c49vhLuv0uEFcI+zDrbfvxxeP4X0G5amJK2Axzt1zc8S3wx4/blH++Z2jVXw
ArnHk72SH6jgDeAeA0be2CLAG6hQ6KMFNrEiPN5FMTkzu0vwgrjHvwVX68nw
grnHFW+timV4Idyjpd701Qq8QQpl7elUGKWGx9vII9jCYSW8wQqlXU+Iq1oJ
L1Sh6hGrLuWtgjdEobjPx82Wr4YXptDLeY8mh2bC4x1uWJNntQbeUIWuZ7cy
ebcGXjj36Owz8fBaeMO4x/Njz6SsgzecewxZauSfBY/35he7xhqvhxehkGlC
8Ykn6+FFco+aX/R3bIA3gntUNxkdvxHeSIWm23Y92isbHu+3h8N0tTfBG8U9
+iWNuLUJXhT3WJp1cN1meKO5x3HnGozbAm+MQqerng9zyoHH23lJ/X1/cuBF
c4+mdpr5W+GN5R53+IcJ2+CN4x67T94dvh3eeIU0r6jq2O6Ax3tW+IFBn3bA
m6DQx7e3tx/fCW+iQqOTqqpTd8GbxPdR1zwocDe8GIX6rXPLMc2Fxzuvw4hf
z3PhTeYeT8/vn7sH3hSFdvffkp24F14s38cn+d8998Gbyj1OedO30X54vBvW
6K4v3Q8vjntUdfy68QC8adxjyyC/SQfhxXOP++LXdDkEL0GhR7TyY80heLyD
bh7zunIY3nTucdTDlcoReDMU6vn179vIo/AS+T4usPJodwzeTIVsmnjL347B
4525Ofr16ePwZnGPLkt6LjkBbzb3eHGnKvgkvCTucdC1Fy1OwUtWaNLLT66v
T8HjXTbdaPn+0/DmKDRYq0tZ0hl4cxW6snKIi99ZeCkKebSdvaTxOXjzFDp0
dN2jB+fg8W7X56xjTh68+Qqtv/dsYex5eAsUajJB8373C/BS+T7+auOgeRHe
Qu5xad/5xRfh8Y4zj7mz+hK8Rdzjzox2o/PhLeYee+6f41AAL417LCq5WVUA
b4lC3sN/2J6/DI/3sfems5cXwluqkMOcnsWhV+AtU2iTXqR1qyJ46Xwf18+b
8a4I3nKF0jtuvnL4Kjzedc5espx3Dd4K7nFAxTT/YngZ3OPThgXG1+GpFIqc
6tD86XV4gkK36gyM3XEDHu/e4rQL8TfhiQqdaqVu5n4LnsQ9Hjg6SbsEnsw9
ej04e6sEnqJQ85LqJlm34fEWRrccP+4OPLVC9Ss9TzmVwlup0OyFYxpXl8Jb
xffROG1M/l14q7nHnB3HhHvweN/tcrXRsPvwMrnH/I8jbR/AW8M9hhoe/vQA
3lqFur7urHPiIbx1Cu1MDI1Y+Age75bas/YHPoaXpZCyem19syfw1iuk0+7M
0BdP4G3gHo+X5eY+hbdRoa9969WdWQaP97gHtqFez+Blc48T++xs9BzeJu7x
z8R/pc/hbVboUvqK4OwX8LYo1KPFvq2TyuHx3rv71u8uL+HlcI+9vgfWeQVv
K/d4rdnmK6/gbeMeI3tUKa/hbVdowcfhASMq4PGumpuyod0beDsUijHY9O3b
G3g7FXq24WLvM2/h7eL76Ph67ZJ38HZzj+d0Pge/h8fbPaiDj8UHeLkKHXwW
uPr1B3h7FLKbFvd+/0d4e/k+8jdY8id4+xQylI8ofp/h8V7c+n5F4y/w9iv0
5+Aft4df4B1QaKqPpZjzFd5B7vE2vYz9Bu+QQkOjR3fvUQmPd/H3RSs0v8M7
zD0u3v6s+Du8I9yjSVGXzB/wjnKP2z4sHV0F75hC2a6Nnzj8hMfb5LKz88+f
8I5zj2GDF5//Be8E9/gm8cHy3/BOco+z1nQc8gfeKYXe6Jxe0KoaHu/INU9L
31XXvv8pVGJft/2Rv7Xvfwr1OWmTMu9f7fsf38eA3iX+NbXvfwo5PprQtmkd
X7z/KZQTszzpKe//3v8UMv+75/oODV+8/ymkWnGzdUJdX7z/8X20rEx0r+f7
n3dRoZl7TK5qa8Lj/cG9u1WJJrxLCkVdH5aQVR9ePvc4Yu7lcVrwCrjHzxtb
ODeAd1mhc/MuTK1uAI93V8NXF/O14RXy79VsbTNRB94V7tG5/eRhDeEVcY/n
++fZ6sK7qpB2yNSmn3Xh8Z7zQppwohG8a9xj/OHTC/XgFXOPmvcMB+jDu849
Kr+jzQzg3VBooK3FiRcG8HhfOuyhv6cxvJvco19U1ExDeLe4x9KFR7yM4JVw
j+O2NdRrAu+2QquqCiPvNoHHu9GS9weyjeHdUWi+qUGDmKbwShX6sd1pWFcT
eHf5PnYftLdOM3j3FHpaOKNeUTN4vAeFZw5Rm8K7r1Dh25O7RpjBe8A9Jj2p
aWcO7yHfR12NQZXm8B5xj+tabz/THB7vrA5+1UtawHvMv1dPjx8YYgHvCffY
P32LhSW8p9zj49yfry3hlSkUO+VGvwMt4fEu//d1Y7IVvGfco6rpd79W8J5z
jy279TW0hveCe9wXnvXQGl65Qkdpzpec1vB4d7i5wXeqDbyX3OOo85k9bOG9
4h6/ln/QbAPvNfe4oIHX9TbwKhT6Z2S/MrMtPN7xm/u9HW0H741CFZ1j3Tu2
g/dWoYiLovSzHbx3fB8HHXp13h7ee4X8Xpb2WNEeHu+T039lDOkA74NCTlot
XrRygPdRoa0r3V3fO8D7xPex7aj0Ix3hfeYej6Y+ndcJHm/NPls7BzjC+8I9
3ruc1tQJ3lfucfy7h0+d4H3jHn/pOe50hlepUOlSx4UJneHxDjAPuefuAu87
97hzegedLvB+KNSl5+p5JV3gVfF9LDpxO6srvJ8KWQ5/bDfeFR5v+X1NsnM3
eL+4xznWN6u7wfvNPer52hZ0h/eHe8waN0vsAa9aoeiOy64N6wmP94Mzu1u1
cYP3V6EBA65P/+wG759CF59+KTzRC16NQt2nGlsucodXR0176rhOG+ABj3dr
cWi+GcHTUNPqVsnm5QSvrpr0DqyfsscTXj01LfDKOz/TC56mmn7cemHi7Q2P
96TRWpP0fODVV9PTb3Zn7/rA01LToIUBTTb5wmugpkLjKeNi/OBpq6lXjnCy
a294vA90OWig0Qeejpra5t8ZXdQHXkM1rQv9eVTdF56umgxfmzca6Q+vkZoW
JfYaaR8Aj/fvBiMPVQbA01NT7OoF2mf7wdNXU7ldzvCl/eEZqCnseMG+kEB4
jdV0te9bTcsB8Hh7Pmg0tGIAPEM1HZ3YKffAQHhGaurwJ0hjThC8JmrKTk8Y
3DsYnrGamrZYtcMwBB7vZbuP/30YAq+pmmrcHgVtHQTPRE0J1/7lTB0Mr5ma
3kS0+t0jFJ6pmiI+egfWHwKP9825YzddHwLPTE1+Bkt/ZIbBM1fTyQ27/McM
hddcTY6Oxes7hsNroaYt5z5//RkOj7dZUJPeF4bBs1BTxrMua1cMh2eppnrT
wj4NiYDXUk0z6yZ5W0fCs1LTeylr1ftIeLxHtT737sgIeK3UVHrwucf8kfCs
1RTgU18JGAWvtZrO3m5b0TQKno2aXKL93cqi4PHe8T1G2Dkanq2aLBeryhPG
wGujJtnkQDePaHht1aS97fZynbHw7NSU7FpVVjIWHu8vBWZd1o+D105NY8Pc
lo4fD89eTQ8rIh87T4DXXk0DZ813+jsBXgc1XdTZsqhgIjze3dbk3xcnwXNQ
U679G4fhMfA6qsn6pO6CNpPhdVLTqoCOpZ8nw3NUk+6jgfYnp8DjPS8mfu6i
WHhOavperb41YCo8ZzVNXHGsjXkcvM7co8XD2eVx8FzUFLLnb/GeafB4X3a3
aj0rHl4X7vG6V6J3Aryu3OOI6CK96fBcucfPaS3vTYfXTU1r5+2M3zQDHu/G
htcKYhLhdecesz81d50Jrwf36GQ0VWMWvJ7c43mXi0Wz4Lmp6UXwENOVs+Hx
DnsxK2ZkErxearoWv+6cfTI8dzV5aZ41/p4Mz4N7VJ6NPzsHHqmpva3m6aVz
4fHecLiN4aAUeJ5qMvbrG205D56XmpaWTjpeMQ+et5r+jc3QOzgfno+aplXt
GzVnATzer9NKDvdOheerpuGmP3SMFsLz4x63m0Y+WgivN/fYveeBrYvg9VHT
icIIrbjF8Hg7hs8L75kGr6+act5u2lN/CTx/7jHpUt0bS+AFcI//o8HOonp+
vzaOm1ISGaIQoVAikUjEllJRJJFkDklkSBmSmZBE+n6mIolCRCKFSETIHIWU
RAiRCEWevZ7/9Tu8Tl5n77XvdTd/P1nZAc9ZRY1iNJPm7oTHe2Wfvv/MwuC5
cI+Xxk/8HQZvHPfosjzx2i5447nHl1F14eHwXFU0xv/8+Cm74fG+Uv8svnsE
vAncY8Sfn58i4LlxjwYGzuf3wJvIPZ4eeXDjXnjuKtpLc7+PjYTHu+nDbY7t
98GbpKLg2cdiXu2DN1lFX6vufD0eBc9DRfM2VdoFquBNUdGzNq3lEQI83uPi
LT43E+F5quiaxeSR+SK8qdzj9VWqAxI8L76P7tEfFsjwpnGPbzNtLBR4vMXA
V3v/KvCmq0iraePym9HwZnCPQg/ryBh4M7nHno67p+2HN0tFvucXvu55AB7v
YofwQVUH4M3mHgtP7bwYC28O97jgUfHWg/C8ucff3we4xsGbq6KUHbqhHQ/B
492zo/WLN4fgzeMej0/rdyoe3nzucej6zasPw/PhHu/EFYw6Am+Bin55XTdt
mQCP9+JP5esLE+D5quj12mb5hxLhLVSRR4s+xouPwvPj+7h/3NrBx+AtUhGZ
LXvQ8Dg83ucu7zPKOw5vMfc4Pm2VkATPX0UHSwrzZp2At4Tv49K6rqYn4S3l
Hht0CfxxEh7v+j1060oyvGXcYzfvzjtPwVvOPaZsXeZ+Gl4A92h7NKdLCrwV
Knrw6HaHDynweNt7f16cegZeIPdYrZ0dkgovSEX9tgxo73gW3kq+jzqTFrY5
B2+VivSOrLxcdA4e73BLpU1iGrzV3OONS/OXnYe3hnucXHJhaDq8YO6xvKF2
0wx4a1U0c6WR94MMeLzz1R3OKxfghajISfJtPu8ivHUqumy8a2a/S/DWq8gi
Izn19yV4G1R01Omh+vVMeLw7P6/22n0Z3kYVRS5sf3rKFXibVKReZ9XEMAve
Zr6PYV5TPmfB28I9dlp34vxVeLznnTjYYFM2vK3c47Br7s7X4G3jHu++Pdr+
OrxQ7nG6xt9X1+FtV9Hgyt4TknLg8T6xzuVI4A14O1TUTXvp7xE34e1UkRAb
6aKZCy+M76P5ubj8XHi7VLQ+q+DHgVvweH93rXXyvQ0vnHss1T9gcQfebu5x
2Yhvf+/Ai1CRW6M5o3Pz4O1R0Y3ILUrkXXi8hxomVk67B28v95h6y7bXfXiR
3KPdJ6HqPrx93GN+y48XH8CLUpH2vP4jtj2Ex3vLj4n7XB/BU6no99agdx0f
wxNU5N9eHvr2MTyR72PCxYhT+fAk7nFwcdnqJ/B437nZwMruKTyZe5xiuKtl
ATyFe3xv/6qwAF60inqvXjAwvhBejIoONAvbvvgZPN5tlZNFg5/D26+i7b0f
mDd6Ae+Aiv5e+LYl7wW8WO5xbLtnQhG8gyoqfzG47+yX8Hh7LZq60bQYXhz3
+Gftkx/F8A5xj+GxJlkl8OJVlNE5O2TnK3iHVWSW/Oaheyk83vHD1XsavIZ3
hHu8b7Lmw2t4CdzjTOd7qWXwErnHr/7d172Bd1RFQRv2Bjm+hcf7Y6uzt9uU
wzumollxT7u8LId3XEVP+v9envgOXhLfx+xON5e9h3eCe3Qb3mnYB3i8B5TN
WtK0At5JFSUGbL72oAJesor0myToRn+Ed4rvY1Su37xP8E6rSK3Hxyv9PsPj
veZcC53az/BSVPTF3nzB9Up4Z1Q096nbpd1f4KVyj/MDW3l+hXdWRS4/xbmG
VfB4Z4deSP9cBe8c96j3Uiv9G7w07vHov1mbquGd5x6HdD/n/B1euopUt+ya
6f6Ax1tzqs/00h/wMrjHih0pSTXwLnCPa06oBf2Ed5F7bH7fk37Bu6Sil9FV
JzV/w+Pt1ken0ZPf8DJVdPPSoMmxtfAuq2iYi+dx3zp4V7jHl8H1Fn/gZanI
yP+AW/2f//7/VCTXZyXk/v3v/09FLSPKaiPr//v/U9Fmg6bjp//77/+P7+Mp
4/heDUb/z7uuokU09mcV7//9/6mo9MHisZcajsb/n4omz94Tu63RaPz/cY9V
Z6pdG4/G/x/3uOmJQ6cm8HJVdLbNr+i3TeDx7h3f8espNXi3+L1qYWO3pim8
29zj9ZmSnTq8O9yj+6ZPLTXg5anoz5vD9EwDHu9lgTej4pvBu8s9qlW8X6wJ
7x73KGjZWDWHd5977NlvbyMteA9UZHd+wts8LXi8MxxWDBFbwHvIPRYK4bNb
wnvEPS7IKDXVhveYe/z9wrJGG16+isJ21O/IagWPd4OO3Yp3tob3REWBx0cN
mNQG3lMVVVjP32bQFl4B38c7259/aAuvUEWPvZLMzurA4+346e6mde3gPVNR
5tqvTx3bw3vOPbZoa9pWF94Lvo/7Lde/1IVXxD2aTXmcqAeP997La3ot7wDv
Jb9Xx+8PHtYRXjH3WHLlftNO8Eq4xyWvDR92gvdKRd4N1FZF68PjXbinV968
zvBKucduY7qad4H3mntMWbSitgu8Mu7RNiL3ugG8NypKepSiH9EVHu+u3vlL
PbvBe8s9VtdcN+wOr5x73NKhQ2V3eO+4R51hi9MN4b1X0bfDM65uMoLH28dy
YzuXHvA+qKgoJ95Xtye8ChVNmHwjs7QnvI98H8vftz7RC94nFVmvbD4/yBge
79PqZhfIBN5nFfWQXFs27w2vUkWKccCcJ73hfeH7mKFKizWF95V7dErXXNgH
Hu9fz57PGNgXXhX3uPDvmfq+8L5xj7UG6rfM4FVzj2G2Xvv6wfuuotud5p2a
bg6P94gToY2N+8P7wT0OO+7xrT+8GhWZ3M1LujQA3k++j9O//NtmAe+XitpU
tnafMBAe79B1A492soT3m3ts6fHnrSW8Wu4xdrXr6UHw6rjHfjGH1wyG90dF
nlmXf9lZweN9z7XUWXsIvL8qGlXaOO7ZEHj1Kkpf1vNHvDW8fyrq28jJyX8o
vAYCHYr02281DB5vXcPdVY1s4DUUaFfqafu7NvAaCdTQ7rEsDofXWKCg/B+f
Z4+A10Sgirl6tn0IHu+ZP6yFGoKnJtDjrdMrskbCayqQY/sNw8Ns4akLlJlw
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
PJHvY2X4MPdceBL3uP70ni634PGO1n785v0teLJMrQ7+sEq9DU+Raau5XnjI
HXjRMtVmWZc65MGLkcl/wnTLNnfh8S4rXb+j6C68/TJNWX7oZcI9eAdkutso
p/+y+/Biucd977YOfQDvoExphprP1R7C4216to/Zg4fw4rhHu/GblEfwDnGP
T5Y9nfsYXjz3OC+qd798eIdlqv+Rtu53PjzeAduePbr2BN4R7rH9n567n8JL
4B4TuwRPKYCXyD0OHnm/eyG8ozKNzvU2/FwIj/fFKdtWnn8G75hM5h+O3tn4
HN5xmY6svmPg/AJeEt9HzcqA9kXwTsi0W2mV+6oIHu9Gphb6SS/hnZRp5cVJ
SwOL4SXL9GnsqusjSuCd4vtYpOhpvoJ3WqYnizIX5b+Cx3vM35KsA6XwUmS6
Et6one9reGdkGtilh69FGbxU7jHZIfNvGbyzMnUesbB17ht4vCPv75oX+Rbe
OX6vzjqVMa0cXhr3+PVhi17v4J3nHjd8n131Dl66TPNa66ZdfA+P9/O4IZrb
PsDL4B4HTJvhWgHvAveYve5Mx4/wLnKPE+Oavv0I75JMJ8uuTT31CR7v7ivK
k1d/hpfJPTZp1tiuEt5l7lFl6tHyC7wr3GOPcUmFX+BlyfT93NJ/h77C4+07
et/ExVXwrspU/PRc4uBv8LJlmuhTWNewGt41vo8/a8fnVcO7LtOw7Z0PC9/h
8U7Ro1+zfsDLkannsTnOpjXwbnCPQ7Ye/FED7yb3eDvx+5Wf8HK5x6m3HXf+
gse7tuJTjPtveLf4vRqsXdWlFt5t7rH5APsPtfDucI8x7nJqHbw8mfL6rPwc
8gce75GZ8kjHv//9/3GPLpdUber/+//jHouLPxTV//f/xz36Nxye+O+//z+Z
dP4ZRi5rMAb/fzLtiBhdPrThGPz/cY8GvtZNG43B/x/3eDps9wPe//v/4x4p
+bXSeMz/vHyZvB4+GDSvCTzeD2ZX7+ynBu+JTPbf2pX8VoP3VKYLm6wsrjeF
V8D3sa1X6G51eIUyxceHvJiiAY+33sCD/QybwXvGPV7P3vy5GbznMjWe9Lbg
vCa8F3wf36r32dQcXhH3GNh7g7MWPN6zm7rkt28B7yW/V4UlxqUt4BVzj70i
1ya1hFfCPZ4/+yBQG94rmSwcC4yoFTzeRwt/r9JsDa+Ue/TVv5vfGt5r7vH3
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
V/AuS2R3qc3Ylq/hcR+Y2F9R8RreFX6v1rk15tTBuypRXmrCmNA38Cr4vdpu
vdz4LbxrEi3dfKih8S087p/9q5xK38G7zu/VEz82Z7yHV8l7dNX94FMP74ZE
Ex/ZOfT8AO8mv6/jQnLefIDHTb8Xvz30Ed4t/r27umDE/E/wbvMee5RnuTTA
uyORWPT2VafP8O7y790RHWyffIbHvfK62drtX+BV8R6DvWuSvsK7x3v8ONNq
eCO8+7zHBbmr2nyD90CiwI4nnt34Bo/7hvTYIu87vIcSjR70b3nkD3iPJDpx
tvdjs5/wHktk7u1o3vQT3hOJtr2ISi9rgsfddcbK+5m/4D3l96rSHhP/3/Ce
SdQy+/pC/T/wnvN7tW/Dnfo//33/k+j9Yc3+x/7+9/2Pf+86DU1b/O+/73+8
x7t+N92b//v+x+9lixGaqi3G4fsfv7fmetolcf+fV8vv57KQ6Cru/33/499D
qtPX27Ych+9/fL99lpyUuP/3/Y/fY7Ls2tZK8Or4fV1boB6nBO8N3wPTYpsb
SvC4ZyeXh1u2gveWfz+dfrBmSyt47/j93fpd8b9W8N7z+83jd3VEa3j1/PdN
TgfVK63hccue6g01awPvA78HDM1DstvA+8j//06jjJ9t4H3i38/F3oeDleE1
8HvvX/jT88rwuEudk9v2bwvvM/8eW7tscGZbeF/4/XA/N/BLW3hf+T3Ya+cy
v3bwGvnvrykn9p9uB4/75f6rD/uowPvG7/2fj1utUIH3ne8TfRhYrwLvB783
Vv7z824P7yffq5sdlxS3h8fdVqdPUXdVeE38ngyzuLdIFd4v/n2wy7HFa1V4
v/mefZ5g7N4B3h9+nwyLnnCgAzxukyWpC7TV4P3l98rVlTvnqsH7x/dOM+/2
czV4zfx7ImDPHyd1eC0U1HnbaaPd6vjz3F7vr4/r2BE+d8aQ53OTuf/vc0FL
BZXNayh42BH/Pe5/ZS1vjNSAp6Qgmw5aTds04HHPnGDQV6UTPO598qEe0zrB
a6WgN7XOqXc6wePuO9B/q40mvNYKCp4VWyFowuPefGbuNyUteNy326zpFaMF
r42CVD0F1+ta8Lidc/fNtOgMT1lBi56VCps6w+M+ZXSr/E9neNzfptV8DtOG
11ZB5se+di/Xhscd19za2bQLvHYKKnDpkpTVBR7383X98r53gcet88DmQmBX
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
eNSB+x+pik2Dp8Cxy4+arLZMg0f9XvbTzupp8CbSHtcOTJ2jBo96bdqoqlNq
8KhPfJz0c4A6PEWOPZ0ze5KHOjzq4XvMlj9Uh6dEe7xvH6w9HR51+IjNXOJ0
eNQ37Xc+/DUdnjLHvp89/M1FAx61TkeK4j0NeCq0R+3LS9Q14VGnbb8dEKMJ
j/p18ZPTXzXhTeKY/NDW+w5a8KhXWvd+LtKCN5ljR5MHT5g8Ax71gxZZs0Mz
4FEPUp/q93EGvCkcM/Sfd9JWGx719oIlpTe04anSHkXWfFTQgUf9wWKL3D4d
eNTT4nebdOjAm0p7bDi6ZflMeNSnJwmOX50JbxrH6ryuFI+dBY96VO6dzpBZ
8KiX/akZ3ToLnhrt0bRtwWJdeNQl0d83ZejCU+fY71qxeOnZ8KjnKMjf2jYb
HrWfu3p7w2x402mPmfOljefAo277tmx+2hx4GrTHBWvdh82FR+0Y6RvjNxce
dfzjsPxnc+FpcuzRmLg3+vPgUYu7CIcL5sHT4pjJ+dy5Q/TgUe/uuefqqQeP
Om9u3eEqPXgzOPZ5T8c1XX141BrlP18n68PTpj2OHCbxTx8eNbd6gu6G+fCo
GwSaax/Mh6fDMdn3Cw5qGcCjttKxuhpvAG8m7XGH66s+A3jU90r8RdcawqP+
NzRC+64hvFkc07NJdJy2AB514Mm0iCML4OnSHlvzLn9ZAI/6vfqDF/ZG8Kgn
BbwUuWUEbzbHnAu7NFQYPOoTg/pXHWDw5tAel0rt7WbwqCUTFC9ZG8OjNnul
/ey6Mby5HAubbPJvvAk86sIttmp7TeDN49i33A2270zgUWv3B+1euhAeteei
A+ezF8LT41jqkRPVsqbwqJufXfi90xSePsfGTSyc0mwKj9rOo3LFokXwqGMu
N+64uAjefNrj94/CEWbwqAcbDXgcaAbPgGMLDkj31ZvBo95RpaJitBgedc5Y
3WXnFsMzpD26LNo21Bwe9bT0VQIfc3gLaI+fNlbUmMOjPj1vx9d5S+BR14VF
TTyzBJ4R3ccHp8wHWcCjXiad6b/JAh6jPToUpTyygEddzFWVzVwKj/rX++ZP
SUvhGXNMd+aXcf1L4VH77hy0aP0yeCYcu3BntO/9ZfCo30qoJmssh0c90Xbu
3djl8BZybPUp8w/fl8Ojjn/jMNbJEp4p7XG6l3GJJTxq8cAQL9UV8KhNbh5J
PLwC3iKOhQw+e/vTCnjUecuy39tZwTOjPSaUyBRawaPWaHxqqGQNj9pjytuN
+63hLeaYwPtbbKc1POqGa6I3V9jAM6c9/h37LtcGHrWVmdrIcbbwqKOO6uvv
sYW3hGOlz5dueGsLj/rfROejS1bCs+DYvI0+Ny6vhEcdkLWnVcYOHnXmj2OS
O+zgLeVYhxE/p8kOHvWkgznrFq6Ct4z2+KQ0Kn0VPOoTcs9zh9vDo366rr3J
3x7ectrjhT7xF/bwqBd/HjrLcDU8S47t1RvvzK+GR31zr8YBMQd41N8fGF7Z
4gBvBe1x1IqGagd41F6O64bMdYRnRXvkt85IcYRH3dwZ7jBwDTzqcbMS9nms
gWdN93FXaubDNfCoY+5er9N2gmdDexxWPvC4EzzqwSvrp/92gke9IKXTbp0z
PFu6j29/77nnDI86R2P4RfW18FZyrDtwYm3MWnjUU2/N+Pt1LTxq1yHG0xxd
4Nlx7NRyG5vbLvConye6hUxeB28Vx0Y2BaYdWgePeqlq5JOP6+BR7/dJ+mXr
Cs+eY7evp0/Od4VH/etvvuXE9fBW0x4XP9y+bz08at+YV3zHenjUF+o+VC53
g+fAsTeK/75fdYNHPXHTSGW5DfAcaY/Zykt3b4BHHd83M6h1AzzqR8z07GJ3
eGs4JnbI7kGGOzxqk2qPXmkPeE60R/ntCsEe8KjzXA8tfuUBj/rzhZNbjTfC
c+bY9C+XTqVthEftoX/r3rBN8NbSHsMf9/htgkfdUPFa/vkmeNSyMp8Xzt8M
z4VjK9aI+Ag2w6OOEsqcGOIJbx3tsWvyHU9PeNT/Zs3prvKER60XsnjMbC94
rrTH0tXspBc86suSnp7/vOCtpz2u3JWwYQs86kmno4sebIFH7dx2ukPLG54b
x5I0s0YleMOjfhpUbPDTG94G2mNRtcdaH3jUi0XfHLvrA496r+XXgmm+8Nzp
Ph4f0nbEFx7196YxI3p94XnQHqdO01vtB4/ay1fP7ZYfPOrUPIsjKlvhbaTv
1X9r8g5shUctb+7d0r0V3iaO2R4LHWbjD4/66IuY2Xn+8KjLlTiXCQHwNnNM
ZPPVQ3sD4FEbXrmb8y4AnifHgn/WNi4NhEd91fid2JVAeNTdh37ojAmC58Ux
1afiTruC4FG7jhsX2RwEbwvtcf307EXb4FE/v2jw8uI2eNQje5cPHhkMz5tj
FvNdtIKC4VHv3+e3+mUwPB/a48O94Ubb4VH/konPOLcdHrWu07nnQ3fA8+WY
z7lrA3x3wKO+0F2mXrsDnh/dR90XK/V2wqNW3P0+9MxOeNQO936lD9oFbyvH
4oZL1mzaBY/6kZ1C/6Nd8Pxpj2e0ps4KgUdt8s7I+kQIPOoQLetd/SHwAjh2
fdv61PW74VF/Lgqour8bXiDtUWz/T41QeNQeK45PiguFRy1IOr/8Ryi8II69
fH0j2GkPPGrZaRVcyR5422iPfg0PVcPgUUfd6P52OAwedemAv4qfw+AFc+yv
+QiLVXvhUevFKgUW7oW3nfZYr3NGKRwe9WXlheX7w+FRd2xe+aUzHN4Ojqlc
dZ9gtQ8etfOvbWbX9sHbSXs0Oeg3LgIe9dOo5JN7IuBRS9ZcLH0bAW8XxxaN
v/lxyX541GFuj+Sy9sML4VjBpSaT0ZHwqL/19mzZEQmPeobBwKSmSHi7ObY5
YlTJwgPwqM9VTupKPwAvlGNNo2fLSh2ERy3vbGYUcBAetW2q/eYXB+Ht4diR
D5viDQ/Boy6fvfMWfwheGO0x9HC7WBQ8asOyFGnvKHjUwVKX5z+NgreXY1dW
3XafexgedfeZJzEph+GF0x7bW/IHRsOjdp3R+8YjGh51SvBgqcpoePtoj7dl
5+kcgUctLT51/fEj8CLoPlrNi/59BB515Ikl19cdhUdd3OzYfO8ovP0c+zlt
i8T0GHjUult36x6LgRdJe8w/uvZbDDzqCwMFBx2PwaN+s+TK1dvH4B3gmELc
nVeTY+FRr35ZIxoVC+8g7VGlTbsnFh71I8/vjivj4FGL5Yjtz4+Dd4hjxr/l
sibGw6MOWahevy8eXhTt8fD8Qe/j4VF/rlmmaZkAj3r6hLX2OQnwDnPMfYPv
XrlEeNSCjLBLuxPhRdMev8Y+a02ERy1rKPy3+Dg86hX7c9Uyj8M7wrFDj+7Z
jkqCR10qW7c7OAneUdqjc8f5V0nwqPXSflYbn4BHHfBR4k/aCXgxHMuYM0FV
MhkedXuoptXWZHjHOKZ8f8HO58nwqJ1GWJ2bfxIe9XF718eCk/BiOfbkrH/f
kFPwqId17FPxOgUvjvaonbjsySl41GHb07bNToFHXVCcJziZAi+eY1/FH1T8
S4FHPcP65dcNp+El0B6TuyZWnIZHfa7lj/mMM/CoX6tJBSScgZdIe/RXPP3z
DDzqlQXa99eehXec7qOIyee7Z+FRP7CwHa8mgEc9KH7DoqMCeEm0x4Yg314B
POrtkw4kr+bgnaD76HXi7i0OHvWHnAsfVHh41Kp/CsYe5OElc2ydaaXxBx4e
9anoRi8bIbyTHHtW+zExTwiPeqTCgOIJ5+BRW7hLd+49B+8UxyIyVUa3n4NH
ffvbrAXLUuGl0B4NF226kgqPWjdyVdyYNHjUPo833tyVBu80x9LH7HjXnAaP
+s3aqJFm5+GdoT2eP6V/6Tw86tU9GRtGpsOjjptbdDQoHd5ZjlXuqbrxMh0e
tVh5c6vRBXgC2uPIL5KpF+BRh6weNFfiIjzq64LRrr4X4XEc+9Qx5XDtRXjU
03XmXtO7BI+nPe4wf33mEjxqQYnD0MEZ8Kjrh3rN2pwBT8gxGZsQ58cZ8Kgt
Tx45MCsT3jmOHWw9c+VEJjzqu+rZDf2Z8Kj7/UuGuF2Gl8qxuYVPZ5Rfhkft
P+itg2YWvDTa49Jv++Ky4FG3x4te/pEFj1rl1dgXTtnwztMeJ6uJ3MmGR520
RV9j6hV46Ryrzl26KvoKPGrJfqewz1fgUZst8rm46iq8C7THI3tqC6/Coy58
duyvUg68i3QfFfhpkTnwqLU9cmy6cuBRe14uDbHKhXeJ9vj9Wdq1XHjUrxe0
Pxl3DV4G7fFA36891+BRr6waOqXtGjzqI2PHr7C4Di+TY/ddNHZkXYdHLZJu
KBydB+8yxww+WT7akQePOnjeuh9NefCor4RtVTa9AS+LY13l4Usv3IBHrSqd
ECSVDy+b9uiQejYgHx71Ke76gxf58Kifvb/fa1gA7wrHRsysVxAWwKO22Nm5
WLwQ3lXa453fW70L4VHflhie8rQQHvVPm4llc2/Cy+HYrFMzPqXchEft84aN
E7kFL5f2ON3GdOMteNRvAtx8Km/Bo1a4GXhCpwjeNY7ZD468c7wIHnXcsqTu
30XwrtMeE9LHuN6GRy3amM/KbsOjZlMeek4vhpfHsZ3erxKOFcOjvnbtQ9G3
Yng3ONbT/7fDsQQetbrZSJniEnjU7keVDafcgZfPsbPPZ26MugOP+uVE09ie
O/AKODZ6o13hyrvwqFdkebTl34VHfehH8AjFUniFtEejQ3oRpfCo/x446fa+
FN5Njs17cumI5T141AFyt/Jy7sGjzlz3uEWuDN4t2mP662GhZfCoVT5/mv2m
DF4R7VFPZJ35fXjUSXtlojLvw6OufjA5d1Q5vNt0H0fNaQouh0dt5rhYvLEc
XjHH9vCrZ5o8gEdd0LnZ6fwDeNRfZ+6KlKyAV8IxrV3R2Vsr4FFvvnv65fMK
eHc4JhyWNdjgITzqJttiLe4hPGq5lOrVopXw7nLM5m1ruFclPOojGl8znlTC
K6U9Bg6pm/0IHrXIrTEDTz2CR20wZNr0AY/h3ePYtuV6du6P4VFfSbTYU/EY
XhntsXHNhRlV8KhVVb1rEqrgUa/zCe3/WQXvPsdOXo+Z6vIEHvWzvwLr0ifw
ymmPi6/uUquGR20Rczf1aDU86oi62qreangPOFak+O7n6qfwqH9u/DGp6Cm8
Co7NzBa3nFQDj9q7T377wRp41OfZdP5DDbyHHGs9aFBpUwuPWqF6+fe8WniV
tEd5FyWFZ/Co41z9LMKfwaOuvLA3sP0ZvEe0xy9xZ5Y9h0dtrH+u/MpzeI85
tiv82pcxdfCor1eUTQipg0f9adQLs5Y6eFW0xzXv/cxewKN2F/46eekFvCe0
x65h90bWw6N+OUuhJ6geHvXoEC35hnp41XQfS40WspfwqA9JWnunvoT3lPa4
cn2SRAM86r8pASW+DfCo57VFdNU2wKuh+6h5XFb/FTzqzKDzRmdfwavl2Ltb
NzYPboRHrSxaEb+5ER71GsuGW48b4T3jWOLx7vZZTfConzT1Syc3wXvOMYmp
Iwz+NsGjXuSr5OH2Gh71njydY+Wv4dVxLP+fSYFmMzzqr4tXvo1rhveC9njM
XaqvGR715hfb5jm3wKMWKh1cf6cFXj3HGjclR09thUctd+Xi9ehWeC9pjz8L
mz+3wqM+YvxIwv4NPOr7h5p0b76B18CxgU971iq/hUdtMG7goci38F7RHteP
yul6C4/6ysVJjVZt8Ki7vuiKXW+D18ixKfPNdMa/g0e9bp/9mrB38Jpojw83
7W97B4/6mczOLIt2eNQjnA7XZ7XDe82xJedSBsl2wKOO6M7U3NkBr5n2qHvb
/nUHPOqfIU/2mr6HRz3rXsulC+/htdAeh/c+k+qER51uN3hAYCe8VtrjaVn1
+k541ArvVFcu6IJHba81L1TYBe8Nx2K3LUkX74ZHXVnk+NS7G95b2qPYlj9P
u+FRG6/YrTrvAzzqXUlHrU5/gNdG9/H12Z0iH+FRf5p65dzGj/De0R797jyu
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
8KijE3XC/QzhzaE9NppkPDOERz1AdeVz/QXwqPV93AcIFsCby7PA69vUhxjB
o876e2ClpxG8eTx7b5YcWmUEj3pyzMV0XQaP2qWu8Gkyg6fHs2TFR3/+MnjU
tRubVDcYw9PnmVR2j9UDY3jUS/oG7NIygUe9j41KjTeBN5/2eHBSVZ8JPOq+
J7o/nRfCM+DZTHmzSXcXwqP2drVfPs0UHvX5C5uCj5jCM6Q9ft7BfTGFRz1B
//BD+0XwFtAew1O+3VwEjzq2IlNRxQwe9cNRt5ccMINnRPdxzZOAbjN41EzY
ctp6MTxGe+z6cv/6YnjUubMGfxlvDo/64y7ZCXvN4RnzbFqpqtk7c3jUbpLz
/JYugWfCs9Mrl5zMXgKP+kWKY6msBTzqUW1eH3dawFvIs2Wau+WaLeBRHwg6
arJoKTxT2uOts1suLoVH/WfIleMjlsGjnmN5pzhwGbxFPPM7XtNZvwwe9aWm
t6ONlsMzoz2qfl9wbjk8aiVfsc1DLeFRO+bJxftYwlvMs4R/ardqLOFRVy2e
3z5vBTxz2uOxZdJnVsCjNn3hPH+QFTzqUCVf901W8Jbw7MamsJhHVvCoe7Nj
82daw7PgmcZP/k2SNTzqjca5w/ut4VHzh+7NXW8DbynPXlU/d71vA4967LiO
wxq28JbRHtf/vBZrC486+qJE83dbeNRlX8ZLOK2Et5z2OF9Tt2QlPOr5+xas
VbWDZ8mzoIcrDh62g0edLeN69ZMdPOrONf6v7FbBW0F7PLdPtHAVPGqX7gRt
JXt4VrRH3TTH/fbwqGtD8iI67eFRS90rv7xiNTxruo/DX77IXQ2Pep9dl8g4
B3g2tMfTfzT2OMCj7msbbv/WAR71TC3FvUsc4dnSfdymfemyIzzq80XGz2TW
wFvJs2ZR23/b18CjHr9ig1rTGnjUdklBtgud4NnxLOZ15O50J3jUFVNPnB/u
DG8Vzwb7Xaj2d4ZHbXSj4HedMzzqHQMqpxiuhWfPsxzzxhX8WnjUH4993CHm
Am817bH+n3CLCzxqN2Xpx9Uu8KhPb1bpm7MOngPP6q7MUklZB4961C/TZQNd
4TnSHk1WbfNwhUd9IGqj4KErPOqSp9srtNfDW8Oz3+Oiviauh0c9x+3UxN/r
4TnRHi9lmK9zg0d9qfeW/z03eNRt86tS1DfAc+aZYkRzWcwGeNSOlZ8/fd0A
by3tcfSg8Y7u8KirnEYvuu0Oj3po6hTfyR7wXHi28MOc5EMe8KhDZ5vf/egB
bx3tcbfDB9uN8Kh773mOzd8Ij1pTKsR44iZ4rrTHVUe89m2CR82fOZPYsQne
etrju6zbyzfDox47o+T91c3wqK2Dn8rIecJz49nh228Md3vCoy4T+7ax1RPe
BtqjlWjcYi941PNPjL2Z4QWPOqh52jvpLfDc6T5O0x8ZvAUedaffUv1XW+B5
0B7znTYYe8OjdhnoczTNGx518pI9N4b5wNtI36uxx1r9fOBRD3/JST73gbeJ
Z4tVcubM94VHHe5Zuk7gC4/65tVnUUP84G3m2fdf73I9/eBR6yzsa6ryg+fJ
M6/DQ4fO3gqPOq1m3KyTW+FRN4/XcP63FZ4Xz8ZtMDywwR8etV2G5ZUH/vC2
0B6/ujRoBcCjrjDYOiQhAB714P3hM34GwPPm2YJH8Q5rA+FR75BN3Xc3EJ4P
7dH5eua0IHjUH1Pv1x0Jgkc97eOLgb1B8Hx5tn5O5/TV2+BRnw79bXdrGzw/
uo9lkmEqwfCoZUZMvHggGB71cvsZtd3B8LbyLPIs+2u9HR51Sbv1tLzt8Pxp
jzPcbCbsgEc9Z3tgyN4d8Kj9ivenvdsBL4BnF8WTnizdCY+6zSr9V/ZOeIG0
x+T8yWN2waN2bKmw3LULHnWC2qvtzbvgBfHs8dYP/KIQeNRDC/5WXgyBt432
KDLyx4jd8KhDLZSVg3bDo74RN3Ppy93wgnn25eXCIKNQeNSak+zOnguFt532
6OXxYOgeeNR8TnCvzx541K9+H1So3QNvB8/GmJ5crBcGj9o6+tLWM2HwdtIe
a2+eGrQXHnXZhMf3Nu2FRz3A/XXPo73wdvFML/OT/KxweNSB3waangiHF8Kz
y4YyPv3h8Kjf7598Yv0+eNSTHs++c38fvN08cx6zuFsjAh71ibWrx8RFwAvl
2dO0zexHBDzq4T07PZ32w6NePDc6oWQ/vD0827vndJFqJDzqm/cvdxyOhBdG
exxRPOpzJDxqndXVBqsOwKP2ErR6FB6At5dnqR29x5QOwqNu1h5SuP8gvHC6
jzvGtHUehEe9qmTqCKtD8KiPDdXTu3YI3j7ao7WF27goeNRDTq45sicKXgTd
x9YteW+j4FHvVA9tWXIYHnWuf8ywrMPw9vPsQ4Fg9uhoeNTTBl112RENL5L2
uPTuoaZoeNSn42tzFh6BR13X0NaYfgTeAZ5JT/4hJnUUHvWyLeIzA47CO0h7
zJV3enEUHnXJH/VIwxh41L9NDbL5GHiHeDb7yPKXYsfgUfs9WzvY+xi8KNqj
gp/W02PwqNvc966eGwuPWvFyXHhKLLzDPHP4LswYGAePOmHBtececfCiaY+R
ZQMq4+BRD62qU9eJh0e9cOz7lcfj4R3h2W6XX6G/4+FR3zg/7MK6BHhHaY89
E2ruJcCj1pyn1a+eCI96Y5jR1GOJ8GJ4Jii3sv6WCI+6YeT6XY7H4R3jmaxD
QOrt4/CorbiIqslJ8Kij3if+PJQEL5ZnpTrnJ/UkwaP+t+PG8pUn4MXRHu88
CM4/AY86UKKBm5gMj/qyTffDfcnw4nnWcbL/W0cyPOpJb6SULE/CS+DZ2ulK
Fjkn4VEnB+gEyp2CR11TaHJm9yl4ibTHwSvLW0/BozZf5v5lcQq843QfE7ZN
yEyBR33r1QGzUafhUf+YnOwXfBpeEu3R++LJV6fhUW+5VlhqfAbeCbqP/ZUf
087Ao25Z1CQneRYe9bijPSZbz8JL5tnK5wO8n5+FRx0zcVTSfAG8kzx74DGp
RCCARz04S7drCAePesGPRbJeHLxTPNtuZG/0hINHnXNg0+bZPLwU2mPVjviT
PDzqaXKHb/3j4VGvX5fSvkEI7zTPUtIzpSuE8KjrPhXNn3EO3hnao94T94Rz
8KiX7W2J+XkOHnXkgy/5a1PhneVZsfTgt3dT4VH/dpCVUkuDJ6A98qrzjqbB
o/brnLu+Nw0e9cWZS6JXn4fH8eztTsfrt87Do1a869Wskg6Ppz0O2y1xMB0e
dYLtUd0P6fCoH506u9bmAjwhz8TeZh/MuwCP2kTjztUJF+Gd41lIYM2rvRfh
UefdfCvafhEe9efB37WXXYKXyrPpy8XWXLkEj9ojUW7/mAx4abTHRrWsXRnw
qBumzK9vzoBHPcZn2SCzTHjnaY/XnTUvZcKjPvzXx37kZXjpPLtnFrY36DI8
6gExsZdeXoZHrV/HPzPKgneB9qiY++9cFjzqrI331CSy4V2k+5j13NY3Gx71
5L723bXZ8KjXsp/n9a7Au0T38aDE0zNX4FHXPBn/Z9BVeBm0R3lN1c1X4VGb
uy6wenwVHvXeCyt2zsqBl8mzws/rzp3IgUf9Xc//cX8OvMs80w7f17c+Fx61
V0WCSnkuPOrUUWnLNK/By+LZa8e8bXHX4FGPE5YLflyDl0177KqvcLoOjzpm
VtfXkuvwqB/s+jNxah68KzwbVDp8SXQePOoFkooBn/PgXaU9rtQ+veoGPOqc
FOP7hTfgUX94a/NZKR9eDs+mam4YH5kPj3p9UNCirnx4ubTHW5G+VgXwqOuG
nEi+VgCPWtrywt1xhfCu8Wzp8YIPewrhUUc2PRzbVgjvOu1RtdHY4iY86l8+
H72ybsKj1s37lzj6Frw8nvn8G1m84xY86guLVTqbbsG7wbM3MbNGmxbBo574
wnTBhSJ41A5KqzZJ3YaXz7P4TRvjAm7Do36cvf3mi9vwCngm/vPQO8NieNQL
jU+NFBbDo959KENfvAReIe2x+tYG7xJ41F/kq44+LYF3k2ca65tvzL0Dj3rj
xc+tKXfgUXNfRIaL3IV3i/aoP3ruxrvwqMfsm+JaeRdeEe3x4ZzDOqXwqA/L
mF87XgqP+t4ah9e/S+Hdpvso9Bzqeg8etX73rlll9+AV8yxA94jz9DJ41JdD
zhw4VgaPuqM068q3MnglPFMZXtLgeB8etbPd0yHF9+Hd4VnS6TczppTDo37a
9tUhqhwetaSWaERPOby7PDPbNvbyygfwqPcWTXuR/wBeKe1RVF9EsQIe9XfL
pRoRFfCotZOcVr2vgHePZ56vvcMsH8KjTp2652LOQ3hltEffY7VylfCox93g
/u6uhEe9ckDOtDeV8O7z7Kh5qY35I3jUD449C8l8BK+c9lj/Lm3UY3jUC5T7
ngQ/hke9ffPQ368ew3vAs6tXxk0xqYJH/eHn9BXnq+BV8EzVxHCH5BN41K5R
lsKtT+BRpzx1efT8CbyHPHs+buuP+dXwqKXdwpW5aniVtMdL8UtFn8Kjjuw9
F+T1FB518fzrZ588hfeI9rjv/oPZNfCoZ1e+6D1ZA+8xz3xHdyoMqIVHfdHp
92L3WnjUb89J+lfUwquiPX5QSJnxDB61w+wZZQnP4D2hPe5mn34+g0f9+J71
OJfn8KjFpdxMS5/Dq6b7uCrQR60OHvXuM/tPHK2D95T2+O74nd46eNRftNK7
V7+AR60RnD+m6AW8GrqPtyvYpHp41JzYK8+D9fBqefZyxYeED/XwqGVP/C2y
eQmPekXziPd5L+E949mhacoyCg3wqEv9ZhqGN8B7zrO/NxZubG+AR6030C52
2St41AFLPAqvvIJXx7PM2OC2MY3wqDvqD44IaYT3gvaoclKvpREetbPnJTez
JnjUSVdvHrnUBK+eZ9W/HuWNfA2PWnLh65ag1/Be0h4PfxrW8Boe9d6agXNY
MzzqwvEy61Kb4TXw7Jvb5CiJFnjU2hmzc31b4L2iPX41a6ptgUedarBaXL8V
HvXriM0zz7bCa6Q9PtrpNPgNPGo72ejIzW/gNdEenU9nP34Dj/pB6uWXs97C
ox708fbg5LfwXvPMcE611t+38Ki3h7audmuD10x7LOsNL2+DR/1Bakim5jt4
1FPtx9TFvYPXQns8O3Vg3zt41Cnt86Y7t8NrpT3OsLC70w6PWnr7mj1TO+BR
Ly3eciG6A94bnu0XD6353AGPutgqpn/Ve3hvaY8nBFNvvodHPbvlirVyJzxq
X7W7uyI74bXRfdxam9rVCY/6bX5blVUXvHe0R5EfP691waN2sBCfPL4bHnV8
nLxlWDe8dvpefam+va0bHrXYJAPe4gO8Dp4Zey2vzPoAjzokZ+330R/hUV//
7au08yO89zz7tHCvxeuP8KinR8cFmvbA6+SZe63wzIUeeNSCCdfKpT7Bo365
oexLwCd4XTwbnVk3of4TPOoV3zrMFnyG1017NPzlJ/wMj7p0/7BT4l/gUf99
NOGe9xd4H3g2b4xWz9Mv8KgD1hrJz+uF95H2mGa18HQvPOqOj67eIl/hUavM
DUja+BVeD8+c9kSUVH6FR510P7FL5xu8T3QfR5yXTfoGj3r46htGf77Bo14s
eLDZ9Tu8zzwL63gZX/YdHnWhdvet6T/gfaE9bu9vP/YDHrV2idSo7z/gUXsO
VTJY0wevl2fnrHU8ivvgUb9ONjk25Se8rzyTb7UtiPoJj3qluvvbnp/wqI/6
b5Oy+wXvG8/KCw7MK/gFj3rQoOT1ir/hfac9Lr0YHfEbHvX2+MLr73/Do77a
UNls+QfeD551T2qSyP0Dj3rqlh5d+X54fbTH3AEuof3/vf+jPf6RPvSm/7/3
f7RH00k55n//e//Hs5FHdBsz//73/o/2+GyRmMw/eL9ojwr2Otv//ff+j/bo
vmlN47//3v/RHjN37DcZYIv3fzyb9T0q6zz1/3nUPgtS6iUH2v7P+8Oz9MjM
Qf7U/3v/R9+rj4s066j/9/6PZwpjn9gbiMDr55m9S8teTgQeddz5L5dEB8H7
y7PKnkHPvQbBoxabJzugehA8auMwVfU5g+H949mu8rkrTw2GR3195JLQAUPg
DRCyT6sd092HwKOeznk9rRgCj9r9fcifGaLwBgrZWZ2jqomi8Khf7jhr9UsU
noiQyd7J3ukiBo/aSuLOuVIxeNRRNjWP1cThDRKy0pNv+46Kw6P+1/pN5as4
vMFCpjddbLnDUHjUgQFywUVD4VFfLlTjJknAGyJk7YPmPzwoAY9aZdmybx8k
4IkKmVOCs6LtMHjUSa98ltwYBo+6enJYgIIkPDEhG+YdezpcEh612TX+frsk
PHEhC+vP+bxsODzqwkX3xl8dDo/625Hni8ZKwRsqZDOet/uGSMGj9pz4M7lF
Cp6EkJ3zkCg1GwGP+vXl8R8vjYBHLf9DQ056JLxhQmZrtMBk20h41EcPrNjS
MBKepJCVV607zqThUQ+S8y9OlYZHbbhuX6fEKHjDhSw4PWG03yh41Fc/pS54
NgqelJB1z8vbpC8Dj3rq3vK4szLwqF0f1N8cPBreCCE7Kd31bvNoeNTPHP6M
rBoNb6SQjeCHz9eVhUdt0TnRPVkWHnXETO2Yv7LwpIWsaKdxvtsYeNQ/79i8
KR8Db5SQzRq2YbjWWHjUPrZBc+PHwqNOPxXp2jcWnoyQtb5JOuwsB49aQePC
tTty8EYL2erAgtdT5eFRx998OPSIPDzqR4MbZ32RhycrZGLLPzrbj4NHbZL4
78DNcfDGCFlI48iryuPhUedNUXkVOR4e9WfvWaLd4+GNpT1eN9W2ngCP2uOv
neP1CfDkhExgtjFivAI86oaj2y+HKcCjHl136EWbAjx5IbNUPCWydCI86kMb
MzSyJ8IbJ2R3s26tklWER/33x+OwnYrwqOex5ouvFeGNFzL/g59rTZXgUWc+
Efl3QQneBNqj3Gi1EcrwqFVcp9gGKsOjdrowZ3e9MjwFITv+efH5BSrwqKv1
HKqFKvAm0h7DPX+LT4JHbVaxa4rPJHjUYaOOrKiZBE9RyAocz+yYNxke9Tc+
S3h6Mjwl2mNX8SORKfCoPWc9/bFxCjzqc7veKD+aAk9ZyJrufl06UxUetbyk
6LYkVXgqtMeVYwV/VOFRH02ZVuE6FR71/bd6X8umwpskZAM1l07UmAaP2iDI
yTx2GrzJQrbtlrf/92nwqK8M2ZOyRg0eddfyY2XFavCmCNmU49ynKerwqNc1
XR13WB2eKu1RtdT0kzo86uc+z3zspsOjHpn37kTBdHhTaY//ftxR1IBHvX/x
0A8RGvCmCdntmHFjOzXgUf+qm268QhMeta6SoVeuJjw12uMmy0R5LXjUF7Jd
bodqwVMXsjd9fu/faMGjnmgcLrNkBjzq1YfiDS/PgDddyOKqz22U0YZH/Uj+
eux2bXgatMf19wsbteFRm1x80WaiA49615f3I9J14GkK2TX933rDZ8Kj/hQu
ucF/JjwtIVN/qHC0biY8aneZGTcMZsGjPruGtXKz4M0QsnqhtaSYLjzq0d3r
52zRhadNe9QNXFetC4/6UMj+qDmz4VHfLT2ee2o2PB0h65dMbxowBx71PLt8
cY858GbSHk9XzHw4Bx51ZluDk/ZceNTtmh8iE6l1/w+kPW77m/1rLjxqp6IR
DS7z4OnSHkWVh9ybB4+62nLmDHU9eNTDkhY6xOjBm017fL1y31c9eNRhUz0y
HfThzaE9+gbXFenDo/6ad3Dg5PnwqLUGnJx+aD68uUK22fyS3cf58KiFx27u
sTWAN0/IGl88unDDAB61nPLrGgVDeNS2mz/1hxvC06M9Xhk4rcMQHnX5z1E2
yxfA0xcyEZPJIVcXwKM2jJqdNtYIHnXwU7MnIUbw5tN9HLf6V4sRPOru9Zsn
L2bwDIRM9dJOywwGj9q19/B2aWN41Kfmn+a3GcMzpD3uu1zZYAyPemTl7e/M
BN4C2uPoaqU0E3jU+51aLYYthEd9+1xvoN9CeEa0x+7BZ58thEetO3vMA31T
eIz2uHtq71lTeNTp9+YpDFkEj7p1uMViz0XwjOk+rlqztWoRPGr7M1tO6ZrB
MxGy2He77yWbwaOu1Irp+WsGj1o0WCC/YTG8hUJmfPvKwgeL4VHvErvrrWUO
z5T2uKI2Kd4cHvWnpLaSPnN41OrN37ucl8BbRHucJj7m7hJ41Gf95Nk0C3hm
tMcb6p5HLOBRjx5okPDFAh615ZLlRfZL4S2mPcau7bi5FB713XrfUSrL4JnT
HpX3GhxYBo96nmecR/cyeNT+V4XHrJfDW0J7/JVbcH05POp2k7K34y3hWQiZ
0uE6qb2W8KjX1HTMe2cJj/r4+F/rl66At5T26DbsSPYKeNTDMibkyVrBWyZk
i75qtuy0gkcdZmA0rNkKHnVBhNXsRdbwltN9rHR1uWgNj3qGbMChETbwLGmP
zhE5gTbwqM+lJjbW28CjbvqQJmZkC28F3cc5N3TO2cKjtg19sGboSnhWQnak
7OV+n5XwqMulurNqVsKjFrHvr59nB8+a9nhWavAZO3jUwe2KWoNWwbOh+zhD
Z/WmVfCou4NNwh+tgketWmybMdMeni3tUdz9eZI9POpTVtsG9NvDWylktScO
qK9fDY96RMuJlfdXw6NeonYxVMMBnh19r24tTI91gEddlF/59LsDvFVC1jew
6c8aR3jUsyx6VEsc4VF7xw2wVl0Dz572+FJ61+E18KhbVSalfloDb7WQTfDS
rbJzgkdtn7PoZ4ETPOrY36smKTnDc6A9Lty0fL8zPGrR6B3Bnc7wHIWM1UZx
K9bCo941IeVh7lp41Nc2ZH6Td4G3hvaYUaS4xwUetfq3qiVvXeA5CdkGw5aA
JevgUZ/d/+X05XXwqOsfDSqXcYXnTHscI/tluys86hVrVSc0ucJbK2QH0+aa
LVwPj/ruR3O/9PXwqPvnOJ4c7gbPhfa4x6vU3w0etf/9kI91bvDWCVnGiKNy
hhvgUbfbnzXhN8CjVhZkbxFzh+dK97Gj5PgWd3jUx7Vriqvd4a0Xsifb33bO
8YBHPazk2+gUD3jUi4aKGQ3cCM+N9mgtt9ljIzzqgmS1+Icb4W2g+9iif0t7
EzzqGerL2hM3waPe7O8s/XsTPHfaY4HP/HWb4VE3iYS539sMz4Pu49LYGHVP
eNS28Xx+jCc86iMNOW++esLbSHucdG+4oxc86oFbns+97QVvk5DNz213nbwF
HvW2P32HD22BR51tKnH94xZ4m+l7NXp8s603POopzzQk8r3heQqZi8IC3Yk+
8KhPuq9Yu88HHnVt5rqDHT7wvGiP37deXe4Lj3rJgn2vrvrC2yJk+yITROX8
4FEXPU7V3u0Hj7pvTJ5jqx88b9qjS3nE4q3wqL3P11/O2ArPR8jO93S+kPaH
R906949IsD886glhwzVf+cPzpT2WT7Q3DoBHHTdSe29aADw/2uNq40vDAuFR
i3E2z/wC4VEbv3f79ywQ3lb6/6gTpDY/CB71tR2RtoIgeP5C1lOStHvINnjU
6hIXzntug0e9waagumobvADa48mHv3WD4VHXt76acjL4/9FoZ2E1v38XxxEp
JJIiSSEhpGhAuEkUKVKJkhQSJWkulSiJkCljUnsgkUwZkyGSREJIFMmUkCEy
Put6/ut3+D55na39ufd1fekFS0QXww8O/8Looe2D/kXMD6eHXnu+k7Q4nF4I
9qjQ+/aQCHroP1OG/dgaQS9UIsy3TejdHEEPvbzK2c4jkh76cF+f0KuR9MKw
R7/w/f2j6KH1TiXd3BBFLxz38c/ur5+j6KFTrQ/ruK6ghy7bkG+Tv4JeBPZY
cXt572h6aGudmr2J0fQiJSJ2YeP199H00OdyWjVOj6GH/trUpcfpGHpR2ONY
fWvtWHroRYlmAXGx9FZIROadSbtexdJDP9WcdXXKSnpoTc/FDbkr6UVLhOPB
KE2NOHro5E/J46Li6MVIxHWLfUtq4uihW8Yd3W69ih56VPGlgkOr6MVij53L
36qupofOnVXbJWQ1vZUS8S7j6+jK1fTQ+u/aLBobTw8910RzizSeXhz2GNn/
gnICPfT9KyNeLU2gtwp7bD+l0/0EeujJM9xHjlhDDx2/x3/+vjX0VuO9Whuz
USGRHrrZMOXMokR68dhjcMaL0kR66KUXjncYtpYe+mDrQrOda+klYI92Dzz/
rKWH1t7+ap1XEr01EuHy9PvJoiR66M36ytWD1tFDl/hrKW9ZRy8R9zHPcNj3
dfTQ4q/lHPf19NZKRORE+8TL6+mhT22ce6xfMj30x4plT9Yn00vCHnutatOY
TA8932erkcsGeuskYt9R6azzG+ihH38/tVp3Iz10F1F0JGEjvfXY49pHD99t
pIdeW/a25bRN9JIl4kq3X4anNtFD//Hs4KKVQg9tntVzZWwKvQ3YY+OQQy9T
6KEPjxD3bTfT2ygRr+Km/83ZTA+td9Orv/oWemg3tWDHiC30NknE9tkJK55t
oYe+k5kqt9pKL0UilOsPlB3cSg89YdjZnyrb6KFjom72DdpGb7NEnL36xP7R
NnroL+0bwkdvp7dFIgY7/c3M3E4PvWivamnbVHrozJe63/1S6W3FHgeZ6JWn
0kNrhlhNMd9Bbxv2mO8UsncHPfSGNgvTW+6khy6aGla8cCe97Xivpq79UrKT
Htry2a6exrvopWKP/bInpe6ihz629ELgr1300PV5pXs8d9Pbgffqv2fXru2m
h/ac9OnjwD30dmKPm1pqpeyhh37wUG3Ctz300B11+y6dvZfeLtzHRaY7C/bS
Q6/OnXilbxq93RKR/2Pm+6Q0eugfwlfjYxo9tElSpHDaR28P7uPd9YvP7qOH
PtA9bZtOOr29EvF8Xs7F1en00NqHCt68SaeHdvlcpma/n14a9jjyheWJ/fTQ
Jau+LOyWQW+fRLQpab05OoMeWnTROP8igx460s2gblImvXTsUWKheiSTHvpj
ve0INQm9/RIxYLibd5iEHnr+Cr8NVRJ66H2F0afHSellYI8dNj2XS+mhuzjv
b99BRi9TIqamHTMNlNFDr627MrdCRg99efD9pFFyehKJ+B1Sd2K/nB7a7GLT
0zYH6EklYpmiktKSA/TQ2fbdTcoO0EPXpQ50Nz1IT4b/j9Wj1uw+SA8922Bq
7r+D9OTYY4BH5fwseuiy0wGtb2bRQ7drETfE6BC9A7iPNltctx2ih45Nkaxq
PkTvIPb46ORhj2x66K+61yuuZtNDD/F92GLAYXpZeK8eezNw42F6aElzs9OX
w/QOYY/j2se6HqGH7rZOOyv/CD20Y/nge71z6GVjj1pj/yTm0EMXeU0zaMih
dxj3MXvedMej9NCWX5ZHnT5KDx0yKl6mnUvvCO7j6u134nLpod+VyJtf5dLL
kYi+6mf62B2jh57rXjz12DF66F3SyjCN4/SO4j6+r8+IOk4P3dH0T0nNcXq5
EmET3bHJ+gQ99OprvXSzT9BD56sYT+50kt4x7NF5fHDISXpok30z9lWepHdc
Ivxezb8x9hQ99IEhoZ+lp+ihn4cmarfLo3cCeyzYOTEgjx7ape2hZffz6J2U
iBSH87tHnKaHLtlxq3DfaXroNjVPPyicoXcKe+z/sZvvGXroyGUtrG6foZcn
ESfPdPYfdpYe+kOLPjt2nqWH7m87/PKfs/ROS4T3Zut6r3P00GmPXbreOEfv
jEQ81Fs0dvB5emi1xRG+W87TQ089vm7r9/P0zmKPP/fku1+gh74y/sjryxfo
ncMe113sbJBPD21+786o5Hx66MAezxc05tM7j/vo/XmTy0V66FfZCufOX6R3
AXv8qv5St4Ae2s2yX8c1BfTQ2+PNLeoL6OVjj7dsvKZdoodu13V28qlL9C7i
Ps5Zkqd1mR46VraiJvYyPfTZhg3t6i7TK8AeTdOHT75CDz0kJtfj6BV6lyTC
5/rltepX6aEzO947HnGVHrrK5WXVs6v0LuM+pn9TnFBIDz39taJxViG9KxKx
3qibW8dr9NDXwwYkBF2jh25xaeTRR9foXcV7Vcnu8ejr9NAh0+YoSK7TK5SI
ozuXDlYqood+VxM707+IHrrvgM1x5UX0rmGPgZnZ5jfooXedPfFg7w161yXi
Xstr/1oW00N3nFwxwKeYHtpmy+sZt4rpFWGPlT+ijW/SQ+f3bncw9Sa9GxLx
fXGP8l836aFNTgz67VlCD+33a3S/6yX0irFHK4dphrfooZ+v94xMuUXvpkRo
3Q+UfrtFD+2svfr27FJ66JT5234UlNIrwR4Py3rr36aHbvMtz27dbXq3JGLs
6BuhH2/TQ0cmPN7vdIce+mTpu5tn79ArxX3s+vurThk99AAPlV7xZfRuY49y
Hdu3ZfTQ+z4YBdnfpYd+ZDYu7cRdendwH2Mdi7qV00NPLfJujC6nVyYRiaoh
PWrL6aGvzFxjbXOPHvp3+o6AI/fo3cUe3xzcpXafHjpw6LmrYffpleM+hpc0
VN2nh351qUpz/AN6aF3lD+MOPKB3D3uc/m9Jhwp66O27OqUGVtC7LxG3n+td
qqigh1YeOOzdqIf00FbLJ6hnPKT3AO/Vc85jFB/RQ59p5bNoySN6FRLxeXL4
lrJH9NCDtyZdMH1MD+3zZPer3Y/pPcQe+xzu1KKSHrpqSf7IBZX0HkmExsnb
829W0kNP/1290egJPfT6CY1ntj2h9xh7TG5V2/yEHrrFgy4qc6voVUrEyJ76
5oVV9NAhC8zmDXhKD330yKT1G5/Se4I9fnM99eUpPXTfMYurXZ/Rq5IIjzVR
yhef0UPvup08rE81PfQ9jX1z1lbTe4o9zj2a2FBND2174NIxxxp6zyRi1ce7
T07X0EPnm9e26fmcHvp77FejVc/pVWOPN9rMfv2cHtqvk2a83Qt6NRIhd+2f
c+wFPfTz/SMeadTSQ/d4O7nVilp6z3Efjd0HPa+lh06J8HeZ+JLeC4m4eTlm
ZfZLeug27VIOdaqjhx7rmHE/pI5eLfa4+/jfyjp66JMvrvYXr+i9xH0c+MBR
9ooeekDQqxXtXtNDe5//Lg94Ta8Oe1RQvnv/NT30oylav0a8ofcK93GboX76
G3roqVWWDq3f0kMn9rWP8H1L7zX26DdXcvstPfSvk8tKh72j90YiTP/Efd/5
jh56mfVWvb/v6KEPbZBO8a6n9xbv1QenQm7U00P30ilKH/ye3juJmLXwUfGW
9/TQ23Lefvn+nh76dtPPnnMa6NVjj2M72FxpoIe2Suy53OADvfcSEX1nyN7k
D/TQZzTF9cYP9NCf507/5PKRXgP2eNBL68JHemifT0ET9D7R+yARGRYJS9d8
ooeuWpm6s/4TPbRG8YEr0xrpfcQeO599f6qRHjp51k2NHp/pfcIeM56IlZ/p
oVu+e7+47jM99CiTv9smf6HXiP+PkaoFR7/QQx+9ovtW/Su9zxLxtp1Jl8iv
9NB9Z1iNrv5KD+2xx8lnwjd6X7DH2gWbs77RQ98zDDvfsYneV4lQCV5bF9RE
D21zYZfq4yZ66FWts0eM+U7vG/Zod8Fb8p0e+vu20g1KP+g1SYTx02en/X/Q
Q/vpf3pe/oMeWu7fsoNFM73v2OMpNbO0ZnroHn/7eLb6Se8H7uNE03U+P+mh
UzZOPHnrJz30zYqZz4x/0WvGHnv5Ku34RQ891ifS5Pcvej8lIuLoevd5v+mh
T37fu+b6b3roD2Nzcg3/0PuFPa4tqEz589/3fxLhVVbWuunPf9//ScTebi+G
uP397/s/vFc9v7he+vvf938S0Tmr9Wr9f/T+SIRdY9cj6/799/2fRKwZYfDw
47//vv+TiEtxFi2dWzjx+z/ssdjW8Bz6f9//YY9qbs69Wjr9z/uHPc72i41H
/7+HPpQZnfUW/f9eC6l4+W7jPftW9NC9hu3/c6IVPfSsqGMG3RXotZSKbVev
TI9RoIe+3f5+VK0CvVZSoexUJ7NpTQ89YW/TnSOt6aFjXrb9qdaGnoJUnB3U
vW94G3roL8ED7Z+2oddaKgbnjwofr0gPvajN1MwDivTQmVM9bnVoS6+NVFRt
D2gKbEsPrfFspe7DtvQUpWJavy2TLZXoodcvlQRnKNFDX8s7uU9RmV5bqWjx
79qNJcr00CMnPfxcpkxPSSqCN73RNmtHD330YfPEPe3ood/2ah/Yoj09Zano
u0h7z4L29NAeuYOv3WxPr51U7Pwx5qNRB3roe2Ja9+0d6KFVkuZZ/exAr71U
2Nxd7j9XhR56Vff4HYUq9DpIxYV52y8P6EgP/T1LXr+xIz208efTXb92pKci
FX4ji8fOUqWHlq+q9L2oSq+jVNTcrN/apxM9dI8uf/LXdqKHdnbr+KahEz1V
qdgk6aU2ozM9dHH9UMsznel1kgqF4eMX9lSjhx6zYkbKKjV66PDC+edeq9Hr
LBUnOoS+tOtCD93glNjxeBd6alJhkLbTQlOdHtqrLstrhTo99N7B55Ofq9Pr
IhUPQ27lTexKD9354tOa7K701KXCTvFju84a9NCJ9i1MQzXooS+ndp77RINe
V6n4/ax3ktCkhzYzGH5CpklPQyqWBVg/bdeNHjr7tEvbZd3ooev++Rg/6EZP
Uyp0bSLcRnanh56dsi4hvTu9btjjoz1HW2vRQ9/RPfLYV4seWsn3osIdLXrd
pcLq2J3Bw3vQQ0c318zc1YOellScHvc57m8PeujPSQqHvbXpoQeVq1fc0KbX
Qyp8tPq1GNKTHjrDy3zg1p70tKXiySEbpx896aE1vsyKmaNDDz1t1JKDV3To
9cQeV68oN+hFD32tZMPv5F70dKTiX5f0fp970UOPdM+dNlOXHjpYejnygi69
Xtjj+3Kpnh499NvhL2+v0aOnKxV9or/9qNejh/a4pthnem966J0q3abm9aan
hz06Dwjr0YceWmXfyIyVfej1lopJr6aU1PWhh141ZM63yX3poc+HLu2V25de
H6louhhr21WfHnpo281Bkfr0+krFYofMtGp9emjZjhNFE/rRQ1dXFzZm9aOn
LxVa/St6qBrQQzste20dbECvH/Z45kfAYwN66Jst2u0e058eurVtj0JJf3oG
UjF286APSgPooSMej+62dAC9/tijnsP4ewPooT/4evpZDKSH7n88MDVtIL0B
UuH9c9WlVob00Gnjt73zMaQ3EHtcJ1MvNaSHVruXN8ZkED20XY8bi3YMomeI
PXo/3vJ7ED305ex3F+YNpjdIKn59+fXq+mB6aDNLlc6DhtBDB8TrjNo8hN5g
qTh0y2hB0xB66Jfq4za5GdEbIhU6cxzPXjKih54l867VH0oPvbUhWGX9UHpG
uI+ma8w/DaWHVorZMc/ZmN5QqRh//eD6c8b00NEdz53qZUIPfdqlpDrehJ4x
9rivSvmdCT30oNcNwxyG0TORioVG/+acHEYPnRHWaW334fTQTwr0jscMpzcM
e1QaVlU7nB562rQJiram9IZLxbqdzkNzTOmhr9UsnN3FjB76X//w+HAzeqbY
Y2BSzlMzeujgs7sfjTenZyYVOS0PtzpoTg/9xjZ/kIoFPXTvLbddllvQM5eK
OZXVKx9a0EPv6N14yHIEPQupKF/c6kHGCHpolRNd/imOpIee9KvvAL+R9EZg
j1ZmM+6OpIe+sH5StNkoeiOxx3uuB/aMooc21l58t4UlPfSS+VG/FljSG4X7
eDhZv8SSHrrma5rD0NH0LLHH0Ucjto+mh3ZOuCT5OZoeelPp3dK5Y+iNxh67
1n4vHEMP3drjq97AsfTG4D7K29htGksPHfFBI/TrWHroE2b9988S9MZijzEj
bl4U9ND9iyZ/7TOOnsB9VHXXSRpHD713pr/Nh3H00BXpMctnjKc3Dvfxzaa9
Z8bTQ08ZmnG9pxW98VKREH780yoreuhLl65qvbGih/6p9GDC1An0rKTCdPqr
pccn0EMH7Pq+U9Oa3gSpyHqudHWFNT30ywFaDc+t6aF1lhtqTppIzxp7PGc5
7vBEeuitreyXdJ5Eb6JUlE6euz10Ej200tZlBU8m0UOPfxL3VtjQm4Q99tna
RW5DD316iXR0e1t6NlLReOKUzzJbeuhBv69vfmBLD71wwqPzIyfTs8Uek9/W
pU+mh35y/6dqmyn0JkuFes8OIxdPoYd2WNBz/p0p9NDrjgzZONyO3hTs8dvY
M7vs6KH/jZ7+4q8dPTupGLHGq8P8qfTQwbeDzIqn0kPnaCR4DrGnNxX30SN1
3VZ7eug+Bw6c/GFPzx57/Hjm2RwHeuid5jeVrjrQQ5fHPjHpP42eA/Z44737
hmn00JM6/V3zeRq9aVIR56p6bOZ0eugL+3WfXJhOD930xrhNb0d607FHYyuj
REd66CURTrPeO9JzxH28vGD19Bn00DXKYUfyZtBDazmufdjDid4M7HH3rpZx
TvTQm14cMnzlRM9JKm4MvOA8xZkeWiGoNDbXmR569PlnWV1d6Dnjvarw6V6k
Cz308Skt/1a70HORivdb1fpbz6SHNqjq43hoJj30vL6mK1Rd6c3EHv0myoNd
6aErTs4se+xKz1UqOv1Z9HPMLHroKdaRfaWz6KETNqy3V55Nbxb2+GBv+NLZ
9NA/e+Zk3ptNb7ZUDF9YcMvCjR46IKesKc2NHjqr6bmugjs9N+xxzJfJi9zp
oXUSW4eUutNzlwrXO13TTebQQ2/VNCjeMYceunSuxZffc+jNwR4P2vb08qCH
tvo0e1KRBz0PqVhh4Rc4aC499OmV0Xs2z6WHbryx8VrTXHpzscfO+z+6edJD
L5x1rPtlT3qeUrE/44pVv3n00E/e3vNfP48euqtJ3Y5P8+jNw32MbLrs7EUP
ve5K2/fnvOh5SUVhu+4aut700P8cB4oEb3roEXtGLX7nTc8be6y12+Ywnx46
x9Dj4sn59ObjPgYFvOm+gB66z4WVarEL6KHntN5i+XIBvQXYo51koe1Ceujy
bSdTchbSWygVHZ5eO9fFhx56kv7Dl+E+9NBx/m86PvOh54M9nmq2sFpED/3t
Tzvvg4voLZIKo4naG1R86aEXbxx8erkvPbS0Yszzh770fPFe1ZnWfvRieuju
PvNMMxfTWywVM44un9t2CT30xu+rk/yW0EPfGLv9xN0l9JZgj2vlT8386KFH
l51uu9ePnp9UhHUrNm7pTw993LPSbaE/PfT7g/UJJf70/LHHxt9Hhy6lh543
omPl9qX0lkrFnrherX8tpYeuKB46xDOAHrqT2njXawH0ArDH2TNWDVxGD70m
c/7hTcvoLcMe34VUfF1GD/3LJLHF7EB6aNOonQMLAukF4v/j1SynvsvpobPa
n49JWk5vuVTUzrh18MNyemidvU/LZwTRQ7u+/PD7TBC9IOxxUAsDnWB66NLg
ztNXB9MLloq2+b2j3gTTQ49vM1w2NYQeesVU6zvHQ+iFYI/bXZo1Q+mhG5/6
9IkOpRcqFYb9Iqa+CKWHXrh0XdikMHro/Xl7Mg6H0QvDHv8eLukcTg/dddLF
b6Hh9MJxHzfd6VUVTg+97mGN7bgIeujCXp+D5BH0IrBHH4V97SPpoUfkqt9Y
FkkvUiqCfuh/fhBJD50jzLVHRdFDv1lrM3F/FL0o7PHurGVtVtBDu3dfsnvx
CnorpCJ13orCOyvooe9mbfgwPJoeuv3nfd12R9OLloqJI3PH/4umh1656rLf
/Bh6MVJx7mZ5anEMPfQ3tZeXhsTSQxu5fXu3NZZeLPYoUezaHEsPLa3XHOux
kt5KqXg2bIDv1ZX00N1XjNzaP44eekbhlPwNcfTisMcOc15/jqOHLnZa2tl1
Fb1V2GNa7Kj8VfTQY+pSFvReTQ8dPjhzU+JqeqvxXg05cfb9anrohvzC2unx
9OKxR8UKldPx9NBe9q/NtRPoofem/pgXl0AvAXt8ppz8KoEeupNBj7wpa+it
kYrJAYNqctfQQyecHt1OI5EeuuCf/fCoRHqJuI+TPD1qEumhh6cErrVeS2+t
VCx9tOr4obX00Fm626pUk+ihaxfJFEOS6CVhj8fyhlYm0UO7NhfNHruO3jqp
2DLucbx0HT10adK7HOX19NBty389Wrqe3nrsUUtF4f56eugVXjqDRyTTS5aK
vENGM/cl00M3fhZxChvooQ1HOWYv2kBvA/a42vtB6QZ66P0lwf9MNtLbKBWV
XdYM2LmRHrqr+44ZfzbSQztID0Z7baK3SSqS3p89ULSJHvrq8JK7g1LopUjF
nxVVvzan0ENbXGvQ/55CD71c5Z+D+2Z6m6XiiHOnyMub6aFfp+lJ+22ht0Uq
9F6Z3F6/hR7afciEH5+20EOnhjr3dtlKbyv2eHGh3fmt9NDt24aH6m6jtw17
dEjan7CNHjpux+6b77bRQ5+vzv7qsJ3edrxXDfJ1Tm2nhx667LaNViq9VOzx
TPXy2FR6aFmLxr0vU+mhq21aFdnuoLcD79XNXRpzdtBDOz3u20N9J72d2KOe
mXXETnroYt9JAc920kO3Ou66y2oXvV24jz99rx7cRQ8dNj6qQWU3vd1ScWxd
smbQbnro9+Vp4x7tpofu1+PoktF76O3BffS+tD1zDz30nuy7BW330tsrFQ++
vHjrt5ceupPl1y7le+mhJ8e3GWOeRi8Ne7ylsWhvGj10gXr/LS330dsnFc3u
Iy4s3EcPPVw2+VXJPnropQ1unYzT6aVjj6b+I1PT6aFro2Pm/0qnt18qel7f
tNFzPz20a8eMM9f200NvcTn+YmAGvQzscd/VDikZ9NBtX983+5ZBL1Mqxhm9
8pydSQ+9Iuz7uoJMeuhTBUqn+kroSaTiU1ut6iQJPfTAaYbKHyX0pFIxf6fl
MCcpPXR6zdQ5Z6X00I/7z03UkdGT4f9j4LJjq2X00PZn4568kdGTY48tt7ax
l9NDF9pKjU7I6aH/bj41q9sBegdwHyuvr44+QA8d1PvRkRcH6B3EHhe/fTjp
ID30m+M/Wx45SA/d+1f7QWpZ9LLwXrXq6RKWRQ+9Y/2QlVVZ9A5hj/fGHhp3
iB66g/b0+/JD9NAT53v9bZ9NLxt7PBzUPzCbHvr813jHimx6h3EfLVNXjDpM
Dz004YB8/2F6aN/SM2VtjtA7gvvY9ebPxUfooZ/NedK37Ai9HKnoJn9vb5pD
Dz3jw5/w3Tn00BvMVCX/cugdxXs1Rrd0/lF66FZFxt+Lj9LLlQpLVSs9o1x6
6LCZTlO25dJDH0tfENKcS+8Y9vg6NN3jGD10v6Fri68eo3dcKjzDd33pf5we
es+lQz03HqeHfqB0YdKX4/ROYI/TSwNdT9BDT971bE/+CXonpSL++cdrvU/S
QxcMaPkp8SQ9dHOgmlbDSXqnsMdzfSY4nqKHXtrKdOnpU/TypOLg5Ik7tfPo
oV9smXklLo8eWvvJovev8uidloqZfSI17E7TQ29esl4cO03vjFTcOrF3scYZ
eui2v49sizpDDz1uQsHFmjP0zmKPyWVvrM/SQ+fdf66WfZbeOexR+4tlp3P0
0IYLWvuEnKOHXnCk6+bKc/TO4z5+63d+7Hl66MrRFnXS8/QuYI9rbFXbXaCH
drg9e0TABXroJA0/7/sX6OVjjx7RG0bk00P/lW88vS+f3kXcx4/pzxUu0kMH
mR9r73uRHvpI7BXT2xfpFWCPRffmDiugh+7dqS5pZwG9S1Lh5tp04k8BPXTq
/rbPvC7RQ5e96aZ04xK9y7iPxgNNBl+mh7aOGOW+5TK9K1IRe9luzffL9NDn
lD1y3a/QQ3+dHlB5+Qq9q3iv7l7Z2uAqPbTvi81Dkq/SK5QKyUCJa+NVeuhn
y0+ucimkh+52/trh84X0rmGPCg8rdK/RQ2+Y8qbFmmv0rktF0dbmgfXX6KFb
VbVznnadHtqyr3bsqev0irBHv8FZWkX00MdOjrkXW0TvhlTU/3b487KIHrqf
9TyDyTfooT03LJ9+9Aa9Yuzxweoo9WJ66Ac9t8siiundlArVhfI7z4rpoSfn
nG62ukkPHd90o0/WTXol2OOYyqkdS+ihm9fUhwWV0LslFcPu/M54VEIPvVSz
463Rt+ihD87t1ZR5i14p7uOBobpKpfTQPT+Nm+xfSu829mgxI7i8lB56y8r5
+8xv00PfuhFyY+9tenewx86Jn1veoYceN2unts8demVSEZWRNfHWHXrovLfn
lhmX0UN/Mr61O7WM3l3sMfJp4a8yeugFVz588LxLrxz3sV2L7tfv0kNXOna2
Miynh1bf09s/pZzePeyxdtiOb+X00EmG1pdn36N3XyquBLnUF9yjh/5z3qer
/n16aPPWEWPX3af3AO9Vu3W+H+/TQx/etmer0wN6FVLxqupw/tkH9NB6+hdf
61TQQ7v53+kcX0HvIfZ4qmbU2wp66LI/jQvsH9J7JBXtJiqknHhID229Uf1c
t0f00LEV+i+jH9F7jD3qmHesfUQP/XWhjYXNY3qVUjHk6CyvI4/poX2/L05W
q6SHloxdkRdWSe8J9pi4oaaqkh66W9m+duOf0KuSCsduucMPPKGH3uB52aND
FT100cHytYFV9J5ij421xyuq6KFHj/hWNeopvWdSERqn2DbjKT30sWJNY8Vn
9ND1nQe4LXlGrxp7nD0yoewZPbRn5pSjptX0aqRi9zv3x7ur6aEfmCxVaFFD
D60aFTt4QQ2959jj1ZSZN2vooePbZ8YZPaf3QiouzjiRve05PXTznsIHzc/p
oYe9fPDP4wW9Wuxx0OsBhS/ooQ8G/5gxoJbeS9zHC8oxG2vpoXu26XHwSy09
9Mypg8pdX9Krwx63j/6d/5Ie+tZT+3596ui9kgrFfp7T1tbRQ49bGhjZUEcP
HZW3Sur4it5r7PHv1tunX9FDf5wo+6H9mt4bqRiwKa/3qtf00PMfFtm9fk0P
va/X41C7N/Te4r3q827/sTf00F1yf93UeEvvnVRM/dHhW9Rbeui1QqfX87f0
0FfWGtlOfEevHnssE0HZ7+ihzbs7pnWqp/deKgLneReF1NNDH84Kbqysp4d+
1ZjQQ7yn14A9jtxhLXtPD+226mBAuwZ6H6Ri+82zuwIa6KHL1Equ3m+gh27n
VtUw4gO9j9ijpEEz/QM99Mr6v+Naf6T3CXsc1snP9yM99LcovdTbH+mhjQpN
Lg37RK8R/x87THi38xM9tMTJWf3vJ3qfpeLp3oVjvBvpobvVhS260UgP7Tg4
acvgz/S+YI8huy9s+UwPXZSf/er7Z3pfpaKlYn6nOV/ooS3tb4+88oUeOjS1
er7BV3rfsMdnnzYmf6WHru/X6mzjV3pNUqEf0KXW5Rs9tOfpvioXvtFD7/5n
aq7XRO879jhp0rw1TfTQqimu6+ub6P2QCttHvqemfaeHjteNqj71nR764qJk
5R4/6DVjj7lpw1b+oIce1pwzp+4HvZ9S4T/uUuLkZnrog0l3jx1tpod+cffF
E/Wf9H5hj1pf20T+pId28WoztPonvd9SkXJIY/aEX/TQJZ8N4rN+0UO3GTUi
p+Nven+kQqye/CjoNz10ZIlbq8e/6f2VipNd/AeN+fPf93/Yo1uMi+TPf9//
YY/STSuV/v73/R/2+H7/If+//33/hz0OP36//O9/3//JxKMVV/+a//vv+z+Z
6HLtfv+0f/99/ycTU1VeObZq4czv/2RirfP3FT7o/33/JxNX05QO3EL/P9dK
Jv7Udb9r3NKZ3//JhMUQw1+p6P99/ycTy0Mt9X+3pKcgE0cuTnWY14oe+rXi
3Ijrrei1lgk9h2USQwV6aPcdcaUpCvTQqdVbvn9ToNdGJsoMpHpuremh2y07
NeVSa3qKMjHhzPUQ/Tb00LEtHqWva0MPfdbmbfHHNvTaysTXlJ9fnBTpoYc8
bq9zTpGekkws0utp06stPbTEd8jy+Lb00E+Pjd37ti09ZZno9nPadXslemjH
8V6fTijRaycTyeuCtLor00MXlcdPiFGmh27ZI3VprTK99jJh6X1gp007eujQ
7DNXjrSj10Emcr8Uv1drTw9dP+qJRnh7emj9+PfiaXt6KjLheevP4vEd6KF3
q6tuP9CBXkeZuO+uW9BBhR5aVWb8NlCFHtq2YXyXhyr0VGVitanTaMuO9ND5
0Qt8MjrS6yQT36+FblZUpYc26bj2/BJVemg/l111Zar0OsvEgX2HVM060UM/
f3V+xJ5O9NRkoodRqXeLzvTQLmHPNizoTA+dUvDx9M3O9LrIREnbli+M1Oih
FaepddiuRk9dJsTOPmY/1eiho2qGe87tQg99qv/EdYVd6HWViU/LZp4coE4P
PfDsomcb1elpyMT8lpFKX9XpodNt15vM6koP/XjzXveLXelpyoR65ZE1fTTo
oe17F+Su1aDXDXtcXFbZoEEPffX489YzNOmhf//8POSMJr3uMmFu1XpWz270
0IHru65e1Y2elkxk3+t35HU3euhXPSwe2nWnh9adb9vyeHd6PWTC7fBsQ00t
eujtX5c4r9Cipy0TdyyjY59r0UO3S9iYNbEHPfSE0vR72T3o9cQeux7700mb
HvrsnCsGodr0dGTii+ze9Cfa9NBDPryMEj3poReZNclkPen1wh5j2pa106GH
fnq9288AHXq6MqGpOrDvAx16aMeZo+xH9qKHTk63C0/vRU8Pe3w9J7O1Lj10
y6EBt3x16fWWiVHhK5tu69JDh17arDtcjx76qJJk8i49en1k4t20k8F/9eih
++66ts+7N72+MuHxvOLGjd700LsGvPk8uA899L3AZu2tfejpy0THc+0m/ehD
D23TSjtwTl96/bDHyYP3XOlLD31xy5hrBvr00D8qHT4m69MzkIlhfeZ1/6xP
D+2/ZLnVzH70+mOPJ1b7X+hHD/3i17Ydegb00NoT5JfXGNAbIBMzk0/X1xvQ
Q2++f6Pr9P70BmKP2pVj8/rTQysuqPftMYAeWhz5vXXlAHqG2OM3lYt1A+ih
T43u9WbyQHqDZOJjwlC13IH00ANvj7PsakgP7a0xY2GkIb3BMrHPY35KtSE9
9CN5yLkJg+gNkQm1j2teZg2ih55qvrOj6mB66MTYLIvgwfSMZOJK0Tmvx4Pp
oX+r3koeM4TeUJkwc32aJxlCDx24/0ONkhE9dPabf+2WGtEzxh6Hdja9Z0QP
rRvRe67FUHomMjH78rCktKH00NuVrU+0MqaHvjPd5amPMb1h2ONun7alxvTQ
E16EG5uY0BsuEzED17ntMKGHPrt8T8JvE3roL+cOH503jJ4p9qhw8fH1YfTQ
i6bcURg0nJ6ZTGRurRm8eTg9dNWTxplNw+mhNfoqrHIzpWcuE9P91A9fMqWH
Xn9Sv0LfjJ6FTFz/bdZivRk9dEtrm4GfzOihR22Y5eRsTm8E9vhgccw5c3ro
3J4rDvayoDcSe1ywoTzegh5aP2ff77cW9NBzm472cxhBbxTu45jL006OoIe+
v6Y8svtIepbY451aacxIemhbzW+3a0fSQ6+eq9hsM4reaOzxgGafnFH00D8+
9p/axZLeGNxHi5Fh4Zb00P4rp2Q8taSHPnDDvWT8aHpjscdOS78dGE0PrT0r
tpfKGHoC9zEjxXb5GHrolLcZQQ/H0EPfND6RZjmW3jiZaBNZWJQxlh567JUH
jYqC3niZiGj3uoefoIc+6fjD+q6gh/6wW3mZ2Th6VjIxoFZr955x9NDehoMK
W4ynN0Em0oJGf1gwnh760Xn7biXj6aHVWnuOH2pFzxp7tAv0225FD524bVXq
Tyt6E2XictXWS3Mn0EP/7it7VziBHtrMP099oDW9SdjjqaIxm6zpobP/PFr0
1ZqejUzUWb/bMmsiPbTuxl8XLk6kh55d0eF1n0n0bLFHHZ3OSZPooe8sNBr1
YRK9yTKhfFQsmGFDDz3h+/RNZ2zooWPGep/taUtvCvaYGFy7ypYe+sudBJU3
tvTsZGJwtx3mUyfTQy/yPDjv+GR66MyDZ9drTqE3Fffx081TK6bQQ2uOqKp+
PoWePfYY16A8yY4eOrn477DDdvTQ1zt38ug8lZ4D9jhbb23oVHroUZkmx59M
pTdNJkLeWVUJe3roXBNnRbk9PfS7yIVD2zvQm449Xg2bvcyBHnpu+6T4Bw70
HHEfZ+zOGTmNHvr+nuxH6dPooTu+vNCqzXR6M7DHQbcHLZ5OD706uNrlznR6
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
j8v0z4U00kNXnzF7WdlIr0kmure06Sg+00M72c6ykH2mh964ebFXuy/0vmOP
j6OSA77QQyv03pB3/wu9HzIxevG+mhFf6aHDjx9tl/6VHvr4z0vDW3+j14w9
ji/38P1GD22wvnbt7W/0fsrEvHtfjw9roofe20Px6c4meugKb822f5vo/cIe
D/c39v5ODz356wi3G9/p/ZaJeMspCYN/0EMXxLsf3fKDHrr5lv/j7z/o/ZGJ
4V1jFeY000MvnZMy+Eozvb8ycVCWMdPgJz10bcPxuOSf9NA9zQqzG3/S+4c9
xjx44PKLHnrL9Vf/zv+i10IubnX8MUDvNz1025nKTmt+00OPS9eKqf/93/d/
crHiteHBaX/++/5PLk4bjS4/9ee/7//kojHM/rfW3/++/5OLQZfm9lv597/v
/+RioVLgtLq//33/JxcZ01ZFTv733/d/cvFk51bp0X//ff8nF12fS2+rt3Dh
939yMW1A3o8I9P++/5OLdYFFvavR//v+Ty4Kzz6ym9DShd//ycXflu9Cs9D/
7ynKhcXkX/s7tqKHDtrSoSSoFT30kcqe3x61otdWLt70Nuo1RoEeuvcSYStR
oKckF+4npgcptaaH3vHLK82/NT30XavgovLW9JTlokNyQqN5G3roifdTe6S1
oddOLlZqH7RupUgPfX7+2QAfRXrob4dv7rqlSK+9XAz99uSqcVt66MWjGxpS
29LrIBfShL+av9vSQ1eXqo6fp0QP3V1Dz++6Ej0VuXDyMEk1VKaH3ii3upSi
TK+jXNz44PTumzI9tIL5QnW3dvTQo2PDxlxqR09VLsKK1i7Sb08PfUx195Z1
7el1kov6mdkXPranh+63/8Irpw700J5vSjud60Cvs1zsGVo9spcKPfSD8E/z
41XoqcmF6uWWm/Abyu//5GKycpez9h3poeOn96090ZFeF7ko2GWq0l2VHvrn
84nmMar01OVi+EDXebWq9NABy33X23Sih846F3nqSCd6XeXiZavkarXO9NA6
U9KUwzvT05AL1605w552pofe+qRgzng1eujSPncTD6jR05QLJb8Xxzp0oYce
f/LLk8Au9Lphj79bKz7sQg99eoLGUEt1euhPyQazM9TpdZcLwwcW8Ypd6aEX
9Jycs6QrPS25SF/g9qisKz105RG/VmYa9NDqTdGD9mjQ6yEXDmM2ubTQpIdO
WrN/5QJNetpycfX2sUM3Nemh/2pcvW/UjR7aYu79v9u60euJPR6o6/+zGz30
kY9NjnO709ORi9fmStGF3emhe6/sfmCAFj20+42Bdzdq0euFPXay/PVFix76
rutU/Vk96OnKRfsMD4eLPeihJ74NiOijTQ+90jhOslabnh72GLGltEGbHvrb
Zcl3x570esuFUbtTemd60kMvdrw+pacOPbRk98OQVTr0+sjFsxdv0l/r0EN3
M/xZbNeLXl+5cAxq//VYL3roDee1dTR16aGLFIbYrNClpy8XrezGLn+uSw89
etu0vRP16PXDHqvmXc/Wo4c+3jfoU6fe9NDv/eK1QnvTM5ALg1PbJzzpTQ89
7498KR4l//P6Y4/WZ3bK+tBDV2wovtKuLz10p4rK9wF96Q2Qiyk67zUe9KWH
Tlj4R4zUpzcQe8zpuCRdnx76Z1Ov7a370UMPH2tc4NuPniH2mDj+7e1+9NBZ
d2Z0GW5Ab5Bc1GouGL3LgB5axzPU568BPfTMg4mbvfvTGywXWz7tPH+jPz30
LYtDdYMH0BsiF4px51W3DqCHHld8a8SPAfTQUZ2fec8ZSM9ILvJmfdxwZSA9
9KeMFmcMDOkNlYuB7zq/SDakh15g0qfDZ0N66PTI4WYzB9Ezxh6vWHteGEQP
rd5+5jq9wfRM5MJ+xqKTawbTQyftiXhWP5ge+mrtOqXpQ+gNwx4N95rkDaGH
tgg+4t7DiN5wuVh+4eKalUb00Edal+XWGdFDv7Z7Xjl5KD1T7HH759a5Q+mh
3Z8qGHU1pmcmF6n6XWdFGtNDl/n3W11tTA/dLs/8yAQTeuZyYf3X5mGWCT10
7MTZLVWH0bOQi3MblxgGD6OH/laxwvnxMHpoo14bY8cMpzcCe/RJz5IMp4eW
Hs29p2RKbyT2+P3yH39Teuju4p7BPVN66BlrX063MKM3Cvex7FtUmhk99I1u
beWtzOlZYo/zupX5mNNDj84a8POWOT10WOPIviYW9EZjjyPs7HdY0EO/j5sT
/tuC3hjcx5tLM+eNoIeep7by1vUR9NB7Zm9uMhxJbyz2mJmpu3kkPXSn+hOT
m0bSE7iPw64Fu42ih46Pqth3aRQ99MWrr2/oW9IbJxfN7Zs/r7Okhx7m1K7n
J0t64+XCf2+PSc6j6aEPvhwUeG40PfSLQWP29BpDz0oueoY4XIsfQw89M9/z
49sx9CbIxeY2y7s7jKWHvjV1tdXJsfTQiqnb/LsLetbY4zPZjhhBDx3V7/Tl
WkFvolycWnqj3mYcPfSnvMddc8bRQw/8925sl/H0JmGPk377ho+nh07fpLLt
6Xh6NnLx+KHOxfFW9NDqukPfHLCih7ZfNE5NZQI9W+wx19Fy+QR66Ks/vBc+
nEBvslz8ESEpltb00BZJa85lWNNDL7+746XiRHpTsMfuWR39JtJDv553zuLu
RHp2cqF3qMTLbBI9tPvnquQ9k+ihU0d+yGthQ28q7uOqfzULbOih25d0al9i
Q88ee+zS23SoLT30Srdhc7fb0kOfk0xI+mlLzwF7rHc+MXcyPbTRcJ+nhZPp
TZML3xXhbQdOoYeWFiYZb5pCD/2swx63r1PoTccenQ8nzLKjh56Rln/0oh09
R9zHutuP+0ylh74xuEYhaSo9dKvQxsEfptKbgT1ebOU6w54eOkxRfdUZe3pO
cpFrr3+4pwM9dH2qWcUqB3po/epJLd440HPGe9Vg1sCp0+ihdwcsdjo+jZ6L
XNw/HRWjOZ0eWrXFhoMrptND29rsK38+nd5M7DHl6O+JjvTQFx9d6nfYkZ6r
XPzQLZ/WeQY99DDf2sjQGfTQ/se+Sp/MoDcLe2xuc0c40UO/GKfZLHOiN1su
tNf179PemR56ZvmIqcuc6aE3a00Je+BMzw179HLPGOlCD62Y7V+S7kLPXS7E
l5hvrWfSQ0eNSum1eCY9dN7qDNs7M+nNwf/HkuNBw13poQ3VC9N2udLzkIv5
7g+K/rrSQ6dLXzV6z6KHfvz+e4/iWfTmYo+myhOHzKaHto/WWrZ1Nj1PuVh7
zXD3j9n00FdVRhfOcaOH/uNs/+GKG7152OO+ud36u9NDL3+1bPwGd3pecnF4
yCq/z+700K9Dt6bOnEMPrVcgvXRhDj1v7LFt3js9D3roVIci9UQPevNxH3c8
GvPegx66fc3bRdPn0kNb9/+1JW8uvQXY47IO+T086aHPnen5eqUnvYVy8bWF
UedXnvTQRrZi1JR59NC+m6cvyJ1Hzwd7fOy1qasXPfRTveCzkV70FsmF5uKE
2movemjH46kq1t700Mk/D5gf8qbni/fq+LPzVOfTQ7dcf3N98Hx6i+Vi1L0n
px7Pp4cO7dFQPWYBPXSu919l6QJ6S7DHbNXhygvpofW/6nosXUjPTy7mWpqs
vbeQHnp3vNVxCx966Pu3nKrSfOj5Y49dFyoqLKKHtp0TNnTRInpL5WK1bO3s
0kX00BcbdsWb+NJDN5tm5+zwpReA92rMhUe/femhl14vbeW1mN4y7LFj9aCi
xfTQtS6fXAYtoYfumd4ybvMSeoH4//haLbtpCT30ZqO+D9z86C2Xi5Iw03+X
/OihFS9NHNDPnx5aKLnOWO9PLwh7nOYb/cmfHvrUzsgDzkvpBcvFx5r1d88t
pYceOCDtV68Aeuj5gTn6CQH0QrDHswUO7wLooR+3vBvhsIxeqFx0mfxCcnIZ
PbT9li+l3QPpoddWtv4RE0gvDHvsrdH7ZSA99J/FBna2y+mFy4X5CYvQnOX0
0Mt/2e7vEkQPfdjK7WZ4EL0I7HG939enQfTQevejdayC6UXKhZv2JpuDwfTQ
qfP3L1cJoYcuO3xs7/IQelHY47cr1x+G0ENPGH3/k2UovRVyEZNQp5UZSg99
trRpQtsweugvXZUC/MLoRcvFEI/uu+6G0UMvkg+8ahZOL0YuMj+MatgTTg/9
1GyqZssIemjNWI9xCyPoxWKPRQFLSiLooZNV47YPjaS3Uv5/NdpnONb//8bx
9tTQ3hrSLk3t3u29lTS0tYe2ikJGIgqhIinX50MyIiNJREIZSRQqkoRIdpL/
efz+5/fm887j1nUer/d1HB/xUut6hMNZeujGbvd+/DlLDz2tILDztnP0jHAf
1V/OiDlHD+1/Jn3P8PP0jLHH5wXXbM7TQ6u1/hNWcZ4eetvqtvnaBvRM8F51
7tMxwoAeOi1n1FRVQ3qXsMfhs3ZdNqSHXnJs1dUSQ3roS0+2h6y9QM8Ue2xy
PDfkAj10zZJLSv0u0jNTiHF2DpNMLtJDH8pUbCu4SA8tDQqxXG5Ezxz38UBc
4CMjeug+gR8/dTemZ6EQ6/8WtTIwpoe+Nq9+XK4xPXSCVfstC03oXcYe01TM
vU3ooUXfsf7Kl+hZKsTZ3XMyT12ih378cG3zrEv00KWVu8bMNqV3BXuceUpb
YUoPvcvM3KStGT0rhXBNdHp41Iwe+kM3r/Q0M3rozlvDGk8zp2eNPUqvR7iZ
00NblGava25B76pCRGmUXthvQQ9df6GRV5IFPbTGK+V3Ey7Ts1EIvY6D/jlf
pod+sGHC0IbL9GwV4pvb/DW7LOmh+/9Yfz7Okh5649i9itFX6F1TCAd9/WS7
K/TQSZGWf2qu0LuuEK3b3FbVsaKHnrfm4YoXVvTQhjefnRlqTc8Oe8xNcre2
poeuGJ7z+rc1PXvs8fjvKq2r9ND7wpoOCL9KD32vadelA23oOeC9ulTtpLkN
PXQPe407xTb0bmCPWYviVtvSQ1urbiwPsqWHjj14oG+fa/Qc8V59fH6h0TV6
6On11nr51+g54T7Ov3Nr6XV6aH9rvxi/6/TQhWmRpV3t6DnjPvZL7XnOjh56
q27e3C929G4qhLNP5aH59vTQ76paOHnZ00O3n9UjqoMDvVu4j+bDik840EOb
JE3t9tGB3m2FCO++TMy6QQ9ds3XL/vs36KHHyYftWzvSc8Eef114dtiRHlqa
fK0g1ZGeq0LkXHTvNMWJHrpPXMB0Vyd66PXKMbpNnendwR6139vudaaHTrj7
/ckbZ3puCtG8sCZv3E16aDGuTQenm/TQZ8/2nlJ/k95d7DFq5M4dt+ihS9vM
tI69Rc9dIYatXRk88jY99K5b23Ku3aaHdvmq17b6Nr17CpExwmTiZhd66E4n
7LdGutC7rxDLnnpcVnOlhzZvFhxwxZUeOnLZq+xfrvQ8FOKv/YeW6+/QQ2tk
F44Nu0NPgT0O/rupvxs9tPehdmambvTQ+Y/7+RW60ZNwH/+N+bjyLj30pgWz
mz2+S0/GHq+uGd3LnR46+f3ODRfc6aHbqJw0znOn54n36h4z78X36KEv+Dq+
97lHzwt7rJYbdblPD10x68lw/fv00KMtEjQ/3af3AHtMzjKc60EPfa9HiSx7
0PPGfdzW8Ladgh66h2fH+mMKeujVZQOGZCjoPcR9nDJ+9QyJHvql0bxz7hI9
H4VoFL/Oo6VMDz2t056kgzI99MmNZ2pTZHq+eK+6Xx6k4UkPXVh4c/ltT3p+
CqE63vt0Yy966K3nwu/qetFDO79ITEjwouePPbb9Uqn+gB66vWaZyo0H9B4p
xKLbTZbUPaCHNsnrfGKbNz10+MjBrjHe9AKwxxOTXg1/SA89Lnzhb5uH9AIV
4mBz7T6VD+mhpeX7F2z0oYfOcTh3NMKH3mPs8ZPVTVVfeuj1aq7Rl33pBSmE
7WHfkhJfeuj4oOc9NP3ooZs1pMwJ9aMXrBCzFn492M+fHvqsTcUNE396IQoR
mN48ssCfHrpUpXvR8kf00MP2Du0a8IheKPboN2VWjwB6aNeaJfsMAug9wR7F
ZrvcAHrozpcPhS8MpIdenmL43TuQXhjuY09b5U6P6aGjtt+ddvoxvafYo+ej
3VmP6aE1fr+wmR1ED603NS1UEUQvHHs0zv/aNpgeOj++up1eML1nuI+dW09+
H0wPvWlTrx3TQuihHe6NsHILoReBPRZND2oeSg/dZsKKL/tD6T1XiLnnt7ZJ
DqWHNow+OmHiE3roECVjnZtP6EXivappZ9HwhB56lMv9R7vC6EUpxJ5vj7Pi
wuih3UfFthjzlB4662SGuv1Tei/wXn32Y2PtU3ro1S3qLumE04tWiCsrlHxf
hNNDv7zR98PQZ/TQjT6Pbnr1Gb0Y7HGIGFX+jB765JHVWhsi6L1UCN/gHUbh
EfTQhQ3HHwx8Tg+tusg0zfw5vVjs0fZGQ/FzemjnDGnYmkh6rxQitX/o2uBI
euj2++IN+kTRQy/yz5SMoujFYY+1xSn5UfTQ4bP/1S19QS9eIaovd1Dzf0EP
Pe5t/1XdoumhD/Yad/ZcNL0E7HHH3Ptfoumhc7w0E+fH0HutEL3Ld9d4xdBD
r592emDHl/TQtiYWy06+pPcG9zHB+dTHl/TQzbs8cJsVSy8Re9z8NP5+LD30
2ftvKlq/oocOLP7U78greknY44Rfi969ooceZtD4+JQ4eskKsTOmk4trHD20
azvV2Kbx9NAZ6yaW7Y2nl4I9ui7onRhPD708X2v++AR6b3EfR+874pRADx11
6qxzfQI99N9nV17seE0vFXts6fIz9jU9tN5Kn+6j3tB7pxBejhGzr7+hh/72
OflA9Rt6aJWhuQ6bE+ml4b16tDwiMpEe2j6kWaFaEr33CpHYqFsXqyR66NaL
h8wsS6KHnntt8t71yfTSsccPi6+HJdNDhwzY9LR/Cr0Mhfi972C+aQo99KhH
Bh2LUuih9/y5OnXVW3ofsMc5brsev6WHzrL0v9orld5HheiWGhVyIZUeenXv
d7l5qfTQV3Z+U1ryjl4m9vigapLvO3roRhUtt3dJo5elEFOn97yin0YPffLS
8Mef0uih/V5P+zz3Pb1s/H/ssry153t66MFbdMa3T6f3SSF0PI5sOZ5OD+38
86J5Rjo9dOrE6/4zMuh9xh4N72W6Z9BDL3oZ2LzVB3pfFMK4/csxhz7QQ4ev
T9d++4Eeutq1wETjI70c7PF77cPbH+mhD45pm9E4k16uQihO92myJ5MeOidi
1MjXmfTQvVvNWj82i95X7HHVqos3suihbZ22e9Vl0cvDffxy7N22bHro5sMu
/YvJpoeepecwdMQnet+wx1DFGttP9NCBjUPOV36il68QJYvjFBs/00MPu/4x
OeIzPfTOj0V/VL/Q+449DqxXtfxCD52+v/3K0i/0ChRCOUBFXzOHHnpZnfq9
0Bx6aLO5c970y6X3A+/VK2urTXLpoetSdw34kUuvUCEm9jm1dMVXeuiju8xP
Bnylh/bydrrTI49eEfZY4RlnkEcPrTIjrDw3j16xQmibvu676Bs9tP2b7IUP
v9FDJ3Yt1euUT+8n9qjT6PbpfHrouQrll1n59EoUwqBk4K/Z3+mhQyZN6CV9
p4cuN5w/T6mAXineq7HrD+sV0EPv7bDX6X0BvV/Yo5Z+1LQf9NDZdyyL3X7Q
Q3cvuNWtRSG9Mvx/VH8oDhTSQ18582x/ciG93woR8zzJfmIRPXSj1jnPbhbR
Q09d/bugoYheOfbo3LTz7mJ6aN+cLjPii+lVKMSPYWp7xvykh1Y9pnHN/ic9
tM6TRWG1P+lVYo9NNn7TKaGHTl1yoEN0Cb0qhWhnd37KsFJ66EWZ1juvltJD
Gw+6Y11eSq8aezzgF7zhFz10dUBkTvgvejUKMfbv27aDyuihD87Lm2hRRg+t
sKrc+rOMXi32+K6F5Zrf9NC9+/YIDP5N749CrNs97FOfcnpo24dTWxmX00PH
Vy4d972cXh32OHPL5mUV9NAzzQ6b+VfQ+6sQZxIv+HWrpIcO6Hbt47lKeuif
Ou7Ncirp1SvEUClg9IIqeugdpdEbHlTR+6cQtzXeG3espodOv/Dd+2Q1PbTy
q5r3H6vpNWCPHds0FjX00GYbeo/wqKHXSBLP3Uaua1NLD11XMOPCkVp66Elj
V3q+q6XXWBJ6+ttSp/yhh34QqVfv+odeE0l8a20ypFkdPXT/Nfar99XRQ2+8
6XEusY5eU0k45AZ5jP9LD500/FWS0196zSTR+viH2vq//33/J4l5YYWDdtb/
9/2fJAyb/l3+qv6/7/8kEbK03ZlR//77/k8Sv+36uV//99/3f5IYmTXmdfW/
/77/k8Qe1dlVmxv++/5PEncPrukf1fDf93+SyArcuWRIIy1+/yeJbvUnTlih
/+e1ksSq+WauZej/eegr1o6v1jfW4vd/kohJk3+Hof//+z9JNOr3pM+AJvTQ
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
nzdPPWfSWyKLb7s+5befRQ/d/2FpxxOz6KE3Vjaa9mEWvaXY44xOu2cKeugk
00E29wS9ZbJonTghtNVseuh53RZ8PTSbHtpQR6td6mx6y3EfFXs1Js+hhy4v
0d/uMofeCuxR48qVJnPpofdeuP14z1x6aPfYh59fz6W3EnvsENF63Dx66O4b
ksc7zqO3Shar3XK2/J1HD21V8Nt8+3x66JfqzR69nE9vNfao3zVrxAJ66GmR
ai2uLaC3Bvex9WT1qgX00H6rF2/ctJAeutB546XnC+mtxR5zD/gMXkQPvXW4
QYblInqasnA6drXJr0X00KlP7oxct5geul1T//VPFtNbh/fq0qiLKkvooY3t
Ur0uLaG3XhZPM/Pe/VhCD109qOrfiqX00GMPthwWuJSeFvYY2GNtz2X00Iq/
wwwMl9HbIIsv86ZJX5fRQ/e2XpayaDk99Lq0LXUPl9PTxh77HhnceQU9dPzu
iyvPrKC3URbNfK7pZ6+gh55V5X5vzkp6aP2ZgW+klfQ2YY9mMdVKq+ihSxLf
Dzi2it5m7LF7wdL0VfTQu7bWnpy+mh7aVWrjdnc1vS34/1jaO77FGnrozpNH
VRxYQ09HFssuzuyXsoYe2vzVykWT1tJDR3bcfuzWWnpbsccNx2430qSHnnTX
5OVuTXrbZHH0h/2veE166AdjFb3U19FDf9MPnuewjt527DHq1eE/6+ihN7b5
6LR1Pb0dsrBfUxQVvZ4eOunm3+JhWvTQrb+2626jRW8n9jhCZXaFFj204XH1
A9ob6O3CfQyb7fBsAz10edO1EYO06aFHLdv1w0Kb3m7s0f5k5xJtemj3LLMZ
azfS05VFlqrTnpCN9NDdD3le67uJHnr14ydhxpvo7cEe6xO+fd9EDx0zP7vD
8s309sqiwbpkyqPN9NBT3zfs7L6FHvpEP+Wr57fQ2ycLX92BITlb6KF/+IzP
XaBDb78sBlXPU/LWoYfWmbV+kvJWemgn8z3bTm2ldwB7TDpjmbmVHrpdD8tA
sY3eQVks3Hbrk8c2emhj2btV2+300E9/hY87up3eIexxctLmtO300GONvphN
3UHvMPYYV+Z3Zwc9tKTcNLPZTnroHO0uzffvpHcE71X3wWOSdtJDry+cpD1h
F72j2OO4RSbOu+ihE85qP/y3ix66+Yv96Tt309PD/8e25xvH7aaH1l9rPWK0
Lr1jsgi45brOTpceuuSr74UaXXrooSMjPbfsoXcc9/HE29SoPfTQLk+/1g/Z
S++ELNKbVQ6x3ksP3Wl5izW/99JDL3Pofl5rH72T2GP2UMXTffTQkYOnJg/Y
T++ULOoOLf1jtp8eelLQZtXi/fTQR/8dWrH6AL3T2OOCC2eCDtBDf7tq6977
IL0zslBJv/v64kF66I0qAVXfDtJD2++J7r/0ED197NE3bYnfIXro1jX5J7oe
pndWFnNFjevZw/TQhhat4z4fpocOSe5VPu8IvXPYY4+Rfb2O0EOP3D5jYYej
9M7LQtdzhd6Jo/TQd8u23vpwlB46c4pezEw9egay6GZsXHpPjx56Vbxdz9bH
6BnKwrKTx9zDx+ihYzYGHUo9Rg/d4B7rOPk4vQvYY1FGpMtxeugT4wuLmpyg
d1EWPufquu49QQ/944WSeHOCHlpVqd/+cSfpGeE+ao6xdzxJD+18Wzz7e5Ke
MfaYt7pg+yl66PajdnaKPUUPvejkiekjT9MzwXs13FT32ml66PDmjrZVp+ld
wh6Xy082naGHHncjNO/5GXrog5/i26vp0zPFfVTLmnxFnx76y+GfO37p0zOT
Ra/gf1brztJDr2voEPzkLD20zcIBOSrn6JnjPtqMa2t6jh66WcbciYXn6FnI
Ymb/dVtXnqeH1t+reznwPD10gN/pgJ4G9C5jjzUW2YYG9NBDZ99smWdAz1IW
Oy4/GLvYkB7aJeXpJh9Deuj0nommnS/Qu4I97vjse+YCPfQyr18fsi/Qs5KF
2e/GzeZepIeOnNp5tHyRHrrOWHVDOyN61thjwkTjY0b00Ec7L/RON6J3VRZe
mza8n25MD/3t3r5G7sb00CrFZ4e3NKFnIwvtCVaaB03ooe3OuximmNCzlcWb
aB950iV66Fbtnr+9dYkees66lL+NTOldk4WBS66arik9dPC38lUJpvSuy6Js
VPNz6mb00CNPdfNwMKOH3vNsSNIfM3p2uI8tptRuNaeHzlqxZFCMOT177NFx
0/LhFvTQqz8fPG1jQQ99ZYjh3QoLeg54rx6xSdC+TA/dKMSt8tllejewx0aP
VFQt6aFPLnqx+LIlPbSv7bvjJZb0HPFezfjmsvYKPbTqgOrYkCv0nHAf97X6
3deKHtrZv2cfEyt66Le1wxcUWNFzxn2cM/3ocmt66IWWy28+sqZ3UxZGb3Wi
u1+lh37a62jJ+av00FU7jHrkXqV3C/fxwfU5C23ooQ+U3zvobUPvtiw8pj2+
oWxLD/3F5OXzU7b00L1epxdm2tJzwR67/Ogy+xo9tM3mPzMV1+i5yiLuftt9
ba/TQzf72cfu6HV66JkTR4enXad3B3s0mPV9qh09dEDMKmU3O3pusvjZbse0
5vb00EPXH9+9354eeofrJZske3p3scd8h9AJDvTQ6aOlr84O9NxloXw6pF2D
Az30sog4jV036KFNW2Zuj7tB754snq8svjLakR76j2P9YztHevdlMeFL+y81
jvTQR4b2b6PjRA/tdXTshBdO9Dywx5A5OkOd6aFVGmtaWDvTU2CPi3c/+u1M
D21/7VSW1k166MQP5i3Cb9KTcB8HOqsPvEUPPXe/10bzW/Rk7PFR2KXiW/TQ
IX9e+6y+TQ/9e86njKDb9DzxXr1S2qSPCz30ntRGo4xc6HnhPvbupJXvQg+d
tXOQ0VJXeuhu3hMe+LnSe4A9VsxP63qHHvrKdK2Gs3foeeM+Xto77MsdeuhG
b/TXznejh57S9YqBlxu9h7iPW25LHe7SQ/t4PEw5cZeejywKfj6r+3CXHnrQ
pOTBs9zpobcY5qy8707PF+/Vl7/1W9+jh37bvtn9w/fo+clCSatrYuo9euiF
d9RqJt+nhzb6rjHQ9T49f+xxzOJlTT3ooatObzy114PeI1moPz/g9saDHvpA
K4P4cQp6aI9VVyscFfQCsEenO/3qFfTQvXL8Fu2Q6AXKQnNY1LFYiR7aRi/1
9kiZHjouNO/lNZneY+yxSdWvKpkeeuaSlr03e9ILksWZ6z3mR3rSQz/6OOyI
mhc99M+B05yveNELxh4PLHvxy4seekfAlp/rHtALkcXtusPdwx7QQ6fPvTi7
vzc9tLLVtQOm3vRCscd37g6F3vTQZn0CI1Y+pPcEe9wV8yPwIT10nff7zr18
6KEnVn6fccGHXhju44zaPXk+9NBepm2uL/al91QWeW96P/XxpYdW6TYqv7Mf
PbS2zsyO+n70wrFHxcqpn/zooRNLtu2a60/vGe6jxrGrsj899NwLJiHtHtFD
G8Ta5x57RC8Ce+ygUMp4RA/9Wyt40owAes9lMcLt1Tb3AHpo3YIPli0D6aHd
1IsCDwbSi8R79czfTymB9NBdI9u11nhML0oWK1urjL/9mB7acrX6lsZB9NDR
zrPNdYPovcB7NWeNf0IQPfSU4bsy1YPpRcvi+LGTzW8E00P7PDEbUxdMD13Q
xEl7Wwi9GOxxqadJTAg99Ba7Jw+Hh9J7KQvHzIR0m1B66LeDshtXhtJDKx0s
GbHxCb1Y7DGwYV3EE3poo78dL6qG0Xsli7B5A70uh9FDV1mNf1cSRg+tnjbv
39qn9OKwx77rh4Y+pYf22L1nTb9wevGy+PzwzHmTcHroXlWXFQXh9NCaM28l
L39GLwF7NPP+8+gZPXRcYrhqjwh6r2XRtHvSCoMIeuiZW7+cyY2ghz4jlbkv
fE7vDe5jaZM33s/poX9qdKlWjqSXKIshFwcPOB1JD73j1aSlWZH00Lc7Ljo5
O4peEva4QfuOIooeWvnu/ri2L+gly2Lpj3PlR1/QQ5uNte77/gU99HN914XT
oumlYI+Rvnpu0fTQE9tE3moeQ+8t7uOatzH7Y+ihvW5+LU2KoYfOy63oOfEl
vVTscUSLeTdf0kNrH+9+uOElvXeyuB421GlXLD30m6ZTo+Ji6aFbLltaPPoV
vTS8V+03d7N/RQ99PuuQqH1F770sglQv7NeJo4cuO2hr/yKOHnrE47vPhsbT
S8ce6x8VWMfTQ7vNj+5UHk8vQxYfrdOmb0igh+76Pl83PIEeemW/GtuBr+l9
wB51W4eZv6aHjvbp9a34Nb2PsvhXNaLDmjf00FNmzZgS/IYe+rj5ip19Eull
Yo9JW62NEumhC7rrBecn0svCHrcZ5yxNoofWke3a+ifRQzv9uj+xWzK9bPx/
nBy09VwyPXQ7o9jLX5LpfZLFgriMgPkp9NBGyoXZXin00GHadS07vqX3GXu8
qzTu5Ft6aPXCvps/vqX3RRb7x40xm5VKD+1xVvjdT6WH/hy1+mPrd/RysMe2
O5sdeUcPrbn2xOh37+jlyuLqLdMNU9LooeO+3jB2TaOHbjpS9m76nt5X7PFE
6Pu97+mhzzyNb5T4nl4e7mOzrOHj0+mhfy77qemUTg89xOGfYX06vW/YY3YH
zx0Z9NC3Bw9Ijc2gly+L94fG1Y/8QA+tHDR3yPUP9NBL/2murv5A7zv2uED3
3OaP9NARV097RH6kVyCL2vcWSWqZ9NATVG7WXsmkhz6858Ggskx6P2Th6ft0
+foseuiv1W9Oh2XRK5RFX/H5bv9seugNFr8STLPpoa8nN64qzKZXhD326Nx/
1Sd66JbbVZc8/kSvWBazPSee6PWZHvp82QLXC5/poYOmbHiV95neT+zRaN/v
xV/ooUfEn+3j+4VeCfbYyWpBlxx66LsbXY7q59BDZ7r73PyUQ68U79WiiOi5
ufTQq8anlMi59H5hj+dye7T/Sg8d86J8zvGv9NANbZsfyvhKrwz/HzW7Oc7I
o4c+fntIpHsevd+yeJg3uajlN3rogpFLuh76Rg898OSmWW+/0SvHfQw/uE8j
nx7asbmh3e18ehWySFluE974Oz200g2377rf6aEXfPJXfv2dXiX2qPZi2tgC
euiww+923yigVyWLyqBvNnUF9NDqDVWh237QQ+9f2Cov5ge9auzRpmf7EYX0
0J/Th0+2LaRXI4ue/afvqCykh9bcu9xqYxE99FU/naCIInq12GPNkS+qxfTQ
TWcbtbEspvdHFjMuX59QWkwPfSblno7mT3roRz0fW4T+pFeHPW5/+ahfCT20
mld6lkkJvb+y2Pa7oMWPEnroW1P/qK8opYdOM267KaCUXr0sOib0Me3xix56
SefRvga/6P2TxaVNsz7k/qKHjri3qumiMnro2qLtox6W0WvAHicc1+r0mx76
8PlLRqd/02vkKTyjHR5k/aaHzlOS0maX00P3WxfSoCin19hTaLvEDVOqoIe2
+/ZxrV4FvSae4s2oYoP3FfTQrU7VS9Mq6aHnPGv/1q2SXlNPYdCi/9/mVfTQ
wSvGqh2ootfMU5TdmLMquYoeeuTntWcnVtND6w7Zff9mNb3mnsLtyKnEhmp6
6I/B5jW7aui18BRdGjkPjK+hh165yGvZmFp66Mu2Yafsa+m19BTRGa/damvp
of/1/xSv84deK08xeV9pxYs/9NDH/RupDKujh35Yq7z4ah291p6iYPag4+V1
9NADLSe4bPhLr42n2Px2fmz4X3pox15aZQPr//v+z1Ok7Njb26L+v+//PIXS
A/35P+v/+/7PUywotzyy5h89JU9xcdpt5+B//33/5ynCTB6+6NPw3/d/nqIy
4dlPo4b/vv/zFOpdkrt/R1uVzNu3DP3/vxNt8X/AqSGG
       "]]}}, {}}, 
   InsetBox["\<\"\[LeftArrow] \\!\\(\[ScriptC]\\_\[ScriptT]\\) (solid line)\"\
\>", {400, 11}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["\[ScriptM]", TraditionalForm], None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 4000}, {0, 100}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6629920285576344`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662992028843854*^9}],

Cell[BoxData["\<\"Estimate income variances of the standard income process, \
using income draws generated by the Moffitt/Gottschalk income process \
(RW+ARMA).\"\>"], "Print",
 CellChangeTimes->{3.6629920288458357`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.`", ",", "0.184`"}], "}"}]}],
  SequenceForm[" Variances of perm shocks and trans shocks: ", {0., 0.184}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629920337423105`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.66299203374331*^9}],

Cell[BoxData["\<\"Estimate the Moffitt/Gottschalk income process (RW+ARMA), \
using income draws from the the standard perm/tran process.\"\>"], "Print",
 CellChangeTimes->{3.662992033744311*^9}],

Cell[BoxData["\<\" \[Sigma]Psi^{2} \[Sigma]v^{2} AR1Coeff MA1CoeffSol\"\>"], \
"Print",
 CellChangeTimes->{3.6629920361119924`*^9}],

Cell[BoxData["\<\" Input value:\"\>"], "Print",
 CellChangeTimes->{3.662992036113993*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.014545454545454545`", ",", "\<\"...\"\>", ",", "\<\"...\"\>", 
   ",", "\<\"...\"\>"}], "}"}]], "Print",
 CellChangeTimes->{3.662992036114994*^9}],

Cell[BoxData["\<\" Our estimates: \"\>"], "Print",
 CellChangeTimes->{3.6629920361159945`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.013`", ",", "0.025`", ",", "0.644`", ",", 
   RowBox[{"-", "0.685`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629920361169963`*^9}],

Cell[BoxData["\<\" Moffitt and Gottschalk (1995): \"\>"], "Print",
 CellChangeTimes->{3.6629920361189985`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.00159`", ",", "0.169`", ",", "0.622`", ",", 
   RowBox[{"-", "0.344`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629920361199985`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent (minutes):  \"\>", "\[InvisibleSpace]", 
   "0.125422305`8.027041026153785"}],
  SequenceForm[" Time spent (minutes):  ", 0.125422305`8.027041026153785],
  Editable->False]], "Print",
 CellChangeTimes->{3.662992036121999*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629920361229997`*^9}],

Cell[BoxData["\<\"Alt params\"\>"], "Print",
 CellChangeTimes->{3.6629920361239996`*^9}],

Cell[BoxData["\<\"Models without aggregate shock\"\>"], "Print",
 CellChangeTimes->{3.662992036125001*^9}],

Cell[BoxData["\<\"High variance of tran shocks\"\>"], "Print",
 CellChangeTimes->{3.6629920361930504`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629920362340946`*^9}],

Cell[BoxData["\<\"Estimate \[Beta] (using model with point (unique) \
\[Beta])\"\>"], "Print",
 CellChangeTimes->{3.66299203623608*^9}],

Cell[BoxData["\<\"Searching for initial guess of \[Beta] using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.6629920362370806`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Initial guess of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.98944706721590323430678737906794890318`10."}],
  SequenceForm[
  " Initial guess of \[Beta]:  ", 
   0.98944706721590323430678737906794890318`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662992110798986*^9}],

Cell[BoxData["\<\"Searching for \[Beta] using the simulation method... \
\"\>"], "Print",
 CellChangeTimes->{3.662992110800988*^9}],

Cell[BoxData["\<\" Searching for \[Beta]... \"\>"], "Print",
 CellChangeTimes->{3.66299212726667*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.9887885446910814`"}],
  SequenceForm[" Solution of \[Beta]:  ", 0.9887885446910814],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629927232035227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, \
Average deviation of K (%):   \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.9887885446910814`", ",", "39.31218145856125`", ",", 
     "10.26557998028556`", ",", "0.4898955887914871`"}], "}"}]}],
  SequenceForm[
  " Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, Average \
deviation of K (%):   ", {0.9887885446910814, 39.31218145856125, 
   10.26557998028556, 0.4898955887914871}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629927572236605`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6629927572256627`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "11.804483679751558`", ",", "37.99170276501404`", ",", 
   "54.224139665073814`", ",", "60.59501764191887`", ",", 
   "75.59389293920238`", ",", "83.11351563762216`", ",", "89.10978796548596`",
    ",", "97.19098363348728`", ",", "54.224139665073814`", ",", 
   "0.5085394530477833`", ",", "0.5053840163915556`", ",", 
   "0.3784643954760159`", ",", "Indeterminate", ",", "1.4769801750587788`", 
   ",", "0.795287146128877`", ",", "0.13417785604711574`", ",", 
   "1294.2187665484419`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629927572286654`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run model with point (unique) \[Beta] \
(minutes):  \"\>", "\[InvisibleSpace]", 
   "10.77469526166666666666666666666666666667`9.961071244166908"}],
  SequenceForm[
  " Time spent to run model with point (unique) \[Beta] (minutes):  ", 
   10.77469526166666666666666666666666666667`9.961071244166908],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629927572807016`*^9}],

Cell[BoxData["\<\"High variance of perm shocks\"\>"], "Print",
 CellChangeTimes->{3.6629927572827044`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629927573307376`*^9}],

Cell[BoxData["\<\"Estimate \[Beta] (using model with point (unique) \
\[Beta])\"\>"], "Print",
 CellChangeTimes->{3.662992757332739*^9}],

Cell[BoxData["\<\"Searching for initial guess of \[Beta] using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.6629927573337398`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Initial guess of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.98944706721602494767127414185411960576`10."}],
  SequenceForm[
  " Initial guess of \[Beta]:  ", 
   0.98944706721602494767127414185411960576`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.662992834615576*^9}],

Cell[BoxData["\<\"Searching for \[Beta] using the simulation method... \
\"\>"], "Print",
 CellChangeTimes->{3.662992834617578*^9}],

Cell[BoxData["\<\" Searching for \[Beta]... \"\>"], "Print",
 CellChangeTimes->{3.662992851330435*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]:  \"\>", "\[InvisibleSpace]", 
   "0.9862433829175392`"}],
  SequenceForm[" Solution of \[Beta]:  ", 0.9862433829175392],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629936379886155`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, \
Average deviation of K (%):   \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.9862433829175392`", ",", "39.29908490481924`", ",", 
     "10.26339111317091`", ",", "1.3487744232688927`"}], "}"}]}],
  SequenceForm[
  " Solution of \[Beta], Agg K (Mean of k (level)), K/Y ratio, Average \
deviation of K (%):   ", {0.9862433829175392, 39.29908490481924, 
   10.26339111317091, 1.3487744232688927`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629936715404215`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.662993671541422*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "23.791976701606494`", ",", "49.84589259285843`", ",", 
   "63.450356409684424`", ",", "68.51008773965313`", ",", "80.125717309933`", 
   ",", "85.89382990694212`", ",", "90.560011597705`", ",", 
   "97.21149371443757`", ",", "63.450356409684424`", ",", 
   "0.5947529256102463`", ",", "0.5920159142448418`", ",", 
   "0.5876008897445872`", ",", "Indeterminate", ",", "1.1406890955942282`", 
   ",", "1.4926659144742322`", ",", "0.09909758394871637`", ",", 
   "670.8629257700111`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629936715444236`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run model with point (unique) \[Beta] \
(minutes):  \"\>", "\[InvisibleSpace]", 
   "13.94971478666666666666666666666666666667`10.073231576409977"}],
  SequenceForm[
  " Time spent to run model with point (unique) \[Beta] (minutes):  ", 
   13.94971478666666666666666666666666666667`10.073231576409977],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993671598462*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6629936716004643`*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.662993671601465*^9}],

Cell[BoxData["\<\"Models with aggregate shocks\"\>"], "Print",
 CellChangeTimes->{3.6629936716024656`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6629936716885424`*^9}],

Cell[BoxData["\<\"Run KS-JEDC model\"\>"], "Print",
 CellChangeTimes->{3.6629936716895285`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.662993671690548*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.662993671701538*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629936725591435`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151333`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663966`", ",", "0.10618025700090113`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133834`", ",", "0.7054024753403315`", ",", 
   "0.987648408628959`", ",", "0.940222875080717`", ",", 
   "0.6753895677023233`", ",", "0.7273964276788892`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.662993672561146*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6629936725631466`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2434881284855772`", ",", "0.8403562070237575`", ",", 
   "0.1470787509349106`", ",", "0.10757403488551805`", ",", 
   "0.8613280423351569`", ",", "0.28313368709839476`", ",", 
   "0.6663671970124141`", ",", "0.60865067515029`", ",", 
   "0.7979901621977178`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.662993672564148*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.662993672572153*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.662993672574156*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8766197`7.093326224023486"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8766197`7.093326224023486],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993672579159*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.66299367258016*^9}],

Cell[BoxData["\<\"Running KS-JEDC model...\"\>"], "Print",
 CellChangeTimes->{3.6629936725811605`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993673149564*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1348948090827513`", ",", "0.9642120877362972`", ",", 
     "0.1197374893773453`", ",", "0.9668751294804981`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1348948090827513, 0.9642120877362972, 0.1197374893773453, 
   0.9668751294804981}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937201238937`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9978669553717983`", ",", "0.9980875010334636`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9978669553717983, 0.9980875010334636}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937201258955`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937201268964`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1379661782960372`", ",", "0.9632072567831974`", ",", 
     "0.12183000092696339`", ",", "0.966135961258296`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1379661782960372, 0.9632072567831974, 0.12183000092696339`, 
   0.966135961258296}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937497719307`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9988519576446486`", ",", "0.9989657811120257`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9988519576446486, 0.9989657811120257}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937497739334`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937497759347`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13806646037527087`", ",", "0.9631803907272143`", ",", 
     "0.12141482908459839`", ",", "0.9662487996989911`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13806646037527087`, 0.9631803907272143, 0.12141482908459839`, 
   0.9662487996989911}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993774893757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999991372826752`", ",", "0.999999207510902`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999991372826752, 0.999999207510902}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937748947573`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993774895759*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13836264394921308`", ",", "0.9630995042972033`", ",", 
     "0.12145392132135344`", ",", "0.9662371740955467`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13836264394921308`, 0.9630995042972033, 0.12145392132135344`, 
   0.9662371740955467}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937967022314`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999992767325904`", ",", "0.999999184714047`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999992767325904, 0.999999184714047}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993796704232*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629937967062335`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13855721725615872`", ",", "0.9630474574933509`", ",", 
     "0.12147121085374978`", ",", "0.9662331061930852`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13855721725615872`, 0.9630474574933509, 0.12147121085374978`, 
   0.9662331061930852}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993818063388*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999992876229453`", ",", "0.9999993032038553`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999992876229453, 0.9999993032038553}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629938180653906`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993818066403*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by KS \
(dropping samples if annual income is below 20 percent of the 7-year \
average): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0.0369353693891615`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by KS (dropping samples \
if annual income is below 20 percent of the 7-year average): ", {
   0, 0.0369353693891615}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629939125684476`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by \
Castaneda (no sample restriction): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.04206052426036708`", ",", "0.01198011721738046`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by Castaneda (no sample \
restriction): ", {0.04206052426036708, 0.01198011721738046}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662993913656215*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by \
Castaneda (dropping samples if annual income is below 20 percent of the \
7-year average): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.028922819763418275`", ",", "0.004062924627718595`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by Castaneda (dropping \
samples if annual income is below 20 percent of the 7-year average): ", {
   0.028922819763418275`, 0.004062924627718595}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994176505723*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629941765087256`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03272402291554555`", ",", "0.013657313953896376`", ",", 
   "0.4173482578576385`", ",", "0.10690138236934076`", ",", 
   "3.2667555161305444`", ",", "0.7706680774175927`", ",", 
   "0.6373916487391139`", ",", "0.6668562412620183`", ",", 
   "0.9782987935810503`", ",", "0.9585253619075451`", ",", 
   "0.6736072515879331`", ",", "0.7233011814205602`", ",", 
   "10.314562646430264`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629941765107293`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6629941765127287`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.23141133822009566`", ",", "0.8548162555801787`", ",", 
   "0.15399908140315915`", ",", "0.12966330576387303`", ",", 
   "0.8537129219759728`", ",", "0.26150560482785046`", ",", 
   "0.6959755134756898`", ",", "0.6314577589749366`", ",", 
   "0.7706389836799444`", ",", 
   RowBox[{"-", "0.09202994118438047`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629941765147295`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662994176516736*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "2.1461602838508953`", ",", "9.303454995306899`", ",", 
   "17.148635505923497`", ",", "31.036605713349598`", ",", 
   "37.374570121468146`", ",", "54.57209063379679`", ",", 
   "64.75743674373643`", ",", "74.00426035292864`", ",", "89.62919541755215`",
    ",", "0.20842051175429419`", ",", "82.87066666666666`", ",", 
   "0.004833333333333334`", ",", "41.28853737202515`", ",", 
   "5036.589687059257`"}], "}"}]], "Print",
 CellChangeTimes->{3.662994176518732*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.04814914332006748`"}],
  SequenceForm[" MPC mean:", 0.04814914332006748],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994176520734*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6629941765217357`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.046458895138309364`", ",", "0.046653468751046034`", ",", 
   "0.04678804543736015`", ",", "0.04701172382963703`", ",", 
   "0.04721541305492072`", ",", "0.04954845170867228`", ",", 
   "0.050939334136132275`", ",", "0.048580431495616194`", ",", 
   "0.04918787661320534`", ",", "0.05046116309262183`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629941765237355`*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6629941765247364`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03986399424834497`", ",", "0.04060886662037355`", ",", 
   "0.04125104235772936`", ",", "0.04213142747423004`", ",", 
   "0.043065021511317414`", ",", "0.05573730738432703`", ",", 
   "0.06362150366646968`", ",", "0.05032410667233034`", ",", 
   "0.053800038929593286`", ",", "0.06085164607549931`"}], "}"}]], "Print",
 CellChangeTimes->{3.66299417652774*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.04737194458500937`", ",", "0.05741352389532117`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.04737194458500937, 0.05741352389532117}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629941765297403`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13856304801698963`", ",", "0.9630464001525177`", ",", 
     "0.12154493688686757`", ",", "0.9662131228429913`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13856304801698963`, 0.9630464001525177, 0.12154493688686757`, 
   0.9662131228429913}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994176531744*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999987852697849`", ",", "0.9999989412128524`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999987852697849, 0.9999989412128524}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994176533744*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run KS-JEDC model (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.47102738333333333333333333333333333333`9.856602333853798"}],
  SequenceForm[
  " Time spent to run KS-JEDC model (minutes): ", 
   8.47102738333333333333333333333333333333`9.856602333853798],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629941808408017`*^9}],

Cell[BoxData["\<\" Figure fCrossSectionVar \"\>"], "Print",
 CellChangeTimes->{3.6629941808428*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.006], LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQDQEf7P9d7Ju6f+M8e6iAg/LlmUn5FUugfA4Hv2+/
d87vWgnlCzhM5fUM4OxYB+WLOPCfy202P7gRypdweGl7ckJq6BYoX8bhUAZL
ybGH26B8BQeVsryL9+p2QvlKDhGbc9i6ePZA+SoOa2qeOof37oPy1RzyU5WD
Nk45AOVrOAQEHfzEe/oglK/lsNnkoLsg/2EoX8eh/NOxp1sSj0D5eg4CC14f
mbH/KJRv4HB3WWjlF9njUL6hw9Vja8sX1J2A8o0cnqQ0zzZ8dBLKN3a43mL4
o8blNJRv4pC595mH3swzUL6pw7+Jn2Oa35yF8s0cVjYuYNF2Og/lmzsEHIoQ
Vgq8AOVbOBgGcd088QfGt3TQuHLKTXnxRSjfyuGuYuqWIs9LUL61QwBDLhv3
bxjfxmERT0/y+2WXoXxbh5hf62+cDLwC5ds5LP3e8LzmP4xv78C1qPzPteVX
oXwHhwKrb03RQdcg/AYHh+0dzTd+/YLyGRwdMmq3WsasuA6Vd3Sw1e1Rygy6
YQ8ALE2kMQ==
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.006], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQfURqxfr1gv/tK/d8qs/zPGjPAAEOzacvMRuXw/gc
DipW7xYHT4DxBRyulicfMZ8B44s4dAXXv+ydB+NLOGRe3VwdOwvGl3GYN+O2
g84yGF/BwfWEoXFmO4yv5BAadWVOQR6Mr+IwrVdL6XM1jK/mUJmpXqc6G8bX
cPBii357fA2Mr+VwolZvpR2cr+PAlHeXiWs3jK/nsEH8783OhTC+gYNc3V7D
lYtgfEOHs1VsDLs3wPhGDu0hMW+C4P4xdpAUaP6YNBHGN3Gw2hVeNXU6jG/q
cDDEX+77fBjfzCGa4f/dilUwvrlD8J9TGRfaYHwLh4rNrn9b4OFp6dBmw/X8
dyuMb+XwfEuJszvcPmuHmq+laRVbYXwbh/ffgkoOw91r6xBbVDbVfD2Mb+fw
wc3PJ3gXjG/vsGih28In22F8B4crlf1NW2DmNTg4TFx+PH//Wpi8o4PSeQad
1bDwanB0mKbx9Ho90D4ATM+mKw==
       "]]}}, {}}, {{}, 
    {RGBColor[0.24720000000000014`, 0.24, 0.6], PointSize[Large], 
     PointBox[CompressedData["
1:eJxTTMoPSmViYGBQBmIQDQEf7Fn6PxmfstpkDxVwaEkusdZm2QrlczjULH/w
evY0GF/A4Yvo7or85XugfBGHOXfFzpgs3A3lSzgsaZv+RjJvL5Qv4+BmplJy
ZflBKF/B4VLXJ8dDew5A+UoObs5bF6XyHYbyVRyEZm8/LVZ1BMpXc9iktFjv
94fjUL6Gw7UOu/cik2B8LYdzkS5PnFjPQPk6Dmn6+VN+yp6G8vUcyjTnavL8
PgvlGzhkfavcHs17Dso3dDhX/UzRbcp5KN/I4V2dX87zMph5xg5tiesn7lkC
U2/isLgv4tyDqItQvqnD7bDaj+42ML6Zg/72V0o6uy5A+eYOGzmUp4S8gfEt
HBzrs7Nuz4apt3QInmQfzXkCxrdyYDy05t0798tQvrXD9TBBntqyS1C+jYNk
nLDomjsweVuHnZOcvjvB1ds5aJrNz9mtdQXKt3fo775ZpfvjKpTv4JD4I2h3
4jEov8HBgXm6GUve22tQeUeH+9d8lm08C+U3ODrU7tn66oL+dXsA8K6gsw==

      "]]}, {}}, InsetBox["\<\"Data \[DownArrow]\"\>", {17, 0.29}, {-1, 0}], 
   InsetBox["\<\"\[UpArrow] FBS (solid line)\"\>", {21, 0.21}, {-1, 0}], 
   InsetBox["\<\"KS Process \"\>", {22, 0.12}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{
    FormBox["\"Horizon r\"", TraditionalForm], None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 35.}, {0, 0.3800299489382331}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0.7000000000000001, 0.7000000000000001}, {
   0.007600598978764662, 0.007600598978764662}}]], "Output",
 CellChangeTimes->{3.6629941855501413`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662994185571158*^9}],

Cell[BoxData["\<\"Run KSHetero model\"\>"], "Print",
 CellChangeTimes->{3.6629941855731573`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.662994185575159*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6629941855871677`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.662994186411751*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151334`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663955`", ",", "0.10618025700090115`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133833`", ",", "0.7054024753403318`", ",", 
   "0.9876484086289594`", ",", "0.9402228750807169`", ",", 
   "0.6753895677023235`", ",", "0.7273964276788891`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629941864137535`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6629941864157553`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24348812848557735`", ",", "0.8403562070237575`", ",", 
   "0.14707875093491063`", ",", "0.10757403488551806`", ",", 
   "0.8613280423351561`", ",", "0.2831336870983948`", ",", 
   "0.6663671970124141`", ",", "0.6086506751502898`", ",", 
   "0.7979901621977175`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.662994186417756*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.662994186419757*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629941864217596`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8376004`7.073551873902194"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8376004`7.073551873902194],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994186427764*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6629941864287643`*^9}],

Cell[BoxData["\<\"Running KSHetero model...\"\>"], "Print",
 CellChangeTimes->{3.662994186430766*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994187021185*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.10822252523993536`", ",", "0.9713230835154762`", ",", 
     "0.09545155250875337`", ",", "0.9733906862014357`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.10822252523993536`, 0.9713230835154762, 0.09545155250875337, 
   0.9733906862014357}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994507673705*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9990272103157439`", ",", "0.9985077485251134`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9990272103157439, 0.9985077485251134}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994507675707*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.438487355`9.086572296800087"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.438487355`9.086572296800087],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994507676708*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299450767871*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629946247928076`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "15.90006286049476`", ",", "43.75153138998222`", ",", "61.664311664250505`",
    ",", "79.01878738612545`", ",", "83.00705641381005`", ",", 
   "89.83340043153366`", ",", "93.20037688356872`", ",", "95.94043666227184`",
    ",", "99.57921189758041`", ",", "0.7303276570193595`", ",", 
   "12.460033333333334`", ",", "5.695033333333333`", ",", 
   "15.06222173537999`", ",", "48.493908399571744`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629946247948103`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13729713594420534`", ",", "0.9635639876923365`", ",", 
     "0.12728189347646668`", ",", "0.9649176354134431`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13729713594420534`, 0.9635639876923365, 0.12728189347646668`, 
   0.9649176354134431}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994624796812*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995611752134899`", ",", "0.9991066533475658`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995611752134899, 0.9991066533475658}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629946247978125`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.45813461333333333333333333333333333333`9.092463867622287"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.45813461333333333333333333333333333333`9.092463867622287],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994624799815*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629946248008146`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662994770254021*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "19.86378342761878`", ",", "49.93628964817573`", ",", "67.8132978268413`", 
   ",", "83.5613989026019`", ",", "86.66532408064194`", ",", 
   "92.14888564961974`", ",", "94.88663303126584`", ",", "97.10184529353708`",
    ",", "99.9485206878024`", ",", "0.7755643318398446`", ",", 
   "9.303333333333333`", ",", "7.16655`", ",", "12.562738320761978`", ",", 
   "10.611866071209786`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629947702570233`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1425012322539167`", ",", "0.9621334481510708`", ",", 
     "0.13365814126105252`", ",", "0.9631764201537454`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1425012322539167, 0.9621334481510708, 0.13365814126105252`, 
   0.9631764201537454}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629947702590246`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998919485184529`", ",", "0.9999083981118447`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998919485184529, 0.9999083981118447}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629947702610273`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.45594975333333333333333333333333333333`9.091812635399648"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.45594975333333333333333333333333333333`9.091812635399648],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629947702620277`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629947702640285`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629948641776648`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "20.99339361343891`", ",", "50.747586803596725`", ",", "68.48503953331556`",
    ",", "83.94777007451928`", ",", "86.96292438611745`", ",", 
   "92.3254695756075`", ",", "95.01678431441464`", ",", "97.19415593919531`", 
   ",", "99.97316555091626`", ",", "0.7800174155712887`", ",", "9.0078`", ",",
    "7.24165`", ",", "12.400668687179165`", ",", "10.048743504658464`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.662994864180668*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1477677313856189`", ",", "0.9606975565266325`", ",", 
     "0.13969289940616628`", ",", "0.9615352139867503`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1477677313856189, 0.9606975565266325, 0.13969289940616628`, 
   0.9615352139867503}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629948641826696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999831624847169`", ",", "0.999982075877291`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999831624847169, 0.999982075877291}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629948641846704`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.46990965166666666666666666666666666667`9.095956889774373"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.46990965166666666666666666666666666667`9.095956889774373],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994864185672*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.662994864187673*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662995261275429*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "19.761753040196275`", ",", "49.80905417215818`", ",", "67.8984710588049`", 
   ",", "83.71817970585825`", ",", "86.7993704404811`", ",", 
   "92.2277708836176`", ",", "94.94399559897218`", ",", "97.14012343964042`", 
   ",", "99.95500123491489`", ",", "0.7764577922828659`", ",", 
   "9.058726666666667`", ",", "7.16997`", ",", "12.476493976653359`", ",", 
   "10.300500049635438`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629952612774305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14931230610157542`", ",", "0.9602717720898533`", ",", 
     "0.1419417545204527`", ",", "0.9609172584172558`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14931230610157542`, 0.9602717720898533, 0.1419417545204527, 
   0.9609172584172558}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629952612794313`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.99998262512125`", ",", "0.9999790507677918`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.99998262512125, 0.9999790507677918}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629952612814336`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "6.52151071833333333333333333333333333333`9.743014460609686"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   6.52151071833333333333333333333333333333`9.743014460609686],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995261282434*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995261283435*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.662995262034968*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995591510749*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299591988475*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.662995986057703*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.032475496045533306`", ",", "0.014528090008743349`", ",", 
   "0.44735544572972114`", ",", "0.09908012772467908`", ",", 
   "3.050919609842468`", ",", "0.7666602667690523`", ",", 
   "0.7320334011365733`", ",", "0.7301055831152546`", ",", 
   "0.9588897015832462`", ",", "0.9585524467685453`", ",", 
   "0.6641652548545104`", ",", "0.7154889826513369`", ",", 
   "10.424757002056499`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629959860607057`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6629959860637093`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.10903712721354737`", ",", "0.9246583230575923`", ",", 
   "0.09763502435001675`", ",", "0.08243199552465025`", ",", 
   "0.7653852136827873`", ",", "0.09857811990908497`", ",", 
   "0.8206683965106629`", ",", "0.7676404300818178`", ",", 
   "0.7666356862764845`", ",", 
   RowBox[{"-", "0.09189903944097254`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629959860647087`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662995986067713*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "19.25642915977848`", ",", "49.11595760584949`", ",", "67.43782847734728`", 
   ",", "83.57345591261618`", ",", "86.70221354256394`", ",", 
   "92.16720759425554`", ",", "94.90052417336732`", ",", "97.11153664966315`",
    ",", "99.94593196494361`", ",", "0.7740893978489465`", ",", 
   "8.982066666666666`", ",", "7.13035`", ",", "12.532421278511388`", ",", 
   "10.499424628837385`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629959860697126`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.09449378911826622`"}],
  SequenceForm[" MPC mean:", 0.09449378911826622],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629959860717144`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.662995986073715*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.037672490776579526`", ",", "0.037961557936861845`", ",", 
   "0.03986014913767877`", ",", "0.052150536052304575`", ",", 
   "0.06125218787278719`", ",", "0.1426910711782413`", ",", 
   "0.1800713181831628`", ",", "0.11116225845185279`", ",", 
   "0.13055213442689562`", ",", "0.16903055632136754`"}], "}"}]], "Print",
 CellChangeTimes->{3.662995986075717*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.662995986077718*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.037677496602655514`", ",", "0.037953207585660786`", ",", 
   "0.03944519720492168`", ",", "0.05131929420252246`", ",", 
   "0.060556954256375084`", ",", "0.14366461997685276`", ",", 
   "0.18743914444583631`", ",", "0.11151814098986323`", ",", 
   "0.1314286460095032`", ",", "0.17235940837354358`"}], "}"}]], "Print",
 CellChangeTimes->{3.662995986078719*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.0870611580152496`", ",", "0.18155357383924164`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.0870611580152496, 0.18155357383924164`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299598608072*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14941572496851468`", ",", "0.9602348263970303`", ",", 
     "0.14191803813846984`", ",", "0.9609130583045365`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14941572496851468`, 0.9602348263970303, 0.14191803813846984`, 
   0.9609130583045365}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629959860827227`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999886923419603`", ",", "0.9999855982415831`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999886923419603, 0.9999855982415831}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995986083723*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "12.07114851833333333333333333333333333333`10.010414841547835"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   12.07114851833333333333333333333333333333`10.010414841547835],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995986085724*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run KSHetero model (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "30.00285528166666666666666666666666666667`10.405828835404135"}],
  SequenceForm[
  " Time spent to run KSHetero model (minutes): ", 
   30.00285528166666666666666666666666666667`10.405828835404135],
  Editable->False]], "Print",
 CellChangeTimes->{3.662995986595086*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.662995986649125*^9}],

Cell[BoxData["\<\"Run \[Beta]-Point model\"\>"], "Print",
 CellChangeTimes->{3.6629959866521544`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6629959866551557`*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.662995986670147*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.662995987527746*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151333`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663966`", ",", "0.10618025700090113`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133834`", ",", "0.7054024753403315`", ",", 
   "0.987648408628959`", ",", "0.940222875080717`", ",", 
   "0.6753895677023233`", ",", "0.7273964276788892`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.662995987529748*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6629959875317497`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2434881284855772`", ",", "0.8403562070237575`", ",", 
   "0.1470787509349106`", ",", "0.10757403488551805`", ",", 
   "0.8613280423351569`", ",", "0.28313368709839476`", ",", 
   "0.6663671970124141`", ",", "0.60865067515029`", ",", 
   "0.7979901621977178`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629959875337505`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.6629959875357523`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.662995987537754*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8696091`7.089839073596411"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8696091`7.089839073596411],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629959875437603`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6629959875457597`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Point model... \"\>"], "Print",
 CellChangeTimes->{3.6629959875467606`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629959881521893`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1387580870934909`", ",", "0.9630378773212458`", ",", 
     "0.12253719886832981`", ",", "0.9660035494016526`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1387580870934909, 0.9630378773212458, 0.12253719886832981`, 
   0.9660035494016526}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996144257955*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.996613833999236`", ",", "0.9954563140803587`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.996613833999236, 0.9954563140803587}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629961442599573`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996144261959*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13915849521510634`", ",", "0.9629665999430008`", ",", 
     "0.12411798866748988`", ",", "0.9656275535628267`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13915849521510634`, 0.9629665999430008, 0.12411798866748988`, 
   0.9656275535628267}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299623026198*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9993645351488972`", ",", "0.9989036703454589`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9993645351488972, 0.9989036703454589}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996230263982*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629962302659836`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13943117759701293`", ",", "0.962906776410035`", ",", 
     "0.12565411534653628`", ",", "0.9652358941268095`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13943117759701293`, 0.962906776410035, 0.12565411534653628`, 
   0.9652358941268095}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629963108391542`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998818130403991`", ",", "0.9997337758298961`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998818130403991, 0.9997337758298961}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629963108421574`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996310843157*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13988888299219696`", ",", "0.9627880732951284`", ",", 
     "0.12643164692170097`", ",", "0.9650369768596758`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13988888299219696`, 0.9627880732951284, 0.12643164692170097`, 
   0.9650369768596758}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629963855871925`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999538364773848`", ",", "0.9999089007633113`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999538364773848, 0.9999089007633113}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996385588193*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629963855901947`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14027289379145422`", ",", "0.9626845314997762`", ",", 
     "0.12664668766833875`", ",", "0.9649845622193816`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14027289379145422`, 0.9626845314997762, 0.12664668766833875`, 
   0.9649845622193816}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629964574271665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999706675630883`", ",", "0.9999519584157832`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999706675630883, 0.9999519584157832}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629964574291687`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629964574301696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14048290629824195`", ",", "0.9626261124498825`", ",", 
     "0.1265313869640733`", ",", "0.9650181500857358`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14048290629824195`, 0.9626261124498825, 0.1265313869640733, 
   0.9650181500857358}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996527735055*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999666315042223`", ",", "0.9999643948103278`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999666315042223, 0.9999643948103278}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629965277360554`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996527738057*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by the \
Point model (dropping samples if annual income is below 20 percent of the \
7-year average): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.012557919233332382`", ",", "0.04905049997482824`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by the Point model \
(dropping samples if annual income is below 20 percent of the 7-year \
average): ", {0.012557919233332382`, 0.04905049997482824}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967064838867`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629967064858894`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03257933454850137`", ",", "0.014055671205417437`", ",", 
   "0.43142904544267274`", ",", "0.10117471543723476`", ",", 
   "3.105487476627687`", ",", "0.7667766556111368`", ",", 
   "0.7157416166734006`", ",", "0.7198243127621043`", ",", 
   "0.9629743983193574`", ",", "0.9607000177106493`", ",", 
   "0.6685705378593484`", ",", "0.7165459017074172`", ",", 
   "10.403518723815822`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629967064888906`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.662996706490893*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1277046719491113`", ",", "0.912195167966722`", ",", 
   "0.11285066792807266`", ",", "0.09243438875153225`", ",", 
   "0.776805888618658`", ",", "0.124739585912149`", ",", "0.805829780120021`",
    ",", "0.7507076987095158`", ",", "0.7667224326486624`", ",", 
   RowBox[{"-", "0.09229385336655806`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629967064938955`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629967064958973`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8.607049308423917`", ",", "23.445585367842874`", ",", "35.28996957483477`",
    ",", "52.01656914407946`", ",", "58.562010982475044`", ",", 
   "73.98811725547277`", ",", "81.79948551848013`", ",", "88.10940771603491`",
    ",", "96.78577770256669`", ",", "0.48132883580826963`", ",", "46.99775`", 
   ",", "0.42225`", ",", "37.379892816359224`", ",", "1513.0303024473208`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.662996706497896*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.0983317957765556`"}],
  SequenceForm[" MPC mean:", 0.0983317957765556],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996706499899*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.662996706501901*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.07871340870958565`", ",", "0.08257616950823987`", ",", 
   "0.08912573167094529`", ",", "0.10237289332636756`", ",", 
   "0.10460311530763922`", ",", "0.08886312033088262`", ",", 
   "0.0954276002776504`", ",", "0.09999670585193665`", ",", 
   "0.09173939848587642`", ",", "0.09189591696207566`"}], "}"}]], "Print",
 CellChangeTimes->{3.662996706502901*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.662996706504904*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06563453835369804`", ",", "0.06563453703142474`", ",", 
   "0.06568802904751603`", ",", "0.06676796283204511`", ",", 
   "0.06810579079004331`", ",", "0.14228465624923514`", ",", 
   "0.2035789783831886`", ",", "0.10889696829310214`", ",", 
   "0.12843298841952355`", ",", "0.18033388679704787`"}], "}"}]], "Print",
 CellChangeTimes->{3.662996706506904*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.08779384395960055`", ",", "0.22469749083353185`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.08779384395960055, 0.22469749083353185`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967065089054`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14096381074719044`", ",", "0.9624946512374274`", ",", 
     "0.1271862806946152`", ",", "0.9648418382502644`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14096381074719044`, 0.9624946512374274, 0.1271862806946152, 
   0.9648418382502644}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662996706509905*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999677525759623`", ",", "0.9999649358965405`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999677525759623, 0.9999649358965405}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299670651291*^9}],

Cell[BoxData["\<\" Consumption function\"\>"], "Print",
 CellChangeTimes->{3.6629967065139074`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Point model(minutes): \"\>", 
   "\[InvisibleSpace]", 
   "12.08584229333333333333333333333333333333`10.010943171109872"}],
  SequenceForm[
  " Time spent to run \[Beta]-Point model(minutes): ", 
   12.08584229333333333333333333333333333333`10.010943171109872],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967126902943`*^9}],

Cell[BoxData["\<\" Figure of consumption function\"\>"], "Print",
 CellChangeTimes->{3.6629967126922927`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.006], LineBox[CompressedData["
1:eJxd0nlMFHcUB/DlEqxFQa7lEFjuG3aX1lpp5glClYZ7ubQUMKXQqHiwpUEI
CWiJHIstEi3QtKBEkVq1proICBSRo6Ucy60laQoUKCx7loCAtOh7//SbTCa/
zPt+3mQynGOnIlM0WSxWyn/X1v3/qazYSg8T01o79HN6D/P6PMEIXp0nGF/+
VqaYvEtNHxkaTeHzeSbthF1jR9Ys81qRM4OLq6XtGvM4r2JE5z6eVMrmmdRP
trLMSBRLGVeu/439VebZWEdEDW+B+a13K+tM4P0k7oW6BfRY4Lrt27GOXYs4
rwGKd9/4VXl8EX0tWJ2qUUY3L2JfG27o3Dz7no4U920DgfNtpUOoFD09CAne
EHsVStHbDgWdIoGwXYreDmj2t1Y8WpOi9yb803JHtOm7hN5OyDb/Msg1ZQk9
A7A1L14rKVvCeQPoZBfck7cuoW8IJ9h5KQIp9XeDITvHosFChvuMQGz2eb/l
IRl6xiC0mZ6VZcjQM4b1VP01boUMPRM4f+/tncIWGXqmsGM1kfNwijwz6Kk+
aJGjLUePDfqBE/Z7zOTosSF8/qRni6scPXMoF2nuTfSTo2cB49yrwAqTo2cJ
VqPuwTXJ5FlB0rm2KH8heVYw+3zDaLKAvD3w2Uh+n+FV8qxBq1+3MOgmeTZQ
1l0SkC0mzxZs2g1f3u2ieVv4oelKw/QY+baw/4FlhvmcnHlV53Og+061Z+gK
7eNATJ3jXL6eAj07mK6pvyZmK9Czg7NV3gmLLgr07GCz/Cczzj4Fvo89lJbu
k0QfVqBnD1YXW0qK4slzgFt5Ae+3fkqeA+zN7tZQZ5HnAE+FIc0uReQ5QlS6
JDOhkjxH+CM1lltWT54TpCf/vtDZSJ4TrB9JvrH2C3lOUBswkXH5GXnOINGI
77wwT54zaLSNszNXyHMB79y446m6SvRcIMFv/HGcqRI9Fyh5EWsQ7KhEzxUa
G8aO7fdVoucKc5mxDzwClOi5AfutMV3rSPLcIEgVc2RXMnluIPxx9DbrNHnu
cP1UzKYilzx3GPQcjZgSkecBmwvRtcPfkOcBXvUjy0+/J88DPkyLPixuJM8T
ipxGqup6yPOER9OCpYpx8rxg9towFM+S5wUmyYLLOcvkecFBm+GZkzoq9Lwh
YzLqnURjFXreUFM1VBRur0LPBwbioyYP8FT4f/nAS7Mhb/4BFfo+4DEame8Q
Tn0fOFouGTZJVOE+HyiMjHTWTSePC2IDSdZKDnlc+Ksvone+mDwuGIsGrZ9X
kscF/w8izvTeIo8LZ7YPPnncQB4PvusKN73bRR4P+r4YSKseJY8HGwHhTV/N
kMcDd80B/fNq8ngQ3xaWJNRSo8eHi7n991N2q/H78OGhX5hOLEeNHh9mXvTF
HvJRo8eHwbYnlWxGjR4fqv/UOx0XQp4vpGuHBn59VM38C7MpxYU=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[{{0.8, 0.}, {0.8, 1.5}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[{{18.5, 0.}, {18.5, 1.5}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.007], Dashing[{0.02, 0.02}], 
      LineBox[{{1., 0.}, {1., 1.5}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.007], Dashing[{0.02, 0.02}], 
      LineBox[{{2.9, 0.}, {2.9, 1.5}}]}}, {}}, 
   InsetBox["\<\"\[UpArrow] Consumption/(quarterly) permanent\"\>", {4, 0.9}, \
{-1, 0}], InsetBox["\<\"   income ratio\"\>", {4, 0.8}, {-1, 0}], 
   {Arrowheads[0.02], ArrowBox[{{3.6, 1.43}, {0.82, 1.43}}]}, 
   InsetBox["\<\"80th percentile in net worth ratio\[RightArrow]\"\>", \
{7, 0.5}, {-1, 0}], 
   InsetBox["\<\"Empirical (SCF) 20th percentile\"\>", {3.7, 1.45}, {-1, 0}], 
   InsetBox["\<\"       in net worth/(quarterly) permanent\"\>", {2.1, 1.35}, \
{-1, 0}], InsetBox["\<\"       income ratio\"\>", {2.1, 1.25}, {-1, 0}], 
   {Arrowheads[0.02], ArrowBox[{{3.7, 0.4}, {1.1, 0.4}}]}, 
   InsetBox["\<\"20th percentile in liquid fin assets ratio\"\>", {4.1, 0.4}, \
{-1, 0}], 
   InsetBox["\<\"\[LeftArrow] 80th percentile in liquid fin assets \
ratio\"\>", {3.4, 0.2}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {17.4, -0.16}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->32,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{-1, 20}, {0, 1.6}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.662996712700298*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1: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

     "], {{{}, {}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{185, 184, 135}, {177, 176, 123}, {183, 182, 132}, {169, 
          168, 111}, {171, 170, 114}, {167, 166, 108}, {197, 196, 153}, {173, 
          172, 117}, {165, 164, 105}, {163, 203, 102}, {195, 194, 150}, {179, 
          178, 126}, {162, 204, 202}, {181, 180, 129}, {187, 186, 138}, {189, 
          188, 141}, {191, 190, 144}, {199, 198, 156}, {201, 200, 159}, {193, 
          192, 147}, {175, 174, 120}}]]}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{195, 196, 152, 151}, {185, 186, 137, 136}, {173, 174, 
          119, 118}, {171, 172, 116, 115}, {187, 188, 140, 139}, {167, 168, 
          110, 109}, {175, 176, 122, 121}, {169, 170, 113, 112}, {191, 192, 
          146, 145}, {193, 194, 149, 148}, {181, 182, 131, 130}, {165, 166, 
          107, 106}, {197, 198, 155, 154}, {183, 184, 134, 133}, {199, 200, 
          158, 157}, {179, 180, 128, 127}, {189, 190, 143, 142}, {163, 164, 
          104, 103}, {201, 202, 161, 160}, {177, 178, 125, 
          124}}]]}, {}, {}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 
         69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 
         86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101}]}, 
       {GrayLevel[0], 
        LineBox[{102, 163, 103, 104, 164, 105, 165, 106, 107, 166, 108, 167, 
         109, 110, 168, 111, 169, 112, 113, 170, 114, 171, 115, 116, 172, 117,
          173, 118, 119, 174, 120, 175, 121, 122, 176, 123, 177, 124, 125, 
         178, 126, 179, 127, 128, 180, 129, 181, 130, 131, 182, 132, 183, 133,
          134, 184, 135, 185, 136, 137, 186, 138, 187, 139, 140, 188, 141, 
         189, 142, 143, 190, 144, 191, 145, 146, 192, 147, 193, 148, 149, 194,
          150, 195, 151, 152, 196, 153, 197, 154, 155, 198, 156, 199, 157, 
         158, 200, 159, 201, 160, 161, 202, 162}]}}}], {}}, 
   InsetBox["\<\"  Consumption/(quarterly) permanent\"\>", {4, 1.3}, {-1, 0}],
    InsetBox["\<\"  income ratio (left scale)\"\>", {4, 1.2}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow]\"\>", {4, 1.08}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {16.5, -0.16}, {-1, 0}], 
   InsetBox["\<\"   Histogram: empirical (SCF2004) density of \"\>", \
{4.8, 0.55}, {-1, 0}], 
   InsetBox["\<\"   \\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\)) (right scale)\"\>", {4.85, 0.45}, \
{-1, 0}], InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.35}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{-0.00189573459715639, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.39857819905213276`, 
      FormBox["0.05`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.7990521327014218, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.199526066350711, 
      FormBox["0.15000000000000002`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.07819905213270145, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.1582938388625593, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.23838862559241716`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.31848341232227495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.4786729857819907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5587677725118484, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6388625592417063, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7189573459715641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8791469194312798, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9592417061611375, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.0393364928909954`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.1194312796208532`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.279620853080569, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3597156398104269`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4398104265402847`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5199052132701425`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.08199052132701423, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{3.6629967127233143`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.66299671274433*^9}],

Cell[BoxData["\<\"Estimate parameter values using \[Beta]-Dist model with \
time pref factors approximated by seven points\"\>"], "Print",
 CellChangeTimes->{3.6629967127463307`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.662996712748332*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6629967127603416`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629967136199503`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151334`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663955`", ",", "0.10618025700090115`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133835`", ",", "0.7054024753403318`", ",", 
   "0.9876484086289594`", ",", "0.9402228750807169`", ",", 
   "0.6753895677023235`", ",", "0.7273964276788891`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.662996713621955*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.662996713623955*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24348812848557735`", ",", "0.8403562070237577`", ",", 
   "0.14707875093491063`", ",", "0.10757403488551806`", ",", 
   "0.8613280423351561`", ",", "0.2831336870983948`", ",", 
   "0.6663671970124141`", ",", "0.6086506751502898`", ",", 
   "0.7979901621977175`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6629967136259546`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.662996713626956*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629967136289577`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8716184`7.0908413875270435"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8716184`7.0908413875270435],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967136349616`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.662996713636963*^9}],

Cell[BoxData["\<\"Estimating difference between approximated points of \
\[Beta] (\[EmptyDownTriangle]/3.5) given \[Beta]middle ... \"\>"], "Print",
 CellChangeTimes->{3.6629967136379633`*^9}],

Cell[BoxData["\<\"Generated steady state distribution of Pt\"\>"], "Print",
 CellChangeTimes->{3.662996736366091*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to generate steady state distribution of Pt \
(minutes): \"\>", "\[InvisibleSpace]", "0.368828395`8.495490596923437"}],
  SequenceForm[
  " Time spent to generate steady state distribution of Pt (minutes): ", 
   0.368828395`8.495490596923437],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967363670917`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6629967370185537`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629967370205555`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0025`", ",", "0.9867335667277916`"}], "}"}]], "Print",
 CellChangeTimes->{3.662996737022557*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629967370545797`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "9.42690558666666666666666666666666666667`9.903035405727206"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   9.42690558666666666666666666666666666667`9.903035405727206],
  Editable->False]], "Print",
 CellChangeTimes->{3.662997302669916*^9}],

Cell[BoxData["\<\" Produce initial distribution of capital income \
ratio\"\>"], "Print",
 CellChangeTimes->{3.662997302908084*^9}],

Cell[BoxData["\<\" Mean of K (level): \"\>"], "Print",
 CellChangeTimes->{3.66299730609935*^9}],

Cell[BoxData["44.64577726788601`"], "Print",
 CellChangeTimes->{3.662997306100349*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629973987801104`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"44.247263660824906`", ",", "11.07693557251647`"}], "}"}]], "Print",
 CellChangeTimes->{3.662997398782112*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.07566598208309774`", ",", "0.9803539842714462`", ",", 
     "0.05421117810670721`", ",", "0.984883549573899`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.07566598208309774, 0.9803539842714462, 0.05421117810670721, 
   0.984883549573899}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629973987841144`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9993078594210084`", ",", "0.9985624849008452`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9993078594210084, 0.9985624849008452}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629973987851143`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.662997398787116*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.10164367666666666666666666666666666667`9.541624177290634"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.10164367666666666666666666666666666667`9.541624177290634],
  Editable->False]], "Print",
 CellChangeTimes->{3.662997644879732*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629977377206097`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"43.36810483961914`", ",", "10.93628617040359`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629977377226095`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629977377246113`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.36269328408661`", ",", "51.783902384062955`", ",", "66.94363153033856`",
    ",", "81.665794919818`", ",", "85.69123093404116`", ",", 
   "92.56789875610635`", ",", "95.1293060633333`", ",", "96.92284915807136`", 
   ",", "99.16775504598284`", ",", "0.7704617258146041`", ",", 
   "15.821232142857143`", ",", "0.8257321428571428`", ",", 
   "12.690591042791748`", ",", "11.449203159378712`"}], "}"}]], "Print",
 CellChangeTimes->{3.662997737726612*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.12386893742065715`", ",", "0.9676139547472347`", ",", 
     "0.11310494055148304`", ",", "0.9693595981690107`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.12386893742065715`, 0.9676139547472347, 0.11310494055148304`, 
   0.9693595981690107}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629977377276134`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9994202614100932`", ",", "0.9982970471944088`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9994202614100932, 0.9982970471944088}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662997737729615*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629977377306147`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "3.11911318`9.422697382048655"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.11911318`9.422697382048655],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629979248704014`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.662998018099557*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"42.90405719146222`", ",", "10.862116633118779`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629980181015544`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662998018102556*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.616864207756397`", ",", "53.30288642840454`", ",", "68.13656467911467`",
    ",", "82.25107699814608`", ",", "86.11189422244394`", ",", 
   "92.7321540078076`", ",", "95.21827255697353`", ",", "96.9722029758564`", 
   ",", "99.17912002714935`", ",", "0.7767176256813497`", ",", 
   "15.622928571428572`", ",", "0.856125`", ",", "12.287228116582638`", ",", 
   "9.447675601416007`"}], "}"}]], "Print",
 CellChangeTimes->{3.662998018104556*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13999221805698445`", ",", "0.9633097267565665`", ",", 
     "0.13325506580633528`", ",", "0.9639986101416389`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13999221805698445`, 0.9633097267565665, 0.13325506580633528`, 
   0.9639986101416389}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998018107559*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997884982160096`", ",", "0.9997409869902195`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997884982160096, 0.9997409869902195}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998018109562*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "21.36192414833333333333333333333333333333`10.258306616860892"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   21.36192414833333333333333333333333333333`10.258306616860892],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629980181115613`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.662998018696978*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629980186989794`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0025`", ",", "0.9849093191267724`"}], "}"}]], "Print",
 CellChangeTimes->{3.662998018700981*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629980187300005`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "6.96879474333333333333333333333333333333`9.771823921352198"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   6.96879474333333333333333333333333333333`9.771823921352198],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629984368586874`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14334309307724458`", ",", "0.9616147650926667`", ",", 
     "0.12928913387255414`", ",", "0.9641279489928761`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14334309307724458`, 0.9616147650926667, 0.12928913387255414`, 
   0.9641279489928761}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629985309964824`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9992678865432078`", ",", "0.9993794896350996`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9992678865432078, 0.9993794896350996}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998530998484*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629985310004864`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.37369847833333333333333333333333333333`8.501187577660716"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.37369847833333333333333333333333333333`8.501187577660716],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998553418393*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629986475862103`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.36678351106675`", ",", "10.279720397116716`"}], "}"}]], "Print",
 CellChangeTimes->{3.662998647588212*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629986475902133`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.744670121163683`", ",", "54.403229030215336`", ",", "68.537261526417`", 
   ",", "82.1985100399624`", ",", "85.98230952708259`", ",", 
   "92.56605821324288`", ",", "95.07889791956502`", ",", "96.87269348097828`",
    ",", "99.1502436617538`", ",", "0.77790782398144`", ",", "15.858375`", 
   ",", "0.9694821428571428`", ",", "11.67173569858199`", ",", 
   "10.673217108862083`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629986475922146`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1487873747450582`", ",", "0.9600966294784685`", ",", 
     "0.13995490885638084`", ",", "0.9612660615311674`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1487873747450582, 0.9600966294784685, 0.13995490885638084`, 
   0.9612660615311674}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629986475932145`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997154762991137`", ",", "0.9996324367396114`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997154762991137, 0.9996324367396114}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629986475952168`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "10.49116075166666666666666666666666666667`9.949489789808162"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   10.49116075166666666666666666666666666667`9.949489789808162],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998647598219*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.662998648227666*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629986482286663`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0025`", ",", "0.984853708365951`"}], "}"}]], "Print",
 CellChangeTimes->{3.662998648230669*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998648255685*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.92559009166666666666666666666666666667`8.895084945112737"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.92559009166666666666666666666666666667`8.895084945112737],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629987037910905`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1473856668616702`", ",", "0.9604953676142516`", ",", 
     "0.13351955621907696`", ",", "0.9629552977037138`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1473856668616702, 0.9604953676142516, 0.13351955621907696`, 
   0.9629552977037138}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629987977567654`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.998958762179834`", ",", "0.999568029251134`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.998958762179834, 0.999568029251134}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998797758765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998797759767*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.330300995`8.447576130179403"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.330300995`8.447576130179403],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998817574828*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629989129585075`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.022697705498054`", ",", "10.222490681114781`"}], "}"}]], "Print",
 CellChangeTimes->{3.662998912959511*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662998912961509*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.207749577396022`", ",", "52.94056297597582`", ",", "67.73124047720589`",
    ",", "81.79150036646872`", ",", "85.6664400903633`", ",", 
   "92.42120582784014`", ",", "94.99400591688818`", ",", "96.82474084448812`",
    ",", "99.1351624180069`", ",", "0.7721069312567674`", ",", 
   "16.05001785714286`", ",", "0.9644285714285714`", ",", 
   "11.71149114099054`", ",", "12.287305786271919`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629989129635105`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14723145291287154`", ",", "0.9604683071553384`", ",", 
     "0.13446627388506516`", ",", "0.962701394022139`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14723145291287154`, 0.9604683071553384, 0.13446627388506516`, 
   0.962701394022139}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629989129655123`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999498806976395`", ",", "0.9997620890660897`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999498806976395, 0.9997620890660897}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998912967515*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.42258811`9.574342742212458"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 4.42258811`9.574342742212458],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629989129695153`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6629989137090416`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629989137110605`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0025`", ",", "0.984970140507914`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629989137130423`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629989137390623`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.35768714`8.482169574365622"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.35768714`8.482169574365622],
  Editable->False]], "Print",
 CellChangeTimes->{3.662998935200289*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14493619070581043`", ",", "0.9611675659478776`", ",", 
     "0.13249897790039378`", ",", "0.9632385785345866`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14493619070581043`, 0.9611675659478776, 0.13249897790039378`, 
   0.9632385785345866}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999031251442*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9989958660931557`", ",", "0.9994234405686413`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9989958660931557, 0.9994234405686413}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999031254444*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629990312574472`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.38202105833333333333333333333333333333`8.510753551613977"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.38202105833333333333333333333333333333`8.510753551613977],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629990541737084`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.662999148248459*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.141021479927375`", ",", "10.24188626418113`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629991482504597`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.662999148251461*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.5978555330115`", ",", "53.603046854699386`", ",", "68.02535608137991`", 
   ",", "81.89832602541424`", ",", "85.72928452496853`", ",", 
   "92.41689048750038`", ",", "94.97824852019087`", ",", "96.80584191913636`",
    ",", "99.12711098857095`", ",", "0.774016691889327`", ",", 
   "15.925410714285714`", ",", "0.9465178571428572`", ",", 
   "11.712190963094425`", ",", "12.181360312093158`"}], "}"}]], "Print",
 CellChangeTimes->{3.662999148253463*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15191260631955827`", ",", "0.9592084174547473`", ",", 
     "0.14082130890412803`", ",", "0.9609854190128275`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15191260631955827`, 0.9592084174547473, 0.14082130890412803`, 
   0.9609854190128275}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629991482564654`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995539523067588`", ",", "0.9997644785204318`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995539523067588, 0.9997644785204318}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629991482574654`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "3.92124901666666666666666666666666666667`9.52209067101323"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   3.92124901666666666666666666666666666667`9.52209067101323],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999148259467*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6629991488719015`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629991488729024`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0025`", ",", "0.9850274107626623`"}], "}"}]], "Print",
 CellChangeTimes->{3.662999148874903*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629991488999214`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.51613289333333333333333333333333333333`8.641427785909771"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.51613289333333333333333333333333333333`8.641427785909771],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999179866894*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14728159570659938`", ",", "0.9605209328968288`", ",", 
     "0.13369903792177174`", ",", "0.9629032166852366`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14728159570659938`, 0.9605209328968288, 0.13369903792177174`, 
   0.9629032166852366}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629992759740868`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.998839216567088`", ",", "0.9995605474342171`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.998839216567088, 0.9995605474342171}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66299927597709*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629992759790907`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.762345015`8.810817812992752"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.762345015`8.810817812992752],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629993217157893`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6629994158876085`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.35318804868868`", ",", "10.277495243480375`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629994158896103`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6629994158906107`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.848449211223453`", ",", "53.79469321160396`", ",", "68.20418824678246`",
    ",", "81.96559542567633`", ",", "85.78619972249672`", ",", 
   "92.46351263536248`", ",", "95.01755400894262`", ",", "96.83521800123981`",
    ",", "99.1385559528841`", ",", "0.775112712434122`", ",", 
   "16.065142857142856`", ",", "0.9648035714285714`", ",", 
   "11.80424745229597`", ",", "11.687932208014265`"}], "}"}]], "Print",
 CellChangeTimes->{3.6629994158926125`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14757100277946267`", ",", "0.9604178699952206`", ",", 
     "0.13629233946677355`", ",", "0.9622492184252684`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14757100277946267`, 0.9604178699952206, 0.13629233946677355`, 
   0.9622492184252684}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629994158946133`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996790778095588`", ",", "0.9995152446247348`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996790778095588, 0.9995152446247348}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999415896615*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.460368965`9.578037033572569"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 4.460368965`9.578037033572569],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999415898617*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.662999416557084*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6629994165580864`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026`", ",", "0.9867335667277916`"}], "}"}]], "Print",
 CellChangeTimes->{3.662999416560087*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999416584104*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "7.60751461`9.80990904329596"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   7.60751461`9.80990904329596],
  Editable->False]], "Print",
 CellChangeTimes->{3.6629998730349803`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1339664983461193`", ",", "0.9648241127696584`", ",", 
     "0.12168263069121399`", ",", "0.9668744224549412`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1339664983461193, 0.9648241127696584, 0.12168263069121399`, 
   0.9668744224549412}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999967581066*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9686703939380518`", ",", "0.9603153205437358`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9686703939380518, 0.9603153205437358}],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999967583068*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.662999967584069*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.05624479666666666666666666666666666667`9.536790405249349"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.05624479666666666666666666666666666667`9.536790405249349],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630002109557543`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630003049984837`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"44.32173280019545`", ",", "11.090077596298853`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630003050014853`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663000305002486*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.863638412257252`", ",", "54.17285934370722`", ",", "68.46350945372711`",
    ",", "82.48459979221869`", ",", "86.34754669840103`", ",", 
   "92.91577778550109`", ",", "95.34584131291237`", ",", "97.05475752631553`",
    ",", "99.20165870679828`", ",", "0.7815410655407452`", ",", 
   "15.634160714285715`", ",", "0.8366071428571429`", ",", 
   "12.396177796958742`", ",", "8.136659862473929`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630003050044875`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13767554319581798`", ",", "0.964025372782618`", ",", 
     "0.12902607715415526`", ",", "0.9651849858095898`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13767554319581798`, 0.964025372782618, 0.12902607715415526`, 
   0.9651849858095898}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663000305006489*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9971543044124206`", ",", "0.9952438925606434`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9971543044124206, 0.9952438925606434}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630003050084906`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "14.81758057833333333333333333333333333333`10.09944354583618"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   14.81758057833333333333333333333333333333`10.09944354583618],
  Editable->False]], "Print",
 CellChangeTimes->{3.663000305010492*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630003056329346`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663000305634935*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026`", ",", "0.9842004813224058`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630003056359367`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630003056609535`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "7.729918145`9.816841143251287"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   7.729918145`9.816841143251287],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630007694570446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15286474496660896`", ",", "0.9588312498734026`", ",", 
     "0.1412981835733309`", ",", "0.9606652662338936`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15286474496660896`, 0.9588312498734026, 0.1412981835733309, 
   0.9606652662338936}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663000864416424*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9942879835033082`", ",", "0.9993355879467626`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9942879835033082, 0.9993355879467626}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663000864418423*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630008644204245`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.50278297`9.105562513075883"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.50278297`9.105562513075883],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630009545823994`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663001048602113*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"38.24049637610732`", ",", "10.090427031179779`"}], "}"}]], "Print",
 CellChangeTimes->{3.663001048603114*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630010486051173`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.306168820831818`", ",", "56.34830961671709`", ",", "70.00880555187895`",
    ",", "83.0255430750769`", ",", "86.60355847725391`", ",", 
   "92.82529986605488`", ",", "95.23405056971896`", ",", "96.96512785140612`",
    ",", "99.17419082887294`", ",", "0.7869211571190314`", ",", 
   "15.341821428571428`", ",", "1.0219285714285715`", ",", 
   "11.112763287986978`", ",", "8.723250772605091`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630010486071157`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1447308329754009`", ",", "0.9609662666504234`", ",", 
     "0.13537337320430487`", ",", "0.9622685171445018`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1447308329754009, 0.9609662666504234, 0.13537337320430487`, 
   0.9622685171445018}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001048609118*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999202415584417`", ",", "0.999731523884159`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999202415584417, 0.999731523884159}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630010486121197`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "12.393093615`10.02184597849966"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 12.393093615`10.02184597849966],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630010486141214`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630010492875986`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630010492896004`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026`", ",", "0.9847080141290641`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630010492906017`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001049314618*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "3.40906892166666666666666666666666666667`9.461302029731105"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.40906892166666666666666666666666666667`9.461302029731105],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630012538597546`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13865409360924405`", ",", "0.9628420574873522`", ",", 
     "0.12645539270559136`", ",", "0.9648510383489223`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13865409360924405`, 0.9628420574873522, 0.12645539270559136`, 
   0.9648510383489223}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630013471229305`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9986157568156337`", ",", "0.9996916152913198`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9986157568156337, 0.9996916152913198}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001347125933*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001347127934*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.82385122166666666666666666666666666667`8.844515038258512"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.82385122166666666666666666666666666667`8.844515038258512],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630013965540047`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630014899272575`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.187556987806666`", ",", "10.24949116549139`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630014899302607`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630014899312615`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.00149316526634`", ",", "54.98956196500365`", ",", "69.10451653401964`", 
   ",", "82.60208496870935`", ",", "86.30835101728373`", ",", 
   "92.72626700754441`", ",", "95.18070761958609`", ",", "96.93348252300666`",
    ",", "99.16568422877829`", ",", "0.7814979145731717`", ",", 
   "15.504214285714285`", ",", "0.9987678571428571`", ",", 
   "11.38069623224443`", ",", "9.32467888869352`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630014899342628`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14766669671914395`", ",", "0.9603520923183874`", ",", 
     "0.137816622083211`", ",", "0.9617973993262288`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14766669671914395`, 0.9603520923183874, 0.137816622083211, 
   0.9617973993262288}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630014899372663`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997352783520332`", ",", "0.999684509562636`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997352783520332, 0.999684509562636}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001489939267*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "7.35513557166666666666666666666666666667`9.795256930375595"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   7.35513557166666666666666666666666666667`9.795256930375595],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630014899412684`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663001490560709*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663001490562709*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026999999999999997`", ",", "0.9867335667277916`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.66300149056371*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001490588728*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "7.983464725`9.8308576589133"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   7.983464725`9.8308576589133],
  Editable->False]], "Print",
 CellChangeTimes->{3.663001969597612*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13964997232720022`", ",", "0.9634180339032872`", ",", 
     "0.12598681731334094`", ",", "0.9658359040517391`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13964997232720022`, 0.9634180339032872, 0.12598681731334094`, 
   0.9658359040517391}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002063741411*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9524928952826026`", ",", "0.944446492859193`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9524928952826026, 0.944446492859193}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002063744416*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002063745415*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "4.333608275`9.565515900078381"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.333608275`9.565515900078381],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002323757908*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663002417751602*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"44.7063951303894`", ",", "11.150937729220166`"}], "}"}]], "Print",
 CellChangeTimes->{3.663002417753604*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663002417754605*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.63801983838067`", ",", "52.75101078100162`", ",", "67.98489785641367`", 
   ",", "82.63067549555244`", ",", "86.5617221986732`", ",", 
   "93.1205184724995`", ",", "95.50239549485804`", ",", "97.16279093130039`", 
   ",", "99.23515439901736`", ",", "0.7793211291502222`", ",", 
   "15.138839285714285`", ",", "0.8608392857142857`", ",", 
   "12.215312415479701`", ",", "6.87356178025889`"}], "}"}]], "Print",
 CellChangeTimes->{3.663002417756606*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14302868716990147`", ",", "0.9627036948582053`", ",", 
     "0.13211848923222258`", ",", "0.9644628387972194`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14302868716990147`, 0.9627036948582053, 0.13211848923222258`, 
   0.9644628387972194}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630024177576065`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9971924597008658`", ",", "0.9954185306691004`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9971924597008658, 0.9954185306691004}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630024177596083`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "15.46283843333333333333333333333333333333`10.117955466309281"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   15.46283843333333333333333333333333333333`10.117955466309281],
  Editable->False]], "Print",
 CellChangeTimes->{3.66300241776161*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663002418377047*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663002418378047*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026999999999999997`", ",", "0.9840081501573088`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630024183800497`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630024184050665`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "7.93287883`9.828097068962892"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   7.93287883`9.828097068962892],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002894376796*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14728744227485335`", ",", "0.960372187814727`", ",", 
     "0.1385837425886367`", ",", "0.9614257494318411`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14728744227485335`, 0.960372187814727, 0.1385837425886367, 
   0.9614257494318411}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002989493285*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9953069672917217`", ",", "0.9994659845589181`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9953069672917217, 0.9994659845589181}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663002989496288*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630029894982896`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.33431345333333333333333333333333333333`9.053924113075006"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.33431345333333333333333333333333333333`9.053924113075006],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003069553094*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630031641462126`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"38.43438820979456`", ",", "10.122546588476428`"}], "}"}]], "Print",
 CellChangeTimes->{3.663003164148214*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630031641502156`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "31.868681723197305`", ",", "57.289877042033076`", ",", 
   "70.85746400413927`", ",", "83.61937442304794`", ",", "87.09344655807271`",
    ",", "93.11240224039683`", ",", "95.4306620052367`", ",", 
   "97.09390822601213`", ",", "99.21218725113239`", ",", 
   "0.7934376992136111`", ",", "14.939410714285714`", ",", "1.061125`", ",", 
   "10.774637666739133`", ",", "7.646926084522162`"}], "}"}]], "Print",
 CellChangeTimes->{3.663003164152217*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1474180836643434`", ",", "0.9602597018793882`", ",", 
     "0.14208268627156084`", ",", "0.9604642726787664`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1474180836643434, 0.9602597018793882, 0.14208268627156084`, 
   0.9604642726787664}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630031641542177`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999424935588316`", ",", "0.9997973448359072`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999424935588316, 0.9997973448359072}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630031641562195`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "12.43960993166666666666666666666666666667`10.023473010629864"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   12.43960993166666666666666666666666666667`10.023473010629864],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630031641592216`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663003164784666*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630031647866664`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026999999999999997`", ",", "0.9844187370471235`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663003164787668*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003164812686*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "2.82628873`9.379882774956943"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.82628873`9.379882774956943],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630033343910108`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1409610112837909`", ",", "0.9621978832855971`", ",", 
     "0.12760072915871512`", ",", "0.9645305636933802`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1409610112837909, 0.9621978832855971, 0.12760072915871512`, 
   0.9645305636933802}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003429098211*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9981145575722922`", ",", "0.9996313312114253`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9981145575722922, 0.9996313312114253}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003429100212*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003429102213*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.012284955`8.93396903044691"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.012284955`8.93396903044691],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003489835308*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663003585875452*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.03588072328667`", ",", "10.224623620289854`"}], "}"}]], "Print",
 CellChangeTimes->{3.663003585878455*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630035858804564`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.033438934938577`", ",", "55.67903232127344`", ",", "69.77323366071151`",
    ",", "83.15284185471708`", ",", "86.76671781754088`", ",", 
   "92.99099040059734`", ",", "95.36073754355492`", ",", "97.05252511270385`",
    ",", "99.19919140146926`", ",", "0.786916714322705`", ",", 
   "15.028803571428572`", ",", "1.0391428571428571`", ",", 
   "11.046234285389652`", ",", "7.778919101889445`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630035858824587`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14506397755231915`", ",", "0.9610295406749649`", ",", 
     "0.13457378410756615`", ",", "0.9626592909304095`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14506397755231915`, 0.9610295406749649, 0.13457378410756615`, 
   0.9626592909304095}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003585885461*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996106244594792`", ",", "0.9996400528966782`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996106244594792, 0.9996400528966782}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630035858874617`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "7.02848714333333333333333333333333333333`9.775528102964"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   7.02848714333333333333333333333333333333`9.775528102964],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630035858894634`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630035865209107`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663003586522913*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0026999999999999997`", ",", "0.9845285776801921`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630035865249157`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003586548932*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.26409695`9.03044663168365"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.26409695`9.03044663168365],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630036623947477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14655396664433296`", ",", "0.9607148839694741`", ",", 
     "0.13491221942996323`", ",", "0.9625799059054988`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14655396664433296`, 0.9607148839694741, 0.13491221942996323`, 
   0.9625799059054988}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630037566396203`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.998762758752392`", ",", "0.9994411553512469`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.998762758752392, 0.9994411553512469}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630037566416216`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630037566436234`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.635851165`8.732021719550174"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.635851165`8.732021719550174],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630037947906914`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630038907898064`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.33019506069117`", ",", "10.273335711406016`"}], "}"}]], "Print",
 CellChangeTimes->{3.663003890791809*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630038907928095`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.65683630178325`", ",", "55.68213235955586`", ",", "69.8562104817706`", 
   ",", "83.18295829186792`", ",", "86.79857749871806`", ",", 
   "93.01589731548812`", ",", "95.38018645827293`", ",", "97.06330281551251`",
    ",", "99.20190705280002`", ",", "0.7870885413513257`", ",", 
   "15.132464285714287`", ",", "1.020482142857143`", ",", 
   "11.104787422801245`", ",", "7.663252762569036`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630038907948112`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15122951448709943`", ",", "0.9594135787772144`", ",", 
     "0.14020537192147187`", ",", "0.9611866244997844`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15122951448709943`, 0.9594135787772144, 0.14020537192147187`, 
   0.9611866244997844}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003890796812*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997100493369321`", ",", "0.9995541615727762`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997100493369321, 0.9995541615727762}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003890798814*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "5.081605705`9.634667212199158"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 5.081605705`9.634667212199158],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630038908008165`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663003891451277*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630038914532785`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0027999999999999995`", ",", "0.9867335667277916`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.66300389145428*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663003891479298*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "8.348557135`9.85027767190834"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.348557135`9.85027767190834],
  Editable->False]], "Print",
 CellChangeTimes->{3.663004392392723*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13077396795722362`", ",", "0.9658069712905721`", ",", 
     "0.11823957492505133`", ",", "0.967937609639422`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13077396795722362`, 0.9658069712905721, 0.11823957492505133`, 
   0.967937609639422}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630044873911314`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9513821181879573`", ",", "0.9429596744761592`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9513821181879573, 0.9429596744761592}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663004487393131*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663004487395132*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "4.409979125`9.57310278191958"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.409979125`9.57310278191958],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630047519898806`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663004846563983*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"45.570516032190405`", ",", "11.288927245191482`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630048465659847`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630048465679865`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.246494874389594`", ",", "52.921183607243535`", ",", 
   "68.34747501356662`", ",", "82.96897907502684`", ",", "86.886016814468`", 
   ",", "93.340336003402`", ",", "95.65804117291921`", ",", 
   "97.26481761837982`", ",", "99.2589232680132`", ",", "0.7822084210504434`",
    ",", "14.95417857142857`", ",", "0.8667321428571428`", ",", 
   "12.072598062592727`", ",", "5.749927609408429`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630048465699873`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13926007172758154`", ",", "0.9638117899305245`", ",", 
     "0.1293179011436617`", ",", "0.9653325127706023`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13926007172758154`, 0.9638117899305245, 0.1293179011436617, 
   0.9653325127706023}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630048465719914`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9946696427195293`", ",", "0.9920115690201913`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9946696427195293, 0.9920115690201913}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630048465739913`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "15.92853554`10.130842097078089"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 15.92853554`10.130842097078089],
  Editable->False]], "Print",
 CellChangeTimes->{3.663004846575992*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630048471974325`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663004847198435*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0027999999999999995`", ",", "0.9835760897064083`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630048472004356`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630048472254553`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.22196726666666666666666666666666666667`9.843641991648248"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.22196726666666666666666666666666666667`9.843641991648248],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630053405434904`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14261820750097232`", ",", "0.9616008748504077`", ",", 
     "0.13484820837820366`", ",", "0.9624001768533547`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14261820750097232`, 0.9616008748504077, 0.13484820837820366`, 
   0.9624001768533547}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630054347583413`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9936799748955295`", ",", "0.9990033932361333`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9936799748955295, 0.9990033932361333}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005434761343*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630054347623444`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.64835294166666666666666666666666666667`9.145716455702365"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.64835294166666666666666666666666666667`9.145716455702365],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005533659517*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630056277292647`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"38.134503621655675`", ",", "10.072468746636758`"}], "}"}]], "Print",
 CellChangeTimes->{3.663005627731268*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630056277332673`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "35.67274087353833`", ",", "59.61675533985403`", ",", "72.38934704801869`", 
   ",", "84.50405751574746`", ",", "87.78363705596632`", ",", 
   "93.43629388783602`", ",", "95.62944096452756`", ",", "97.21498899093372`",
    ",", "99.24295183727439`", ",", "0.8042758219905007`", ",", 
   "14.444053571428572`", ",", "1.130232142857143`", ",", 
   "10.372288098812437`", ",", "8.272159140010816`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630056277352686`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14163356749112344`", ",", "0.9617702541469247`", ",", 
     "0.13889968930255592`", ",", "0.9612709794307048`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14163356749112344`, 0.9617702541469247, 0.13889968930255592`, 
   0.9612709794307048}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005627737272*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9989312597712198`", ",", "0.9994347307436031`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9989312597712198, 0.9994347307436031}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630056277402725`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "13.01913783666666666666666666666666666667`10.043248473217709"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   13.01913783666666666666666666666666666667`10.043248473217709],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005627741276*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663005628378726*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663005628380727*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0027999999999999995`", ",", "0.9841366188902925`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630056283827295`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005628406746*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "3.66183160333333333333333333333333333333`9.492364616738199"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.66183160333333333333333333333333333333`9.492364616738199],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005848117643*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14618752117276324`", ",", "0.9607775765520978`", ",", 
     "0.13205816411075877`", ",", "0.9633252452690025`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14618752117276324`, 0.9607775765520978, 0.13205816411075877`, 
   0.9633252452690025}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630059429119053`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9979767598520144`", ",", "0.9996078323124757`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9979767598520144, 0.9996078323124757}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663005942913907*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630059429169087`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.99408867333333333333333333333333333333`8.926091373681087"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.99408867333333333333333333333333333333`8.926091373681087],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006002557228*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630060968901606`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.13677808427873`", ",", "10.241085209695658`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630060968921633`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663006096894164*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "31.41587832543271`", ",", "57.42474643547468`", ",", "71.09510716006399`", 
   ",", "83.94861613438785`", ",", "87.40955307425328`", ",", 
   "93.3147603160901`", ",", "95.57061499033831`", ",", "97.18555472407357`", 
   ",", "99.23580744760126`", ",", "0.7959286752744062`", ",", 
   "14.614053571428572`", ",", "1.0854642857142858`", ",", 
   "10.682397052489561`", ",", "7.24036371661025`"}], "}"}]], "Print",
 CellChangeTimes->{3.663006096896166*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14875950028162965`", ",", "0.9600374810709408`", ",", 
     "0.1379032194349078`", ",", "0.9617702898216507`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14875950028162965`, 0.9600374810709408, 0.1379032194349078, 
   0.9617702898216507}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630060968971663`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996991025772431`", ",", "0.9996609911532462`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996991025772431, 0.9996609911532462}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006096899168*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "7.81906473166666666666666666666666666667`9.821821056752748"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   7.81906473166666666666666666666666666667`9.821821056752748],
  Editable->False]], "Print",
 CellChangeTimes->{3.66300609690117*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630060975396233`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630060975406227`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0027999999999999995`", ",", "0.9841960108428651`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630060975426264`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006097566641*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.572522905`8.686459114452221"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.572522905`8.686459114452221],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006131919018*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1505369979182467`", ",", "0.9596169657550526`", ",", 
     "0.13564802570627088`", ",", "0.96237290879081`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1505369979182467, 0.9596169657550526, 0.13564802570627088`, 
   0.96237290879081}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66300622630799*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9983000932129577`", ",", "0.9993614946729039`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9983000932129577, 0.9993614946729039}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630062263099923`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630062263119936`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.61408572833333333333333333333333333333`8.716895252489017"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.61408572833333333333333333333333333333`8.716895252489017],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006263153134*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663006359137241*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.096236591737394`", ",", "10.23423748882926`"}], "}"}]], "Print",
 CellChangeTimes->{3.663006359139242*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663006359141244*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.860990470401227`", ",", "56.49838146539453`", ",", "70.64665780261858`",
    ",", "83.77691649425273`", ",", "87.29663034625973`", ",", 
   "93.28139790897423`", ",", "95.55956134621833`", ",", "97.18540579587763`",
    ",", "99.24062170853799`", ",", "0.7925481633751492`", ",", 
   "14.631017857142858`", ",", "1.079125`", ",", "10.752055120447706`", ",", 
   "6.994573262318274`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630063591432447`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1510483532534762`", ",", "0.9594192272467791`", ",", 
     "0.1408048264021372`", ",", "0.9609888199484202`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1510483532534762, 0.9594192272467791, 0.1408048264021372, 
   0.9609888199484202}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006359146248*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995531824224222`", ",", "0.9997157112348307`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995531824224222, 0.9997157112348307}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630063591472483`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.37050112166666666666666666666666666667`9.569197484247185"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.37050112166666666666666666666666666667`9.569197484247185],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630063591492496`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630063597646875`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663006359765687*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0027999999999999995`", ",", "0.9842756735417084`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630063597676907`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630063597927065`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.08021646833333333333333333333333333333`8.96217704220485"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.08021646833333333333333333333333333333`8.96217704220485],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630064246046925`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14480495377310387`", ",", "0.961201696674858`", ",", 
     "0.1322753226718858`", ",", "0.9633123698562904`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14480495377310387`, 0.961201696674858, 0.1322753226718858, 
   0.9633123698562904}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630065193219004`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9989967996419271`", ",", "0.9993515997068406`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9989967996419271, 0.9993515997068406}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006519323902*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006519325904*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.41546145333333333333333333333333333333`8.547196984202902"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.41546145333333333333333333333333333333`8.547196984202902],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006544250599*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663006638378378*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.2419678220704`", ",", "10.258753127410738`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630066383803797`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630066383823814`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.771639151597302`", ",", "56.38562574077586`", ",", "70.48090032451985`",
    ",", "83.67476371054836`", ",", "87.21600473958779`", ",", 
   "93.23429389676306`", ",", "95.52700538906677`", ",", "97.1600085357507`", 
   ",", "99.22913708250147`", ",", "0.7920351718811457`", ",", 
   "14.650196428571428`", ",", "1.0742142857142858`", ",", 
   "10.791700290021259`", ",", "7.076696581332704`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630066383853827`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14914947942062745`", ",", "0.9599686669558494`", ",", 
     "0.13669146542457888`", ",", "0.9621425527848989`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14914947942062745`, 0.9599686669558494, 0.13669146542457888`, 
   0.9621425527848989}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006638386383*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995536593800519`", ",", "0.9996698043523916`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995536593800519, 0.9996698043523916}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006638388386*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.65373541666666666666666666666666666667`9.596467936502815"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.65373541666666666666666666666666666667`9.596467936502815],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006638391388*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663006639050856*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663006639051856*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0028999999999999994`", ",", "0.9867335667277916`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630066390538588`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663006639079878*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.58907778333333333333333333333333333333`9.862612783978138"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.58907778333333333333333333333333333333`9.862612783978138],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007154424543*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13259954729168655`", ",", "0.9654208817460604`", ",", 
     "0.12199918242040675`", ",", "0.9670611275169688`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13259954729168655`, 0.9654208817460604, 0.12199918242040675`, 
   0.9670611275169688}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007251204213*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9263526536979723`", ",", "0.9190126927765273`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9263526536979723, 0.9190126927765273}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630072512072153`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007251208215*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.66354236666666666666666666666666666667`9.597382174747331"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.66354236666666666666666666666666666667`9.597382174747331],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630075310177565`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630076249854317`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"46.39754662798193`", ",", "11.419880587256968`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630076249874344`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663007624989442*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "25.9716839868239`", ",", "54.18694967727292`", ",", "69.37974685358978`", 
   ",", "83.72124583267244`", ",", "87.50169621011028`", ",", 
   "93.65485533103958`", ",", "95.85840869087008`", ",", "97.38933019440066`",
    ",", "99.29624435580044`", ",", "0.7898465542654941`", ",", 
   "14.370196428571429`", ",", "0.8918035714285715`", ",", 
   "11.846703904343075`", ",", "5.1778035838302126`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630076249924374`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13288390707493924`", ",", "0.9656038966466345`", ",", 
     "0.12366303278321766`", ",", "0.9669492415300402`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13288390707493924`, 0.9656038966466345, 0.12366303278321766`, 
   0.9669492415300402}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007624994439*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9935356093062714`", ",", "0.9912537105707551`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9935356093062714, 0.9912537105707551}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630076249974413`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "16.44255027833333333333333333333333333333`10.14463542674263"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   16.44255027833333333333333333333333333333`10.14463542674263],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007624999442*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630076256308913`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663007625632896*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0028999999999999994`", ",", "0.9831625744085126`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663007625634894*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663007625659911*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.35569550166666666666666666666666666667`9.850648853248716"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.35569550166666666666666666666666666667`9.850648853248716],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630081270016413`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14256418596316933`", ",", "0.9615443977268474`", ",", 
     "0.1295907416078148`", ",", "0.9637772253525021`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14256418596316933`, 0.9615443977268474, 0.1295907416078148, 
   0.9637772253525021}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630082212084866`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9913073052664345`", ",", "0.9981588730273084`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9913073052664345, 0.9981588730273084}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630082212104874`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008221212489*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "2.05250636333333333333333333333333333333`9.240950760441349"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.05250636333333333333333333333333333333`9.240950760441349],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630083443588686`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663008439570428*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"37.656741725051496`", ",", "9.991991315314136`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630084395734296`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630084395744295`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "31.925063962602067`", ",", "58.60375268170146`", ",", "72.00333353744573`",
    ",", "84.4806675675473`", ",", "87.81449200506528`", ",", 
   "93.48074637209501`", ",", "95.66124515952225`", ",", "97.23567325540486`",
    ",", "99.25054419652737`", ",", "0.8010047441429462`", ",", "14.230375`", 
   ",", "1.172375`", ",", "10.16081462353453`", ",", "7.999404552696898`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663008439576431*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1470292250627081`", ",", "0.9601831791467279`", ",", 
     "0.14358395874369168`", ",", "0.9598759313363124`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1470292250627081, 0.9601831791467279, 0.14358395874369168`, 
   0.9598759313363124}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008439579435*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9983255520574726`", ",", "0.9995397800596716`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9983255520574726, 0.9995397800596716}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630084395814342`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "13.57609965333333333333333333333333333333`10.06144126541078"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   13.57609965333333333333333333333333333333`10.06144126541078],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008439583436*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663008440203876*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630084402058787`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0028999999999999994`", ",", "0.9839619845406988`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663008440206879*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008440231897*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "4.453476655`9.577365428313808"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.453476655`9.577365428313808],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630087074404955`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14253505881366646`", ",", "0.9617833299473776`", ",", 
     "0.13241952464600915`", ",", "0.9632390261075071`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14253505881366646`, 0.9617833299473776, 0.13241952464600915`, 
   0.9632390261075071}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008801932544*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.998362794146179`", ",", "0.9995774160374075`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.998362794146179, 0.9995774160374075}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630088019345446`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630088019365463`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.790194005`8.8263999786923"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.790194005`8.8263999786923],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630088493431835`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630089441474543`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.15591586679706`", ",", "10.244620468387012`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630089441494555`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663008944150456*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.386288565678793`", ",", "57.030212966808755`", ",", "71.12040590012`", 
   ",", "84.15397336032095`", ",", "87.61537052349215`", ",", 
   "93.4634028276113`", ",", "95.67764052774378`", ",", "97.25620982231501`", 
   ",", "99.25814651804134`", ",", "0.7962122279130441`", ",", "14.3105`", 
   ",", "1.1292857142857142`", ",", "10.48956118629597`", ",", 
   "7.029513920422603`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630089441524563`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14796032588715813`", ",", "0.9602597430937801`", ",", 
     "0.1375473924324312`", ",", "0.9618799735794998`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14796032588715813`, 0.9602597430937801, 0.1375473924324312, 
   0.9618799735794998}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008944154459*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996028176752483`", ",", "0.9996217337332847`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996028176752483, 0.9996217337332847}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008944155462*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "8.40930022`9.853426105697594"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 8.40930022`9.853426105697594],
  Editable->False]], "Print",
 CellChangeTimes->{3.663008944158462*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630089448039193`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663008944806921*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002999999999999999`", ",", "0.9867335667277916`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630089448089247`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630089448339415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "8.89884755`9.878000014963558"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.89884755`9.878000014963558],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630094787647943`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1342803768946974`", ",", "0.9650669986149885`", ",", 
     "0.12315469486349628`", ",", "0.9668491224193009`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1342803768946974, 0.9650669986149885, 0.12315469486349628`, 
   0.9668491224193009}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663009572387225*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9072103813573026`", ",", "0.9014313074433578`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9072103813573026, 0.9014313074433578}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663009572389227*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.66300957239223*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.79872162666666666666666666666666666667`9.609791805501862"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.79872162666666666666666666666666666667`9.609791805501862],
  Editable->False]], "Print",
 CellChangeTimes->{3.663009860310523*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630099548746223`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"47.000575058366266`", ",", "11.514293988179976`"}], "}"}]], "Print",
 CellChangeTimes->{3.663009954876623*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630099548776255`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "24.993392341172058`", ",", "54.049625922105626`", ",", 
   "69.56539733854996`", ",", "84.06191539218355`", ",", "87.82503141531748`",
    ",", "93.85287851274285`", ",", "95.99591065804923`", ",", 
   "97.4777329212732`", ",", "99.31857966783912`", ",", "0.7918072221550164`",
    ",", "14.011482142857142`", ",", "0.9045892857142858`", ",", 
   "11.669760620504489`", ",", "5.161861053687843`"}], "}"}]], "Print",
 CellChangeTimes->{3.663009954879627*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13465359816722133`", ",", "0.965236722781196`", ",", 
     "0.12784964367382134`", ",", "0.9659670493675085`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13465359816722133`, 0.965236722781196, 0.12784964367382134`, 
   0.9659670493675085}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663009954881626*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9928929955793727`", ",", "0.9895887422397714`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9928929955793727, 0.9895887422397714}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630099548836284`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "16.84456884166666666666666666666666666667`10.155126147351034"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   16.84456884166666666666666666666666666667`10.155126147351034],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630099548856297`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.66300995550507*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663009955506071*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002999999999999999`", ",", "0.9828610601933204`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663009955508073*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663009955533089*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.60530594833333333333333333333333333333`9.86343256382179"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.60530594833333333333333333333333333333`9.86343256382179],
  Editable->False]], "Print",
 CellChangeTimes->{3.663010471851446*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1406615859382898`", ",", "0.9620745656703531`", ",", 
     "0.1282008407224391`", ",", "0.9641714949950156`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1406615859382898, 0.9620745656703531, 0.1282008407224391, 
   0.9641714949950156}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663010567030982*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9916388659084419`", ",", "0.9983998677173529`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9916388659084419, 0.9983998677173529}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663010567032983*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630105670349846`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.912823925`9.210341243376103"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.912823925`9.210341243376103],
  Editable->False]], "Print",
 CellChangeTimes->{3.663010681800419*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630107763965383`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"37.63981575262234`", ",", "9.98865636541197`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630107763985395`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630107764005413`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "32.75624801169456`", ",", "59.78811897522227`", ",", "73.10797459819143`", 
   ",", "85.16527211484303`", ",", "88.34509234866044`", ",", 
   "93.75480086647875`", ",", "95.84635328908135`", ",", "97.35540726973707`",
    ",", "99.28428999299284`", ",", "0.8077258083867622`", ",", "13.745125`", 
   ",", "1.2065714285714286`", ",", "9.8588702274128`", ",", 
   "9.568069221661478`"}], "}"}]], "Print",
 CellChangeTimes->{3.663010776402542*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1558931888683227`", ",", "0.9577387162508249`", ",", 
     "0.14503503169254917`", ",", "0.9594845544759776`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1558931888683227, 0.9577387162508249, 0.14503503169254917`, 
   0.9594845544759776}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630107764045444`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9976957359477323`", ",", "0.9994807564718936`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9976957359477323, 0.9994807564718936}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630107764075475`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "13.69174841`10.065125158462907"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 13.69174841`10.065125158462907],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630107764085474`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630107770530043`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663010777055008*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.002999999999999999`", ",", "0.9836689333117212`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.6630107770560107`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663010777081025*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.50629742833333333333333333333333333333`9.582486101209525"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.50629742833333333333333333333333333333`9.582486101209525],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630110474578714`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1477162639863061`", ",", "0.9603690646586769`", ",", 
     "0.13767789787992712`", ",", "0.9618118684959333`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1477162639863061, 0.9603690646586769, 0.13767789787992712`, 
   0.9618118684959333}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301114196593*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9980668965895412`", ",", "0.9994563487895503`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9980668965895412, 0.9994563487895503}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011141968932*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011141970934*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.87934060833333333333333333333333333333`8.872823377745688"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.87934060833333333333333333333333333333`8.872823377745688],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630111947273693`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630112891663775`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.16811520238441`", ",", "10.24618247446047`"}], "}"}]], "Print",
 CellChangeTimes->{3.66301128916838*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630112891703806`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.97471106591682`", ",", "58.27468793011603`", ",", "72.05559111305536`", 
   ",", "84.75984158817027`", ",", "88.1056232393173`", ",", 
   "93.7107383298035`", ",", "95.83973729529063`", ",", "97.3639115945337`", 
   ",", "99.29371820299667`", ",", "0.8028237091725636`", ",", "13.9395`", 
   ",", "1.1544821428571428`", ",", "10.174395085644974`", ",", 
   "7.935781351288508`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630112891723824`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14702415922228285`", ",", "0.9605116516926384`", ",", 
     "0.1402454737181663`", ",", "0.9611523152350279`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14702415922228285`, 0.9605116516926384, 0.1402454737181663, 
   0.9611523152350279}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630112891753845`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999609747182945`", ",", "0.9995619373611564`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999609747182945, 0.9995619373611564}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630112891773863`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "8.545863785`9.860422214406345"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 8.545863785`9.860422214406345],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630112891783867`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630112892124133`*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.663011289215413*^9}],

Cell[BoxData["\<\" Difference beteen approximated points of \[Beta] (\
\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \
\[Beta]middle+\[EmptyDownTriangle]\"\>"], "Print",
 CellChangeTimes->{3.6630112892164135`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0028999999999999994`", ",", "0.9839619845406988`", ",", 
   "0.9738119845406988`", ",", "0.9941119845406988`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630112892184153`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find parameter values for \[Beta]-Dist model \
with time pref factors approximated by seven points (minutes):  \"\>", 
   "\[InvisibleSpace]", "242.942218775`11.314169241768196"}],
  SequenceForm[
  " Time spent to find parameter values for \[Beta]-Dist model with time pref \
factors approximated by seven points (minutes):  ", 
   242.942218775`11.314169241768196],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011289278458*^9}],

Cell[BoxData["\<\" Matrix for \[EmptyDownTriangle]/3.5, \[Beta]middle, \
KLevMean, SumOfDevSq:\"\>"], "Print",
 CellChangeTimes->{3.6630112892804594`*^9}]
}, Open  ]],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.0025`", "0.9850274107626623`", "39.35318804868868`", 
      "11.687932208014265`"},
     {"0.0026`", "0.9847080141290641`", "39.187556987806666`", 
      "9.32467888869352`"},
     {"0.0026999999999999997`", "0.9845285776801921`", "39.33019506069117`", 
      "7.663252762569036`"},
     {"0.0027999999999999995`", "0.9842756735417084`", "39.2419678220704`", 
      "7.076696581332704`"},
     {"0.0028999999999999994`", "0.9839619845406988`", "39.15591586679706`", 
      "7.029513920422603`"},
     {"0.002999999999999999`", "0.9836689333117212`", "39.16811520238441`", 
      "7.935781351288508`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.663011289601716*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663011289644725*^9}],

Cell[BoxData["\<\"Run \[Beta]-Dist model with time pref factors approximated \
by seven points\"\>"], "Print",
 CellChangeTimes->{3.6630112896477365`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.663011289651739*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.663011289665736*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630112905293446`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151334`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663955`", ",", "0.10618025700090115`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133833`", ",", "0.7054024753403318`", ",", 
   "0.9876484086289594`", ",", "0.9402228750807169`", ",", 
   "0.6753895677023235`", ",", "0.7273964276788891`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630112905313473`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663011290533348*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24348812848557735`", ",", "0.8403562070237575`", ",", 
   "0.14707875093491063`", ",", "0.10757403488551806`", ",", 
   "0.8613280423351561`", ",", "0.2831336870983948`", ",", 
   "0.6663671970124141`", ",", "0.6086506751502898`", ",", 
   "0.7979901621977175`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663011290535349*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.66301129053635*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"39.24710290095415`", ",", "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.663011290538352*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.663011290539353*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.663011290541355*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8756204`7.092830868937372"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8756204`7.092830868937372],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630112905423555`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630112905453568`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Dist model with time pref factors \
approximated by seven points... \"\>"], "Print",
 CellChangeTimes->{3.6630112905463624`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630112911547885`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0028999999999999994`", ",", "0.9839619845406988`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.66301129115679*^9}],

Cell[BoxData["\<\"Generated steady state distribution of Pt\"\>"], "Print",
 CellChangeTimes->{3.663011312247755*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to generate steady state distribution of Pt \
(minutes): \"\>", "\[InvisibleSpace]", 
   "0.35153275833333333333333333333333333333`8.474632050119151"}],
  SequenceForm[
  " Time spent to generate steady state distribution of Pt (minutes): ", 
   0.35153275833333333333333333333333333333`8.474632050119151],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011312249757*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011312280778*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "8.07472945833333333333333333333333333333`9.83579422854122"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   8.07472945833333333333333333333333333333`9.83579422854122],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630117967645483`*^9}],

Cell[BoxData["\<\" Produce initial distribution of capital income \
ratio\"\>"], "Print",
 CellChangeTimes->{3.663011797002717*^9}],

Cell[BoxData["\<\" Mean of K (level): \"\>"], "Print",
 CellChangeTimes->{3.6630118000959125`*^9}],

Cell[BoxData["39.17991543663296`"], "Print",
 CellChangeTimes->{3.6630118000979147`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0891969754206138`", ",", "0.9762882446071082`", ",", 
     "0.07192382554145299`", ",", "0.9798037115830054`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.0891969754206138, 0.9762882446071082, 0.07192382554145299, 
   0.9798037115830054}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011895185384*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995405532369444`", ",", "0.9996668492937099`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995405532369444, 0.9996668492937099}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630118951873846`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.64034727666666666666666666666666666667`9.143602050149838"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.64034727666666666666666666666666666667`9.143602050149838],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630118951893854`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011895191387*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.93392931166666666666666666666666666667`8.898980254301309"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.93392931166666666666666666666666666667`8.898980254301309],
  Editable->False]], "Print",
 CellChangeTimes->{3.663011951221143*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663012046516762*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.57927156455052`", ",", "56.83510103877558`", ",", "71.03122537323371`", 
   ",", "84.1752809609979`", ",", "87.63989645248074`", ",", 
   "93.4808697810653`", ",", "95.68664278971725`", ",", "97.26295280361646`", 
   ",", "99.25968438419822`", ",", "0.7961405141845054`", ",", 
   "14.254410714285715`", ",", "1.1243214285714285`", ",", 
   "10.466890494231397`", ",", "7.014146439988097`"}], "}"}]], "Print",
 CellChangeTimes->{3.663012046519763*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13110114965410163`", ",", "0.9648747397512256`", ",", 
     "0.11800493649830338`", ",", "0.9672934641013957`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13110114965410163`, 0.9648747397512256, 0.11800493649830338`, 
   0.9672934641013957}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630120465217648`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995690332817536`", ",", "0.9993791044930637`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995690332817536, 0.9993791044930637}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630120465237656`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.58826031`9.129587931402268"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.58826031`9.129587931402268],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630120465257673`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301204652777*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.91419866`8.889706828595953"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.91419866`8.889706828595953],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012101368681*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630121974028234`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.608828653403243`", ",", "57.548458944212236`", ",", "71.5151024417033`",
    ",", "84.42943744527717`", ",", "87.82873098164191`", ",", 
   "93.57580997388621`", ",", "95.75509678820785`", ",", "97.30980406358995`",
    ",", "99.2757665289431`", ",", "0.7993794084081762`", ",", 
   "14.103857142857143`", ",", "1.114125`", ",", "10.428379773607373`", ",", 
   "7.3139519263086274`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630121974058256`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14065465640818117`", ",", "0.962273650363668`", ",", 
     "0.13494232959629193`", ",", "0.9626909848760976`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14065465640818117`, 0.962273650363668, 0.13494232959629193`, 
   0.9626909848760976}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630121974088273`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997289490670553`", ",", "0.9996411194637386`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997289490670553, 0.9996411194637386}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630121974108295`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.60056903666666666666666666666666666667`9.132940659339814"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.60056903666666666666666666666666666667`9.132940659339814],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630121974128304`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012197414833*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.59779084166666666666666666666666666667`8.705215505449345"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.59779084166666666666666666666666666667`8.705215505449345],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630122332702737`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630123283177156`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.463751167499872`", ",", "56.1601716153761`", ",", "70.79088316021452`", 
   ",", "84.1542658535035`", ",", "87.6413385713593`", ",", 
   "93.48247616492999`", ",", "95.69337546147985`", ",", "97.26948746257865`",
    ",", "99.26274498668569`", ",", "0.7942168418951454`", ",", 
   "14.034232142857142`", ",", "1.123625`", ",", "10.469467876166414`", ",", 
   "6.92866772238373`"}], "}"}]], "Print",
 CellChangeTimes->{3.663012328320718*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1493265602773619`", ",", "0.9598914484723484`", ",", 
     "0.1423005833230836`", ",", "0.9606648324925763`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1493265602773619, 0.9598914484723484, 0.1423005833230836, 
   0.9606648324925763}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630123283227186`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997958283885781`", ",", "0.9997381180113407`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997958283885781, 0.9997381180113407}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630123283247213`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.58410734`9.128450854503358"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.58410734`9.128450854503358],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012328326722*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012328328724*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.09536766166666666666666666666666666667`7.908067382452113"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.09536766166666666666666666666666666667`7.908067382452113],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012334039776*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663012429676635*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.140907715705705`", ",", "57.47190471133435`", ",", "71.42450994412279`",
    ",", "84.3871838686248`", ",", "87.80577169117343`", ",", 
   "93.55566437413955`", ",", "95.73886224822562`", ",", "97.2966483218907`", 
   ",", "99.27038189657034`", ",", "0.7986034570884673`", ",", 
   "14.122803571428571`", ",", "1.1135535714285714`", ",", 
   "10.446678605690822`", ",", "7.286816641253171`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630124296806383`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1506133896538352`", ",", "0.9595543740126862`", ",", 
     "0.1408733650742246`", ",", "0.9610687523985499`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1506133896538352, 0.9595543740126862, 0.1408733650742246, 
   0.9610687523985499}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630124296836405`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998113498382147`", ",", "0.9997683588880902`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998113498382147, 0.9997683588880902}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630124296856413`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.59396435`9.131144852119254"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.59396435`9.131144852119254],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630124296886444`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630124296906457`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.14797166`8.09884479412298"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.14797166`8.09884479412298],
  Editable->False]], "Print",
 CellChangeTimes->{3.663012438555936*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663013236193905*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.060063595767033`", ",", "57.44458234576075`", ",", "71.44764291147203`",
    ",", "84.39506762400228`", ",", "87.81673706950909`", ",", 
   "93.56663897229136`", ",", "95.74257284779384`", ",", "97.29729780691153`",
    ",", "99.27018365052652`", ",", "0.7987342948473117`", ",", "14.1457875`",
    ",", "1.1415392857142856`", ",", "10.455050855344632`", ",", 
   "7.283487621565083`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630132361969075`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15233180910878258`", ",", "0.959084979712132`", ",", 
     "0.1428091258836963`", ",", "0.9605381432325816`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15233180910878258`, 0.959084979712132, 0.1428091258836963, 
   0.9605381432325816}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630132361979084`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999256460808083`", ",", "0.9998828455176582`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999256460808083, 0.9998828455176582}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663013236199909*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "13.29398284`10.052321362062655"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 13.29398284`10.052321362062655],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630132362029114`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.663013236204913*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.05995922666666666666666666666666666667`7.706522271048225"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.05995922666666666666666666666666666667`7.706522271048225],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630132397924585`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663013240030628*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630139125502605`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630145848412886`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630147207167006`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.087000364864068`", ",", "57.42652279770984`", ",", "71.43526746822107`",
    ",", "84.40814307959876`", ",", "87.83068223739113`", ",", 
   "93.5757436993707`", ",", "95.75171994738386`", ",", "97.30539454839018`", 
   ",", "99.27422945373328`", ",", "0.7988278448434653`", ",", "14.108325`", 
   ",", "1.1396642857142858`", ",", "10.45474098436181`", ",", 
   "7.267186519006977`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630147207187014`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15393387237825248`", ",", "0.9586467471247027`", ",", 
     "0.1451307870653472`", ",", "0.9599035983824984`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15393387237825248`, 0.9586467471247027, 0.1451307870653472, 
   0.9599035983824984}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630147207217035`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999339105459393`", ",", "0.999888079055755`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999339105459393, 0.999888079055755}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630147207227044`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "24.68207066666666666666666666666666666667`10.321047839613477"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   24.68207066666666666666666666666666666667`10.321047839613477],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630147207247057`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Iteration ", 8],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301472072571*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.10435738833333333333333333333333333333`7.947189450048431"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.10435738833333333333333333333333333333`7.947189450048431],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630147269781427`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663014727220315*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663015386261942*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016045362612*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630161786661987`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03207016298464654`", ",", "0.017431481779255936`", ",", 
   "0.5435420389849964`", ",", "0.08283411953373099`", ",", 
   "2.582902979738129`", ",", "0.760108078986183`", ",", 
   "0.8992390450484347`", ",", "0.8194675716016039`", ",", 
   "0.8976042605241139`", ",", "0.9635830115704459`", ",", 
   "0.6493236410530471`", ",", "0.6953655459134092`", ",", 
   "10.27745361969205`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630161786682005`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630161786712027`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.024495428741757738`", ",", "0.9755167055941089`", ",", 
   "0.04384776651841626`", ",", "0.02329152052848856`", ",", 
   "0.6265822576304467`", ",", 
   RowBox[{"-", "0.09923626766384283`"}], ",", "0.945070350990035`", ",", 
   "0.9286893774164177`", ",", "0.7601004899423703`", ",", 
   RowBox[{"-", "0.09158385776047884`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663016178674205*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663016178677207*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.480252782814265`", ",", "57.59364553754839`", ",", "71.50806785056018`",
    ",", "84.43048744568922`", ",", "87.84495005007801`", ",", 
   "93.58515338374627`", ",", "95.75709657220159`", ",", "97.30778997070306`",
    ",", "99.27417479215192`", ",", "0.7993903797611935`", ",", 
   "14.142623214285715`", ",", "1.1471589285714285`", ",", 
   "10.452526872245693`", ",", "7.306001897924799`"}], "}"}]], "Print",
 CellChangeTimes->{3.66301617868121*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.23338117202047348`"}],
  SequenceForm[" MPC mean:", 0.23338117202047348`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630161786842117`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663016178685212*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1369231250791586`", ",", "0.16130098042021523`", ",", 
   "0.17154671129748478`", ",", "0.18833881420750154`", ",", 
   "0.19953250614316964`", ",", "0.28212709664164526`", ",", 
   "0.3495697667562855`", ",", "0.2516114091807292`", ",", 
   "0.27056936049264724`", ",", "0.3222438795887227`"}], "}"}]], "Print",
 CellChangeTimes->{3.663016178687214*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630161786882143`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05442062204477949`", ",", "0.05696750521162097`", ",", 
   "0.0604710176754486`", ",", "0.07911382900379449`", ",", 
   "0.11818917682834917`", ",", "0.3845399066601728`", ",", 
   "0.47554340869531564`", ",", "0.2846095749807257`", ",", 
   "0.35344875092378414`", ",", "0.4455813542038014`"}], "}"}]], "Print",
 CellChangeTimes->{3.663016178690216*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.2042957638307602`", ",", "0.540990423939712`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.2042957638307602, 0.540990423939712}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016178692218*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15500228630224194`", ",", "0.9583560648654179`", ",", 
     "0.14628390895579507`", ",", "0.9595904201721293`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15500228630224194`, 0.9583560648654179, 0.14628390895579507`, 
   0.9595904201721293}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630161786942186`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9999315149954704`", ",", "0.9998924712092083`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9999315149954704, 0.9998924712092083}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630161786962194`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "24.19501776166666666666666666666666666667`10.31239219347784"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   24.19501776166666666666666666666666666667`10.31239219347784],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016178698222*^9}],

Cell[BoxData["\<\" Consumption function\"\>"], "Print",
 CellChangeTimes->{3.6630161786992226`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "81.61029782833333333333333333333333333333`10.840411210987211"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   81.61029782833333333333333333333333333333`10.840411210987211],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016187160226*^9}],

Cell[BoxData["\<\" Figure of consumption function\"\>"], "Print",
 CellChangeTimes->{3.6630161871632276`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJyN2Hk0lPsfB/BxpSx1KWTsa7Lv3ZJqvqjculfZRYsUlRYJab0qtBBupaui
W5ayVdzc6xKJKKJSlixpR8yMmXnGPlR+pnm+H/Nzzu+c3/OP8z7P5/se53ie
7+s7NLfsdfH/gUKhhIlQKPyfU6+kK/yrhuY0Q3TPaHANTZDbaC7fcxvNypJ/
ddDCV1TU28ztIO/TaVX7dnPbZ9JpghaCdnKo25GZxCTn+2mZowbK+TYs2vZt
/GuI1qTsl38tgk2u59Eus30tdiVwaM+f8a8vtKSWz6WqtgTZR0Evj5Y+bskh
yHkRlEJYf1w0k0v2iyJO2+Hh99u55PppSGswx2SkhEt+3nSknuxw66lkH9kn
jlRsO+df9+oj+yRQ7e6HlWYpfWSfFPJG5Q0bOvrIvpmIIVv28YxuP9n3Izrc
XUr8E9BP9smg9d8e0Bqy+sl5GXTgQPSzxR/7yf7Z6A/C1StdcYBcPwflB6h9
lnIZID9PFr341BMcGjNA9skh5vq/x99UDJB9ckji1W+xK8YGyD555HWlbGeN
ySDZNxdVtbGt0zYOkn0KyEJJTeJI7CDZR0XXvB1bXUsGyT4qmpl8NNOIMUj2
KaKD7bfCxBSHyD4l1KXcvuKdwxDZp4ycN0jKF4YNkX0qqPSqdefvN4fIPhVk
+HbH3zuahsg+VXRJ9XKEregw2aeGRDdVOytZDJN96ija0/dCvtcw2aeBctv3
Hrh9HM9roAaf8A0ZmcNkvwYa6oi1Takbpn1fbqmJlHck6yYNDpOfp4lQb7bU
RZURsk8L+QUVEXH2I2SfFooeqHp1eucI2aeFcg++Kj5xfoT8fbRR45eO60eK
Rsg+bTR8vC9q/3vcp4NUxER27p3OI/t0kG209NoAYx7Zp4O2zVKz2urGI/vm
oZjzRoobj/DIvnkoT97mm0caj+zTRY1XVnU41eA+XcRTXfdkNYH7dJFK2rY7
yxVGyb75yE53/4Vly0bJvvloW07kgUX+o2SfHgpctrDO5/Qo2aeHLI//luOY
NUr26aHRh5WnbGpwnz4qE5Xcqs8YpTWNBg8kyL5aht9/9+r9C8Uo8N5R4k06
kHDuqy35c2LfQDinBc1MFc6JXI2J++KQeZfLU4Vzit9Pa0Qm3hecA09+dBLO
uYYLJu7LQX6d/6uzcLb7VuMoMvE84xw1S9dZOF9OJybuq0CWXhblLJxPW9dk
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
v67/P/8HHSIHsA==
     "], {{{}, {}, {}, {}, {}, {}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{89, 88, 340}, {81, 80, 328}, {65, 370, 304}, {75, 74, 
          319}, {73, 72, 316}, {69, 68, 310}, {366, 100, 358}, {71, 70, 
          313}, {77, 76, 322}, {79, 78, 325}, {99, 98, 355}, {83, 82, 331}, {
          85, 84, 334}, {87, 86, 337}, {91, 90, 343}, {93, 92, 346}, {95, 94, 
          349}, {368, 367, 361}, {364, 371, 369}, {97, 96, 352}, {67, 66, 
          307}}]]}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwVz9tKQlEUhtGt9Ai+gI+gJIVhaJnm2fbW8lBaligKmu9/45gXg/XBuvln
cXNOT/kkSQrc8Msf25yXTE8Y6D5r/c1arxjoIU39zIeekemUuV7wrqd86RWf
eklHd3nUNXq6T0PXGekxbd2irV950FVedIt7fcc/F44caPh7oqxL/OhNiI7N
sZ2Kvo1NsY25nvGm09gYWzlxZs8uborbYmNs5Qq1lxuB
          
          "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 365}]}, 
       {GrayLevel[0], Thickness[0.01], 
        LineBox[{102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
         114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
          128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 
         141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
          155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 
         168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
          182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
         195, 196, 197, 198, 199, 200, 201, 202}]}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwNz0VWQgEAAMCPii1iB0qZmHfxCL7nVg+qYAd2dyO2wizmAJOaXZiZDwVB
MMciS2TJscwKq6yxzgabbLHNDnl22WOfAw454pgTTjnjnAsuueKaG265454H
HnnimRdeKfBGkXc++OSLb3745Y9/SgRyISqopIow1dRQSx31NNBIExGaidJC
K22000EnXXTTQy8x+ugnToIkKdIMMMgQw4wwSoYxxplgkimmKQNmAjYa
         "]]}, 
       {GrayLevel[0], LineBox[CompressedData["
1:eJwV0FdSwmAYhtGwFHdgwQ6oIAjSAwjSpNoHdP83nO/imfNmkvyZydFqn+4y
SZJsdWw88ISnKtpnLDHLcz3aFyzzkleq2Nd84g1vVbVzrDHPgp7tO9Z5H99S
wy6yyVKcr5ZdZpuVOFcdu8oua3GWUrvOHhtxhvp2iwO24z292F0OmcbzGtl9
vnIQz2hsDznhKO5pao854ySuNbdnfOM81MJecMklV5G95pobbrWx3xk//UOf
2utLf/rWj/71qwMxMiJI
         "]]}}}], {}}, 
   InsetBox["\<\" Consumption/(quarterly) permanent\"\>", {-0.3, 1.63}, \
{-1, 0}], 
   InsetBox["\<\" income ratio for least patient\"\>", {-0.3, 1.53}, {-1, 0}],
    InsetBox["\<\" in \[Beta]-Dist (left scale) \"\>", {-0.3, 1.43}, {-1, 0}],
    InsetBox["\<\" \[DownArrow] \"\>", {5.5, 1.35}, {-1, 0}], 
   InsetBox["\<\"  \[Beta]-Point (left scale)\"\>", {6, 1.2}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow] \"\>", {8, 1.11}, {-1, 0}], 
   InsetBox["\<\"  \[UpArrow] for most patient in \[Beta]-Dist (left scale)\"\
\>", {4, 0.75}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {16.5, -0.16}, {-1, 0}], 
   InsetBox["\<\"   Histogram: empirical density of \"\>", {4.8, 0.55}, \
{-1, 0}], 
   InsetBox["\<\"   \\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\)) (right scale)\"\>", {4.85, 0.45}, \
{-1, 0}], InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.35}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{-0.00189573459715639, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.39857819905213276`, 
      FormBox["0.05`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.7990521327014218, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.199526066350711, 
      FormBox["0.15000000000000002`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.07819905213270145, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.1582938388625593, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.23838862559241716`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.31848341232227495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.4786729857819907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5587677725118484, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6388625592417063, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7189573459715641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8791469194312798, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9592417061611375, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.0393364928909954`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.1194312796208532`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.279620853080569, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3597156398104269`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4398104265402847`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5199052132701425`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.08199052132701423, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{
  3.663016187177238*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
e6t/r8S/s4v+P5CPEXA=\
\>"]],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1: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
     "], {{{}, {}, {}, {}, {}, 
       {RGBColor[0.5, 0.5, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{173, 67, 68, 233, 232, 231, 230, 229, 228, 227, 226, 
          225, 224, 223, 222, 221, 220, 219, 218, 217, 216, 215, 214, 213, 
          212, 211, 210, 209, 208, 207, 206, 205, 204, 203, 202, 201, 200, 
          199, 198, 197, 196, 195, 194, 193, 192, 191, 190, 189, 188, 187, 
          186, 185, 184, 183, 182, 181, 180, 179, 178, 177, 176, 175, 
          174}}]]}, {}, 
       {RGBColor[1., 0.8, 0.8], Opacity[0.5], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{234, 65, 66, 294, 293, 292, 291, 290, 289, 288, 287, 
          286, 285, 284, 283, 282, 281, 280, 279, 278, 277, 276, 275, 274, 
          273, 272, 271, 270, 269, 268, 267, 266, 265, 264, 263, 262, 261, 
          260, 259, 258, 257, 256, 255, 254, 253, 252, 251, 250, 249, 248, 
          247, 246, 245, 244, 243, 242, 241, 240, 239, 238, 237, 236, 
          235}}]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 295}]}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[{72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 
         87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 
         103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
          117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 
         130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143,
          144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 
         157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170,
          171, 172}]}, 
       {GrayLevel[0], 
        LineBox[{173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 
         185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198,
          199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 
         212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225,
          226, 227, 228, 229, 230, 231, 232, 233}]}, 
       {GrayLevel[0], 
        LineBox[{234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 
         246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259,
          260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 
         273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286,
          287, 288, 289, 290, 291, 292, 293, 294}]}}}], {}}, 
   InsetBox["\<\"  \[UpArrow] Most impatient (left scale)\"\>", {7, 1.3}, \
{-1, 0}], InsetBox["\<\"  Most patient (left scale)\"\>", {2, 0.99}, {-1, 0}],
    InsetBox["\<\"  \[DownArrow]\"\>", {4, 0.88}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)\"\>", {16.5, -0.16}, \
{-1, 0}], 
   InsetBox["\<\"   Histogram: empirical density of \"\>", {4.8, 0.35}, \
{-1, 0}], 
   InsetBox["\<\"   net worth (right scale)\"\>", {4.85, 0.25}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.14}, {-1, 0}], 
   InsetBox["\<\"  \[LeftArrow] Histogram: empirical density of \"\>", \
{2, 0.68}, {-1, 0}], 
   InsetBox["\<\"      liquid financial asset + retirement assets\"\>", \
{2, 0.58}, {-1, 0}], 
   InsetBox["\<\"      (right scale)\"\>", {2, 0.48}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{0.0031496062992126123`, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.2692913385826772, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.5354330708661419, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.8015748031496066, 
      FormBox["0.30000000000000004`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.067716535433071, 
      FormBox["0.4`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.3338582677165356`, 
      FormBox["0.5`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6000000000000003`, 
      FormBox["0.6000000000000001`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.05637795275590554, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.10960629921259846`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.16283464566929137`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.21606299212598432`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.32251968503937023`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.37574803149606306`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.428976377952756, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.48220472440944895`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5886614173228347, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6418897637795277, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6951181102362206, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7483464566929137, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8548031496062996, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9080314960629925, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9612598425196851, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.014488188976378, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.120944881889764, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.174173228346457, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.2274015748031495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.2806299212598427`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3870866141732285`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4403149606299215`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4935433070866144`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5467716535433074`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.05007874015748031, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{3.663016187203257*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1:eJyN2Hk0lPsfB/BxpSx1KWTsa7Lv3ZJqvqjculfZRYsUlRYJab0qtBBupaui
W5ayVdzc6xKJKKJSlixpR8yMmXnGPlR+pnm+H/Nzzu+c3/OP8z7P5/se53ie
7+s7NLfsdfH/gUKhhIlQKPyfU6+kK/yrhuY0Q3TPaHANTZDbaC7fcxvNypJ/
ddDCV1TU28ztIO/TaVX7dnPbZ9JpghaCdnKo25GZxCTn+2mZowbK+TYs2vZt
/GuI1qTsl38tgk2u59Eus30tdiVwaM+f8a8vtKSWz6WqtgTZR0Evj5Y+bskh
yHkRlEJYf1w0k0v2iyJO2+Hh99u55PppSGswx2SkhEt+3nSknuxw66lkH9kn
jlRsO+df9+oj+yRQ7e6HlWYpfWSfFPJG5Q0bOvrIvpmIIVv28YxuP9n3Izrc
XUr8E9BP9smg9d8e0Bqy+sl5GXTgQPSzxR/7yf7Z6A/C1StdcYBcPwflB6h9
lnIZID9PFr341BMcGjNA9skh5vq/x99UDJB9ckji1W+xK8YGyD555HWlbGeN
ySDZNxdVtbGt0zYOkn0KyEJJTeJI7CDZR0XXvB1bXUsGyT4qmpl8NNOIMUj2
KaKD7bfCxBSHyD4l1KXcvuKdwxDZp4ycN0jKF4YNkX0qqPSqdefvN4fIPhVk
+HbH3zuahsg+VXRJ9XKEregw2aeGRDdVOytZDJN96ija0/dCvtcw2aeBctv3
Hrh9HM9roAaf8A0ZmcNkvwYa6oi1Takbpn1fbqmJlHck6yYNDpOfp4lQb7bU
RZURsk8L+QUVEXH2I2SfFooeqHp1eucI2aeFcg++Kj5xfoT8fbRR45eO60eK
Rsg+bTR8vC9q/3vcp4NUxER27p3OI/t0kG209NoAYx7Zp4O2zVKz2urGI/vm
oZjzRoobj/DIvnkoT97mm0caj+zTRY1XVnU41eA+XcRTXfdkNYH7dJFK2rY7
yxVGyb75yE53/4Vly0bJvvloW07kgUX+o2SfHgpctrDO5/Qo2aeHLI//luOY
NUr26aHRh5WnbGpwnz4qE5Xcqs8YpTWNBg8kyL5aht9/9+r9C8Uo8N5R4k06
kHDuqy35c2LfQDinBc1MFc6JXI2J++KQeZfLU4Vzit9Pa0Qm3hecA09+dBLO
uYYLJu7LQX6d/6uzcLb7VuMoMvE84xw1S9dZOF9OJybuq0CWXhblLJxPW9dk
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
v67/P/8HHSIHsA==
     "], {{{}, {}, {}, {}, {}, {}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{89, 88, 340}, {81, 80, 328}, {65, 370, 304}, {75, 74, 
          319}, {73, 72, 316}, {69, 68, 310}, {366, 100, 358}, {71, 70, 
          313}, {77, 76, 322}, {79, 78, 325}, {99, 98, 355}, {83, 82, 331}, {
          85, 84, 334}, {87, 86, 337}, {91, 90, 343}, {93, 92, 346}, {95, 94, 
          349}, {368, 367, 361}, {364, 371, 369}, {97, 96, 352}, {67, 66, 
          307}}]]}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwVz9tKQlEUhtGt9Ai+gI+gJIVhaJnm2fbW8lBaligKmu9/45gXg/XBuvln
cXNOT/kkSQrc8Msf25yXTE8Y6D5r/c1arxjoIU39zIeekemUuV7wrqd86RWf
eklHd3nUNXq6T0PXGekxbd2irV950FVedIt7fcc/F44caPh7oqxL/OhNiI7N
sZ2Kvo1NsY25nvGm09gYWzlxZs8uborbYmNs5Qq1lxuB
          
          "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
         18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
         35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 
         52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 365}]}, 
       {GrayLevel[0], Thickness[0.01], 
        LineBox[{102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
         114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
          128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 
         141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
          155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 
         168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
          182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
         195, 196, 197, 198, 199, 200, 201, 202}]}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwNz0VWQgEAAMCPii1iB0qZmHfxCL7nVg+qYAd2dyO2wizmAJOaXZiZDwVB
MMciS2TJscwKq6yxzgabbLHNDnl22WOfAw454pgTTjnjnAsuueKaG265454H
HnnimRdeKfBGkXc++OSLb3745Y9/SgRyISqopIow1dRQSx31NNBIExGaidJC
K22000EnXXTTQy8x+ugnToIkKdIMMMgQw4wwSoYxxplgkimmKQNmAjYa
         "]]}, 
       {GrayLevel[0], LineBox[CompressedData["
1:eJwV0FdSwmAYhtGwFHdgwQ6oIAjSAwjSpNoHdP83nO/imfNmkvyZydFqn+4y
SZJsdWw88ISnKtpnLDHLcz3aFyzzkleq2Nd84g1vVbVzrDHPgp7tO9Z5H99S
wy6yyVKcr5ZdZpuVOFcdu8oua3GWUrvOHhtxhvp2iwO24z292F0OmcbzGtl9
vnIQz2hsDznhKO5pao854ySuNbdnfOM81MJecMklV5G95pobbrWx3xk//UOf
2utLf/rWj/71qwMxMiJI
         "]]}}}], {}}, 
   InsetBox["\<\" Consumption/(quarterly) permanent\"\>", {-0.3, 1.63}, \
{-1, 0}], 
   InsetBox["\<\" income ratio for least patient\"\>", {-0.3, 1.53}, {-1, 0}],
    InsetBox["\<\" in \[Beta]-Dist (left scale) \"\>", {-0.3, 1.43}, {-1, 0}],
    InsetBox["\<\" \[DownArrow] \"\>", {5.5, 1.35}, {-1, 0}], 
   InsetBox["\<\"  \[Beta]-Point (left scale)\"\>", {6, 1.2}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow] \"\>", {8, 1.11}, {-1, 0}], 
   InsetBox["\<\"  \[UpArrow] for most patient in \[Beta]-Dist (left scale)\"\
\>", {4, 0.75}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {16.5, -0.16}, {-1, 0}], 
   InsetBox["\<\"   Histogram: empirical density of \"\>", {4.8, 0.55}, \
{-1, 0}], 
   InsetBox["\<\"   \\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\)) (right scale)\"\>", {4.85, 0.45}, \
{-1, 0}], InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.35}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{-0.00189573459715639, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.39857819905213276`, 
      FormBox["0.05`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.7990521327014218, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.199526066350711, 
      FormBox["0.15000000000000002`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.07819905213270145, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.1582938388625593, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.23838862559241716`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.31848341232227495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.4786729857819907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5587677725118484, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6388625592417063, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7189573459715641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8791469194312798, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9592417061611375, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.0393364928909954`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.1194312796208532`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.279620853080569, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3597156398104269`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4398104265402847`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5199052132701425`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.08199052132701423, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{
  3.663016187227294*^9},ImageCache->GraphicsData["CompressedBitmap", "\<\
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
e6t/r8S/s4v+P5CPEXA=\
\>"]],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663016187254303*^9}],

Cell[BoxData["\<\"KS-JEDC model (experiment)\"\>"], "Print",
 CellChangeTimes->{3.663016187256298*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630162690022964`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"40.69098799227556`", ",", "10.50365777789603`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630162690042987`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13669634410073367`", ",", "0.963688485337455`", ",", 
     "0.12195851050128895`", ",", "0.9662400914714148`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13669634410073367`, 0.963688485337455, 0.12195851050128895`, 
   0.9662400914714148}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630162690063*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9927076245248772`", ",", "0.9926927672005085`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9927076245248772, 0.9926927672005085}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630162690083027`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run KS-JEDC model (experiment) (minutes): \"\>",
    "\[InvisibleSpace]", 
   "1.37100596166666666666666666666666666667`9.065705591490417"}],
  SequenceForm[
  " Time spent to run KS-JEDC model (experiment) (minutes): ", 
   1.37100596166666666666666666666666666667`9.065705591490417],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016269515662*^9}],

Cell[BoxData["\<\" Figure of interst rate\"\>"], "Print",
 CellChangeTimes->{3.6630162695186834`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.006], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7Ne+Tupwe7nAHirgoN/yavusjzA+h8OiMBut
NT9hfAEHS2F21VrGhVC+iMN0bgl9fk4YX8JhGy/z/SQBGF/GwaWQ7WOZOIyv
4LDU3kMvUA7GV3LI+NB6IM9qEZSv4nC9iPVlpiGMr+YQ091juUcDxtdw+LYq
zSxBAcbXcrAOe7U+TALG13H4ISA2Y6YAjK/nUPWq7ZwqJ4xv4PBnVc+yH4ww
vqHDpyPPNCPg/jdymMX2b+UauP+NHS58c523G+5/E4fmlkaubrj/TR2Sb4ha
SML9b+bgten59Uy4/80dnK8s02yG+9/Cge/3nHNJQP8DAERdY4s=
       "]]}}, {}}, InsetBox["\<\" period\"\>", {22, 0.0305}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0.03},
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 25}, {0.03, 0.038}},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6630162695216866`*^9}],

Cell[BoxData["\<\" Figure of consumption growth\"\>"], "Print",
 CellChangeTimes->{3.6630162695296907`*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.005], LineBox[CompressedData["
1:eJxTTMoPSmViYGCQAGIQDQEf7BluBOfWLancDxVwYIgJ3pTPGw/lczgwMKzj
d70XC+ULODAcefTt1+cYKF/EgUFgS9jnGBhfwoGB5dKG2GQYX8aBYYH7jyiF
KChfwYEhInnz7JxIKF/JgaFF1yhDpdoewlcBmv8jt74hDspXc2CoyX3Wdy0G
ytcA6n/MnyEeC+VrOTCkxJ9lsIqG8nUcGCx2Pt/mEAXl6zkwuFyM4syMhPIN
HBj+MD0JmhoB5RsC7f/N5TAR5n8jBwaPasvjP2H+N3Zg4Fg2NbQH5n8TBwaV
pkWzN8H4pkD7VOQ8RGH+NXNguMAt27Ua5j9zB4YnL53OSsL8bwGUf/TN4GXE
fgDZ213R
       "]]}}, {}}, InsetBox["\<\" period\"\>", {22, -0.004}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 25}, {-0.02, 0.02}},
  PlotRangeClipping->True,
  PlotRangePadding->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.663016269531692*^9}],

Cell[BoxData["\<\" Figure of wealth distribution (with aggregate shocks) \
\"\>"], "Print",
 CellChangeTimes->{3.66301626992095*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[CompressedData["
1:eJw1lnk01dsXwCmFSooo0+tGpKJoMD3ZW6TMw52+3AZJlOepqFeJUjIkQ+Yp
MlYyRIPpdyXUczPczDKFS9c8FCUkP+/X++219jrns846Z//x2Weds8XunNXp
ZTw8PAVL+c/4K/bh/2eCLSUjHa378MclmagHmSRgXvJPY2TvR1Zk4AgjXxX4
brarxXmp4V3LVjvPndrwKnbX02eW6niGrhDr260HdScXJV6TNPCSerqy6wEj
UL5W6d01poGdEdUzanEWkOLHOytfpIn8fs27n9tTQG67ou+LW1r4hHN4MdWL
gHu8+eppRr/j/Eb3hzcmjwL7mbzkuvXamFzdu+d4hy1UffysKdqijecGS3QG
nU6BzbbIVFbsATwjuSAuoegALrsCThkf1UGmRHXHzg1nYTTS2DdfBjAxkZzN
UHGGvEXyJvmPgGtOlmf2eZ6DxpXCom1miPcDk68tXr8ArSoix7VzEBNLeYhp
wg1a2eenDIV08UH6hvk/TS8BS/WMtbCzLhZLTk0LHrsMsU/2i8dV6eLgXF7z
af+roBMgnjujeBANZB2VN9ddgydbjmTv9zuI486KgY37rgO7jD/i5KeD+GfH
Ct17DC9I+E/YsL+eHoq4hL+vz7wJArYK6kXJenius1LTc7U3/LKij9c25Bzu
db8N4vzsM2eP66P6Oc74kzkfUDNevvoHUx8bJw06FgP9oI/pLVMidQhdBMy5
p/bdgVSTva157odQWt5lyGYqAOaGv7p0tx3CmZcbX52pCQRX/6dSxpoGSNpR
emB9eTAEiulvmIsxQPL3EZLzH/eAfSs65PN3A6Qyh+uTfEPh9eugN2rWhzEl
JjJx8HkYDJauGmYXHcZK/YduPtPh8O78F7VSySNocaXlQJFhJAxUKHLWeBzB
quHuobcvooCdESpb0nUE35A97MfUYuCnyPrdzWCILKfTcRfqY4FnMkDHJsUQ
HQYoVyJ84oGu2udnucIIFW/yjURTEsC/ckH39RkjjJtQ7i6BByCV+io1s2Zp
/dJb0ta0JIh6Idi/SdUYHSKcbjALksFjtFxTKMoYrVT7eA07UoDyO7sjaN4Y
87YFJjoJp0FKqDBv0kkTPEwuNy6npMPnbqeeIywT7AnhLE5mPoRX4m9yg3ab
onaRYV602GOIUFh87BZtigqZFBo9LAN4/+fHDH11bT/VyWZCYIk6WfWsGdY+
8t7kXJkFsrIm7SMNZhhhWFqYeSMHCiXP7xU6YI4ynx0ynOVzwTCi5YfrI3OM
En+puXlDHnAPWDstCFjgJ9dH5LDVz0DiRLySro4FMk/Flzitfg7aW40j3Nws
8L3B+AFT0RdQvfzWee/HS3x1Ie6j7EvAi9b3TnRZ4DkbhfgKzXyQGB0u/7be
Eu0M/uZLphcAu9e8Vd3AEol4rUQpj0L4WJ18f727JQoU9Ch/eFgEFaS5Xtds
SyTNiLlfay2GWZrrX0Y9lkgpUjd8IsSE+X657X4iVkhnpJ4UNCyBw7qK7zbq
W2GnVv6dA3deAZUTIz9y0QpDX9b6jdSWQqpOiNBkmhVGR8itP3r3NWTVbLUQ
a7LC3NlS4TTVMhhf5sY0XEbGL4XDskltZdBDD9/isZuMu282ZMt6lwPvwQdm
8QwyHuJ9KPpTuQLY6rkiUb5kFBoML+Brr4CSp93ajFwyHuuv+iHg9wbMSIfv
t30g47r0qwZd+97+e38ouKGNPUPuewueOhOsMnkKBkaEp+mG/Q0mudsebDWi
YMTNuRRv3UrYlerH3PMnBTOe1l2dnayENvsxm2/BFDTY1ff0VhIL1uqpv7j6
lIKDaxarf5q/A/+7essq2RRcxfhMMV18B7yBk9cHRykor+hXb5pTBRph0vaD
glRkegexuo9WA3ckfaROnooHPetfc1bVAIvrZJ6FVNTYStJVK6yB+DrDd7dt
qLjJ36CuyL4WpGdI4fZuVDxWuP6ryTo2rHjM5lLvUtHnjZna+2I2rFVV/WmX
QkV+ZpUkyf49zHcriEYVUnEPPSNCeGUd+CwLPjFbS8WAZutpqnUdOHD1ZaI5
VKyy7ZpoyKwDm7btvle/UTHXK87or4U62LxdqumJIA3nmDOVu83qwVVuBvdL
0/B0AmPnREI9rBG/v1JuFw2fZihppI3WQ6bZ4PHrQMPos/V5OloNIChV7G1p
QcM2+1xGjm8D9LMmch7a0nCvnMosp74BZtIdJf3P09BeqcC0Rqrxlx8vGqoI
ZEnb2DdCl+zLuI0hNPReVvveN7MRBMnz25sSaHjwirrT5c+NsLnRflwzi4ZB
AbaRDLUmKPvkrWhaTMMbNiVzdu5N4F87vEmEtVRPsEKvpKQJNtTu5AlqpuGb
Aq5EHE8zLN/W9ls5h4YWfgkK2/WaYVrG5+XLCRp+jTkqGufTDNeny/icf9CQ
JRR7R5rVDAZjW0yHBOg4tpK1p2dVC3CN1N+ritHRI/144QazFlg0j6g23ELH
sFUNFUOhLaAE1bf2K9PRmB79M7ilBQQZLvtnNehYkSUnsk+6FTS5wltj9em4
SWn0kcCpVqDKHQyRsKCj3bfTZ7UzW2GBEl1wnUHHUqWVPIvTrVBbktxV47B0
3qSumBd+gFNJU7oCrnSUtQu2mgj6ALawWX6/59L+VNuTHl0f4FhXfiXdn47y
zcojtN1tMMc0cboYTke/TX/E5ni3QRPJzTQkkY7pwUFiz9vb4K4xMy8rg45x
xCrBiH3tUHSjuLXuBR19o2kyN0Pbf/l5Tce7zgPzGZ/boRU0uNrVdOwNvlmq
Se0Ajb/c9txuoWPqWsUjhswOmFnVwV/fS8d1YcoDowqdMHg65s5vY3T8o7R/
TCOyE7rHm9odv9NxUjspW5e/C54JFf/2eDmB3bnPLkt5dsH+HReutK8l8EqZ
S0L7ty6ALLnVcxIE8optOx9+8SOkzM/N8soTmGe5S9fm20fY50U6M7abQLZM
60k9j25gJZdcKdAisEq4OFR1eQ/sZc2bMQ4RmPwzc8TBqAdMGHxrm8wJDM5x
GqgO7wFuOU+btA2Bz1wfZDt190Crg2Sjij2BOxKnHEyVe+FLjvvm1S4Eit9e
p33dsxfWLDfufXiZwJjLD6j8db3wo+rF74teBL6vNuz8spUDkS69lsIBBLY3
Fn438uBAJnXOoCFsiTmRjRItHBAdVNTRiydwwjgg8uyePkgOirI5lkqghh04
6of2wc4c51KpTAJbrhy/8OJLH/jlNYVcfUbgEOdeZwWtH3wXZ8YvFBEYMnWj
3qOkHxb/iVICpxaargwpfIJt20ttSX8TONDwpIYv/BM82ZEV21xN4Dktzpog
Xi6ElHOz5eoJ1HOvNVJ15cJATnDS2hYCFT68ik7q50JZdsXFuPal+rECKwKI
ASB5pitXfyRw9YqF1Pu1AyDWQWancQj0PzHu46c3CFk+49Y7uQQKTuxizhYN
wqhWZKPdEIFHZtcRKSpDMFToqGM+SuCaN1wnlUdD8LjEJ2F6nECByGUryTLD
oMYvPE37TODPvHytorBhSCbLHXKfIjDHliopwj8CX2w54XZfCWzgquSvcR8B
jbE/+kRnlvwExG8mRkbAM79bLew7gW73BhxTbUaB5X4stHeWwDPgmJRQOQoq
3/m+rZhf6o9O5/avqmOQP/rVcfkPAq1zjLYxYsfAWdxiuGuJ2bNWMR4LY8DY
u9crdoFALt8HHcHj4xDEW6qk9ZNAWzElpdzicRAF0amKJV44n3yBJDoBXzPM
W7QWCbx8LIAk6DgByBPRlrLEgSRNI4n8iX/fH+t//9eT8F+5I2Mk
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.04, 0.04}], 
      LineBox[CompressedData["
1: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

       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.04, 0.04}], 
      LineBox[{{70., 0.07999999999999996}, {80., 0.12}, {90., 0.27}, {95., 
       0.44999999999999996`}, {99., 0.76}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1: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
8D/aR557
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], LineBox[CompressedData["
1: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
RnJg
       "]]}}, {}}, 
   InsetBox["\<\" \[UpArrow] US data (SCF) \"\>", {55, 0.025}, {-1, 0}], 
   InsetBox["\<\" KS-JEDC \[RightArrow]\"\>", {47, 0.6}, {-1, 0}], 
   InsetBox["\<\" \[UpArrow] KS-Hetero\"\>", {78, 0.065}, {-1, 0}], 
   InsetBox["\<\" \[Beta]-Point \[RightArrow]\"\>", {46, 0.3}, {-1, 0}], 
   InsetBox["\<\" \[Beta]-Dist (solid line)\"\>", {20, 0.35}, {-1, 0}], 
   InsetBox["\<\" Percentile\"\>", {87, -0.1}, {-1, 0}], 
   {Arrowheads[0.02], ArrowBox[{{35, 0.3}, {35, 0.02}}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->29,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 100}, {0, 1}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {25, 
      FormBox["25", TraditionalForm]}, {50, 
      FormBox["50", TraditionalForm]}, {75, 
      FormBox["75", TraditionalForm]}, {100, 
      FormBox["100", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {0.25, 
      FormBox["0.25`", TraditionalForm]}, {0.5, 
      FormBox["0.5`", TraditionalForm]}, {0.75, 
      FormBox["0.75`", TraditionalForm]}, {1, 
      FormBox["1", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{3.663016269930956*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663016270006025*^9}],

Cell[BoxData["\<\"Match liquid FINANCIAL assets plus retirement assets \
\"\>"], "Print",
 CellChangeTimes->{3.663016270008011*^9}],

Cell[BoxData["\<\"Estimate parameter values using \[Beta]-Dist model with \
time pref factors approximated by seven points\"\>"], "Print",
 CellChangeTimes->{3.663016270010012*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630162700120134`*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.66301627002404*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663016270837599*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.035422783383458424`", ",", "0.021116875842012918`", ",", 
   "0.5961382428201276`", ",", "0.15061341673470724`", ",", 
   "4.251879788899933`", ",", "0.8137181346633343`", ",", 
   "0.7640037151111625`", ",", "0.7840806378715673`", ",", 
   "0.9819712675336542`", ",", "0.8878460340722755`", ",", 
   "0.6065890997339303`", ",", "0.7104189932218934`", ",", 
   "6.6117707110745565`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630162708406024`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630162708426027`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.23590585671491238`", ",", "0.860695918377116`", ",", 
   "0.154979303236924`", ",", "0.11081033875611751`", ",", 
   "0.8629847511869324`", ",", "0.2790086919461096`", ",", 
   "0.7207486018463911`", ",", "0.6867132973017785`", ",", 
   "0.8134826807016882`", ",", 
   RowBox[{"-", "0.10588219564504728`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663016270845605*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.6630162708466053`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.16153215320396996`", ",", "0.9471823504748965`", ",", 
   "0.14460315382377908`", ",", "0.9502300561419714`"}], "}"}]], "Print",
 CellChangeTimes->{3.663016270848608*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8265865`7.067803305838672"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8265865`7.067803305838672],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301627085061*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.66301627085261*^9}],

Cell[BoxData["\<\"Estimating difference between approximated points of \
\[Beta] (\[EmptyDownTriangle]/3.5) given \[Beta]middle ... \"\>"], "Print",
 CellChangeTimes->{3.6630162708546133`*^9}],

Cell[BoxData["\<\"Generated steady state distribution of Pt\"\>"], "Print",
 CellChangeTimes->{3.6630162921527233`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to generate steady state distribution of Pt \
(minutes): \"\>", "\[InvisibleSpace]", "0.343977405`8.465196164025235"}],
  SequenceForm[
  " Time spent to generate steady state distribution of Pt (minutes): ", 
   0.343977405`8.465196164025235],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016292154725*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630162928512187`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663016292853221*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0059`", ",", "0.9636626901326487`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630162928542223`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630162928782387`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.68213891166666666666666666666666666667`9.599110542598748"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.68213891166666666666666666666666666667`9.599110542598748],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016573807575*^9}],

Cell[BoxData["\<\" Produce initial distribution of capital income \
ratio\"\>"], "Print",
 CellChangeTimes->{3.6630165740477448`*^9}],

Cell[BoxData["\<\" Mean of K (level): \"\>"], "Print",
 CellChangeTimes->{3.663016577148945*^9}],

Cell[BoxData["25.81616907569789`"], "Print",
 CellChangeTimes->{3.663016577151949*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663016670400111*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"25.70004847034293`", ",", "7.824369188405869`"}], "}"}]], "Print",
 CellChangeTimes->{3.663016670402113*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.09005470559841641`", ",", "0.9720036542289987`", ",", 
     "0.08791878541905679`", ",", "0.9711415203890479`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.09005470559841641, 0.9720036542289987, 0.08791878541905679, 
   0.9711415203890479}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630166704041357`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9852737809568918`", ",", "0.9709202586526172`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9852737809568918, 0.9709202586526172}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630166704061165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630166704081182`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "3.0964638`9.419532255360465"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.0964638`9.419532255360465],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630168561889396`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630169506069374`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"24.67483841233413`", ",", "7.623420954696852`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630169506089373`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630169506099396`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "38.83023783534919`", ",", "68.68328157414054`", ",", "80.68911619055534`", 
   ",", "89.61143296455239`", ",", "91.85644309427472`", ",", 
   "95.57776677715027`", ",", "97.03487068252`", ",", "98.1051686974179`", 
   ",", "99.48877320510722`", ",", "0.8538602619309172`", ",", 
   "10.963178571428571`", ",", "3.163`", ",", "5.548073532411557`", ",", 
   "7.910710442537568`"}], "}"}]], "Print",
 CellChangeTimes->{3.663016950611938*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1226950649327687`", ",", "0.9620973331368088`", ",", 
     "0.1177755571171882`", ",", "0.9622121342245648`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1226950649327687, 0.9620973331368088, 0.1177755571171882, 
   0.9622121342245648}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630169506139393`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9940638250276745`", ",", "0.9892264126300944`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9940638250276745, 0.9892264126300944}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663016950615941*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630169506169415`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "2.10988039833333333333333333333333333333`9.252924085591033"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.10988039833333333333333333333333333333`9.252924085591033],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630170772027617`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630171723402677`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"24.421377674790794`", ",", "7.573114982149072`"}], "}"}]], "Print",
 CellChangeTimes->{3.663017172342269*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630171723442698`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "41.291170454856356`", ",", "70.58742610800581`", ",", "81.9249533740911`", 
   ",", "89.95640204480371`", ",", "92.04109218007316`", ",", 
   "95.6304468273557`", ",", "97.06004980226804`", ",", "98.11591118728352`", 
   ",", "99.48810364965212`", ",", "0.859704092154315`", ",", 
   "10.511232142857143`", ",", "3.2584464285714287`", ",", 
   "5.454026623752027`", ",", "8.703454276903987`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630171723462706`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13690694399936243`", ",", "0.9577356390275624`", ",", 
     "0.1299408097702443`", ",", "0.9585285014445675`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13690694399936243`, 0.9577356390275624, 0.1299408097702443, 
   0.9585285014445675}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630171723492746`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9992249550361074`", ",", "0.9986812710858287`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9992249550361074, 0.9986812710858287}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630171723512754`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "14.66889174166666666666666666666666666667`10.095063551652636"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   14.66889174166666666666666666666666666667`10.095063551652636],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630171723532767`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630171729827223`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663017172984725*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0059`", ",", "0.9589554525498412`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630171729867268`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017173010744*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.19657768833333333333333333333333333333`9.551561515531832"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.19657768833333333333333333333333333333`9.551561515531832],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630174248064055`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14843052744290308`", ",", "0.9517878033541434`", ",", 
     "0.13850603679967688`", ",", "0.9530510147934257`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14843052744290308`, 0.9517878033541434, 0.13850603679967688`, 
   0.9530510147934257}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017520423253*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.994913926715418`", ",", "0.9698506827068449`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.994913926715418, 0.9698506827068449}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630175204262543`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017520428255*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.62707114333333333333333333333333333333`9.140072790999815"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.62707114333333333333333333333333333333`9.140072790999815],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017618048523*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663017712697681*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.924784578696567`", ",", "6.859406762962943`"}], "}"}]], "Print",
 CellChangeTimes->{3.663017712699682*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663017712701685*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "42.479593963128714`", ",", "70.64200144610476`", ",", "81.5569835614689`", 
   ",", "89.53907417185543`", ",", "91.6346315043979`", ",", 
   "95.34669979276147`", ",", "96.8647361880988`", ",", "97.99184759214214`", 
   ",", "99.45748787419971`", ",", "0.8567627146141857`", ",", "10.60375`", 
   ",", "3.7617142857142856`", ",", "5.065853083810951`", ",", 
   "9.052480159392102`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630177127036877`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14435195103006132`", ",", "0.9532050884099006`", ",", 
     "0.13424032134391573`", ",", "0.9547669483477298`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14435195103006132`, 0.9532050884099006, 0.13424032134391573`, 
   0.9547669483477298}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630177127066884`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9994247663699427`", ",", "0.9954005741007935`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9994247663699427, 0.9954005741007935}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630177127086897`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "9.00567335666666666666666666666666666667`9.883182438902745"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   9.00567335666666666666666666666666666667`9.883182438902745],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630177127106915`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630177133371377`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663017713339137*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0059`", ",", "0.9577448080631278`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630177133401375`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017713365156*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "2.61667333666666666666666666666666666667`9.34641575727581"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.61667333666666666666666666666666666667`9.34641575727581],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630178703655567`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15285362568675526`", ",", "0.9499586639105787`", ",", 
     "0.13734239311081242`", ",", "0.9530624685057874`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15285362568675526`, 0.9499586639105787, 0.13734239311081242`, 
   0.9530624685057874}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630179668320045`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9989613465661263`", ",", "0.9926955890824573`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9989613465661263, 0.9926955890824573}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630179668350058`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663017966837008*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.626277705`8.725433199645797"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.626277705`8.725433199645797],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018004407666*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663018099815365*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.121219045417142`", ",", "6.68964227830949`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630180998173656`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663018099818366*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "46.41247911916582`", ",", "72.12681983935457`", ",", "82.27650600746863`", 
   ",", "89.6857658007177`", ",", "91.68612562752003`", ",", 
   "95.33719286919893`", ",", "96.85349907499948`", ",", "97.982917371408`", 
   ",", "99.45499203154797`", ",", "0.8614700243186547`", ",", 
   "10.216089285714286`", ",", "3.9608392857142856`", ",", 
   "4.939330806401748`", ",", "9.510071452852921`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630180998213673`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15172569746977585`", ",", "0.9502826314519`", ",", 
     "0.140736325817996`", ",", "0.9521236288245329`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15172569746977585`, 0.9502826314519, 0.140736325817996, 
   0.9521236288245329}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018099823371*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999549776938633`", ",", "0.9978569155127985`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999549776938633, 0.9978569155127985}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018099826372*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "6.45167783333333333333333333333333333333`9.738338920835398"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   6.45167783333333333333333333333333333333`9.738338920835398],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018099828373*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663018100465828*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663018100467827*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0059`", ",", "0.9573377291096938`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630181004698277`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630181004948463`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.63629437`9.142527684327481"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.63629437`9.142527684327481],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018198671507*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.16129596568586624`", ",", "0.9470100412068747`", ",", 
     "0.1486894844417519`", ",", "0.9491398650056814`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.16129596568586624`, 0.9470100412068747, 0.1486894844417519, 
   0.9491398650056814}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630182939401054`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9959958156015026`", ",", "0.9955918031426007`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9959958156015026, 0.9955918031426007}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630182939431086`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630182939451094`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.36357464333333333333333333333333333333`8.489259834964638"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.36357464333333333333333333333333333333`8.489259834964638],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630183157545843`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663018411330402*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.85636490613281`", ",", "6.633468485643764`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630184113324037`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663018411334404*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "48.19556408341513`", ",", "72.7531157518988`", ",", "82.52974945465368`", 
   ",", "89.75971708447521`", ",", "91.72319445272832`", ",", 
   "95.34176665242768`", ",", "96.8532610021597`", ",", "97.98270099109976`", 
   ",", "99.45510485658787`", ",", "0.8636505839849229`", ",", 
   "10.068607142857143`", ",", "4.067517857142857`", ",", 
   "4.889370177432168`", ",", "9.701311950785852`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630184113364053`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15115123125334046`", ",", "0.9503054879953051`", ",", 
     "0.14268788968054136`", ",", "0.951297330351839`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15115123125334046`, 0.9503054879953051, 0.14268788968054136`, 
   0.951297330351839}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018411339408*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9991503578080865`", ",", "0.998560216848282`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9991503578080865, 0.998560216848282}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301841134241*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "5.19160041166666666666666666666666666667`9.643967506413471"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   5.19160041166666666666666666666666666667`9.643967506413471],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018411344412*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663018411946839*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630184119488406`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0059`", ",", "0.9571955042955442`"}], "}"}]], "Print",
 CellChangeTimes->{3.663018411950842*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630184119758615`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.814577975`8.839598911435191"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.814577975`8.839598911435191],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301846085054*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.12802076982297894`", ",", "0.9581379136209374`", ",", 
     "0.11104404276741975`", ",", "0.9617523775531822`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.12802076982297894`, 0.9581379136209374, 0.11104404276741975`, 
   0.9617523775531822}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630185563693156`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9972169607848403`", ",", "0.9960039080329557`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9972169607848403, 0.9960039080329557}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630185563723183`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301855637532*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.101838935`7.936580097167971"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.101838935`7.936580097167971],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301856247865*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663018658288633*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.717104312104002`", ",", "6.603528277422507`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630186582906356`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663018658292636*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.94383265067789`", ",", "71.55370198416229`", ",", "82.04081053472947`", 
   ",", "89.60762035620377`", ",", "91.62856104152681`", ",", 
   "95.30920096670452`", ",", "96.83360175546143`", ",", "97.97041500452717`",
    ",", "99.45184431739574`", ",", "0.8589001853188584`", ",", 
   "10.223285714285714`", ",", "4.077196428571429`", ",", 
   "4.902087247081162`", ",", "9.465493310088384`"}], "}"}]], "Print",
 CellChangeTimes->{3.663018658295639*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1403665536392653`", ",", "0.9538487462844216`", ",", 
     "0.1270933919017826`", ",", "0.9564682024995568`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1403665536392653, 0.9538487462844216, 0.1270933919017826, 
   0.9564682024995568}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301865829764*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9984006564263384`", ",", "0.998799778858283`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9984006564263384, 0.998799778858283}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018658300641*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.11565365666666666666666666666666666667`9.543105068794064"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.11565365666666666666666666666666666667`9.543105068794064],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630186583026433`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.66301865893309*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630186589350915`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006`", ",", "0.9636626901326487`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630186589360924`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663018658961111*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "5.12026643166666666666666666666666666667`9.637958808174302"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   5.12026643166666666666666666666666666667`9.637958808174302],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630189661780977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14050087310078574`", ",", "0.955625914180063`", ",", 
     "0.13184537482024905`", ",", "0.9565537475709226`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14050087310078574`, 0.955625914180063, 0.13184537482024905`, 
   0.9565537475709226}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630190604169664`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.7891066168289356`", ",", "0.7316709259653642`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.7891066168289356, 0.7316709259653642}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630190604199686`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630190604219704`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "3.01260426666666666666666666666666666667`9.407608335053116"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.01260426666666666666666666666666666667`9.407608335053116],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630192411732225`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630193413573074`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"25.34521441185472`", ",", "7.754754650719706`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630193413603115`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630193413623123`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "36.15451041844501`", ",", "66.45682359420533`", ",", "79.30449741420989`", 
   ",", "89.17311913465615`", ",", "91.63202963494938`", ",", 
   "95.52456662420869`", ",", "97.00812459565722`", ",", "98.08978834900269`",
    ",", "99.48283568324267`", ",", "0.847065167559415`", ",", 
   "11.545982142857143`", ",", "3.0403928571428573`", ",", 
   "5.6940878129484895`", ",", "7.212872206828047`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630193413643136`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13097504810379812`", ",", "0.9593474514039707`", ",", 
     "0.12810682985159494`", ",", "0.9587113577137283`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13097504810379812`, 0.9593474514039707, 0.12810682985159494`, 
   0.9587113577137283}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019341367317*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9665441183957704`", ",", "0.9471827472163799`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9665441183957704, 0.9471827472163799}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019341370319*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "11.38354394833333333333333333333333333333`9.984943736777314"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   11.38354394833333333333333333333333333333`9.984943736777314],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301934137232*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630193420197797`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.66301934202178*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006`", ",", "0.9580316158127772`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630193420247836`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019342049801*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.46405082333333333333333333333333333333`9.578395378627139"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.46405082333333333333333333333333333333`9.578395378627139],
  Editable->False]], "Print",
 CellChangeTimes->{3.66301960989285*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14874180167064527`", ",", "0.9515049898749266`", ",", 
     "0.1381744753781049`", ",", "0.9529719580356136`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14874180167064527`, 0.9515049898749266, 0.1381744753781049, 
   0.9529719580356136}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630197056527967`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9992189224566534`", ",", "0.983845126039149`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9992189224566534, 0.983845126039149}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630197056558*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630197056578007`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.22702064833333333333333333333333333333`9.017518119322244"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.22702064833333333333333333333333333333`9.017518119322244],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019779274036*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630198750650043`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.486124139880975`", ",", "6.767016372916841`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630198750680075`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630198750700083`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "44.49178085666383`", ",", "71.52259158439918`", ",", "82.188492012241`", 
   ",", "89.79658511742967`", ",", "91.81272284633654`", ",", 
   "95.43616224235187`", ",", "96.92431540786012`", ",", "98.03127560193113`",
    ",", "99.47020264200277`", ",", "0.8608956717404767`", ",", 
   "10.138017857142858`", ",", "3.9315357142857144`", ",", 
   "4.95290517806919`", ",", "9.240774781243422`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630198750720105`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14537927279056365`", ",", "0.9526181285714677`", ",", 
     "0.13048700237502409`", ",", "0.9557625497543702`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14537927279056365`, 0.9526181285714677, 0.13048700237502409`, 
   0.9557625497543702}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019875075012*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995035489721931`", ",", "0.9971822424636038`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995035489721931, 0.9971822424636038}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630198750770135`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "8.89479469`9.877802176349"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 8.89479469`9.877802176349],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630198750790157`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663019875715468*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630198757174683`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006`", ",", "0.9572596317648794`"}], "}"}]], "Print",
 CellChangeTimes->{3.663019875719472*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663019875744488*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "2.19956069833333333333333333333333333333`9.271002199337566"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.19956069833333333333333333333333333333`9.271002199337566],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020007718131*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1502482582753194`", ",", "0.9507973703297988`", ",", 
     "0.12289017572946759`", ",", "0.9578601122611338`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1502482582753194, 0.9507973703297988, 0.12289017572946759`, 
   0.9578601122611338}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020103987438*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9986958812026042`", ",", "0.994296230636857`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9986958812026042, 0.994296230636857}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630201039894395`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020103992442*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.534846185`8.656895150591302"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.534846185`8.656895150591302],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020136077208*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663020232457594*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.936020106396672`", ",", "6.650694822428042`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630202324606*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630202324615984`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.65760656231483`", ",", "71.5207100020362`", ",", "82.14515944344554`", 
   ",", "89.67607696798504`", ",", "91.68593494205709`", ",", 
   "95.35022663407696`", ",", "96.86637671383046`", ",", "97.9947774040812`", 
   ",", "99.45996373875555`", ",", "0.8594567363850737`", ",", 
   "10.166321428571429`", ",", "4.062767857142857`", ",", 
   "4.896692400802481`", ",", "9.383492092558125`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630202324646025`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14644329465149097`", ",", "0.9519485723222079`", ",", 
     "0.13244099946047305`", ",", "0.9548077244501436`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14644329465149097`, 0.9519485723222079, 0.13244099946047305`, 
   0.9548077244501436}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630202324666033`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9987701867016272`", ",", "0.9984149336818325`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9987701867016272, 0.9984149336818325}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020232468603*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "5.95624296833333333333333333333333333333`9.703638653490234"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   5.95624296833333333333333333333333333333`9.703638653490234],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020232470605*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663020233064025*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663020233066027*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006`", ",", "0.9570377517504659`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630202330680285`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630202330940466`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.12152910666666666666666666666666666667`8.978476797379102"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.12152910666666666666666666666666666667`8.978476797379102],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020300385793*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15431838138069642`", ",", "0.9493437958459259`", ",", 
     "0.13528971765536535`", ",", "0.9536307814333382`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15431838138069642`, 0.9493437958459259, 0.13528971765536535`, 
   0.9536307814333382}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020396661106*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9965438018233843`", ",", "0.9961249318153281`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9965438018233843, 0.9961249318153281}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020396663108*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630203966651096`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.25156183166666666666666666666666666667`8.329310996459414"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.25156183166666666666666666666666666667`8.329310996459414],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630204117538157`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630205079680853`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.803870113850255`", ",", "6.622226249313015`"}], "}"}]], "Print",
 CellChangeTimes->{3.663020507970087*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663020507972089*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.47428650828432`", ",", "71.73898517796417`", ",", "82.26526461462274`", 
   ",", "89.74247091354603`", ",", "91.74217921179812`", ",", 
   "95.3794886460819`", ",", "96.88632718706202`", ",", "98.00806959460702`", 
   ",", "99.46542553170333`", ",", "0.8600362882322956`", ",", 
   "10.102285714285713`", ",", "4.0850357142857145`", ",", 
   "4.872842129605613`", ",", "9.397303016291215`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630205079740896`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15129881968432418`", ",", "0.9502314454957479`", ",", 
     "0.13604726334127493`", ",", "0.9535026769750792`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15129881968432418`, 0.9502314454957479, 0.13604726334127493`, 
   0.9535026769750792}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020507977093*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9987886831478922`", ",", "0.9988273634137762`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9987886831478922, 0.9988273634137762}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630205079790936`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.59154129333333333333333333333333333333`9.590624742648062"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.59154129333333333333333333333333333333`9.590624742648062],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630205079810953`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630205086205482`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630205086225653`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061`", ",", "0.9636626901326487`"}], "}"}]], "Print",
 CellChangeTimes->{3.663020508624552*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630205086495724`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "5.13384274666666666666666666666666666667`9.639108809999271"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   5.13384274666666666666666666666666666667`9.639108809999271],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630208166801343`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1501205709124408`", ",", "0.9527723238478278`", ",", 
     "0.1405866019757147`", ",", "0.9539706548942168`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1501205709124408, 0.9527723238478278, 0.1405866019757147, 
   0.9539706548942168}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020912680252*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.7222769133938632`", ",", "0.6373572170587958`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.7222769133938632, 0.6373572170587958}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663020912682253*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630209126852565`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "3.053633385`9.413483143271039"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.053633385`9.413483143271039],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630210958982563`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630211915951576`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"25.605089302539213`", ",", "7.806035789720773`"}], "}"}]], "Print",
 CellChangeTimes->{3.66302119159716*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630211915991616`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "37.186408368588445`", ",", "67.00263541606438`", ",", "79.85041371996604`",
    ",", "89.4845216323158`", ",", "91.8544873519457`", ",", 
   "95.64225981682691`", ",", "97.09053447418587`", ",", "98.1461186232351`", 
   ",", "99.50156952665512`", ",", "0.8505735911304773`", ",", "11.20225`", 
   ",", "3.0780714285714286`", ",", "5.660152011408968`", ",", 
   "7.216494080062695`"}], "}"}]], "Print",
 CellChangeTimes->{3.663021191601162*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14250108163330527`", ",", "0.9559063768901932`", ",", 
     "0.13873181495633136`", ",", "0.9555533300956938`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14250108163330527`, 0.9559063768901932, 0.13873181495633136`, 
   0.9555533300956938}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021191604164*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9580654866586154`", ",", "0.9382548056669061`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9580654866586154, 0.9382548056669061}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021191606166*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "11.39291726666666666666666666666666666667`9.98530119183766"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   11.39291726666666666666666666666666666667`9.98530119183766],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630211916081676`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663021192300658*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630211923026605`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061`", ",", "0.9577717409220927`"}], "}"}]], "Print",
 CellChangeTimes->{3.663021192305663*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302119232968*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "4.5017609`9.582048673005374"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.5017609`9.582048673005374],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021462435335*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14328913307738883`", ",", "0.9533092602362876`", ",", 
     "0.1270248874142832`", ",", "0.9566590845033618`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14328913307738883`, 0.9533092602362876, 0.1270248874142832, 
   0.9566590845033618}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021559033877*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999137460839318`", ",", "0.98747198958758`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999137460839318, 0.98747198958758}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630215590358796`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302155903788*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.22912214`9.018261289842819"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.22912214`9.018261289842819],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021632781204*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663021728050804*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"20.496353796036498`", ",", "6.769466899318389`"}], "}"}]], "Print",
 CellChangeTimes->{3.663021728052806*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630217280548077`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "42.0627067028681`", ",", "71.19436849012685`", ",", "82.18046389092052`", 
   ",", "89.83926840780778`", ",", "91.86149838381003`", ",", 
   "95.4747255698137`", ",", "96.95227615769552`", ",", "98.0489101155422`", 
   ",", "99.47472054647325`", ",", "0.8595087411512099`", ",", 
   "10.059482142857142`", ",", "3.9777857142857145`", ",", 
   "4.923171547442406`", ",", "9.152882082806205`"}], "}"}]], "Print",
 CellChangeTimes->{3.66302172805781*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14774850219407407`", ",", "0.9518308856492737`", ",", 
     "0.13674568952410715`", ",", "0.9536939866369518`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14774850219407407`, 0.9518308856492737, 0.13674568952410715`, 
   0.9536939866369518}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630217280608125`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996881784823899`", ",", "0.9962853443676274`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996881784823899, 0.9962853443676274}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630217280628138`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "8.94061054833333333333333333333333333333`9.88003342570486"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   8.94061054833333333333333333333333333333`9.88003342570486],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630217280658154`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.663021728670243*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663021728672245*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061`", ",", "0.9569895272180394`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630217286742477`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630217286992645`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "2.23760436`9.278449547808146"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.23760436`9.278449547808146],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630218629555264`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14871376161334482`", ",", "0.9512956759001494`", ",", 
     "0.12666011281261258`", ",", "0.9566013583960196`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14871376161334482`, 0.9512956759001494, 0.12666011281261258`, 
   0.9566013583960196}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021958525339*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9982800916330369`", ",", "0.9937226273958117`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9982800916330369, 0.9937226273958117}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302195852734*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021958529341*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.51594942833333333333333333333333333333`8.641273383811626"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.51594942833333333333333333333333333333`8.641273383811626],
  Editable->False]], "Print",
 CellChangeTimes->{3.663021989481303*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630220845717773`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.971562651753423`", ",", "6.657667336673715`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022084573778*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663022084575778*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "45.26925824062538`", ",", "72.20848793024814`", ",", "82.5619703907063`", 
   ",", "89.92041464306585`", ",", "91.87302893754756`", ",", 
   "95.44709392290429`", ",", "96.9302915574762`", ",", "98.03481083558908`", 
   ",", "99.4710633505131`", ",", "0.862805461700206`", ",", 
   "9.798642857142857`", ",", "4.120357142857143`", ",", "4.849256700190518`",
    ",", "9.569758076398502`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022084578781*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13995757787988464`", ",", "0.9541263284918163`", ",", 
     "0.11684937991945599`", ",", "0.960030664130809`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13995757787988464`, 0.9541263284918163, 0.11684937991945599`, 
   0.960030664130809}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630220845817842`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9990393346076065`", ",", "0.9984775559584127`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9990393346076065, 0.9984775559584127}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022084583784*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "5.94168262833333333333333333333333333333`9.702575698705054"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   5.94168262833333333333333333333333333333`9.702575698705054],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022084586787*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630220851782084`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.6630220851802073`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061`", ",", "0.9567321046582692`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630220851822095`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630220852072268`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.23627720166666666666666666666666666667`9.020782108658093"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.23627720166666666666666666666666666667`9.020782108658093],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630221593828583`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1524327820852459`", ",", "0.9499666182708264`", ",", 
     "0.14175029450990073`", ",", "0.9514690440767871`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1524327820852459, 0.9499666182708264, 0.14175029450990073`, 
   0.9514690440767871}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630222548956313`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9960698532823158`", ",", "0.995613055662489`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9960698532823158, 0.995613055662489}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630222548976336`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022254899634*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.28331769`8.380939940383556"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.28331769`8.380939940383556],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630222718946934`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630223668840933`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.831391880807015`", ",", "6.6279503364587935`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630223668870955`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663022366888095*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "46.12696821027016`", ",", "72.54853370005257`", ",", "82.80974466290478`", 
   ",", "90.02409197134716`", ",", "91.95781028188246`", ",", 
   "95.48874204295946`", ",", "96.95619922197767`", ",", "98.0501398657582`", 
   ",", "99.47443620642056`", ",", "0.8645044689762269`", ",", "9.7595`", ",",
    "4.195285714285714`", ",", "4.820764872120323`", ",", 
   "9.695935432256254`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630223668900967`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14482310481665145`", ",", "0.952403735579645`", ",", 
     "0.1272135775398059`", ",", "0.9564778288560256`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14482310481665145`, 0.952403735579645, 0.1272135775398059, 
   0.9564778288560256}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022366893099*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9984245457254598`", ",", "0.998563411068116`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9984245457254598, 0.998563411068116}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022366896102*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.70487170833333333333333333333333333333`9.601214033869974"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.70487170833333333333333333333333333333`9.601214033869974],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630223668981037`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630223675165415`*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663022367518543*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0061`", ",", "0.9566148528694454`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630223675205455`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022367545562*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.73073515666666666666666666666666666667`8.792426250564322"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.73073515666666666666666666666666666667`8.792426250564322],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022411388671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1512724590885901`", ",", "0.9503447978114992`", ",", 
     "0.13754267479839277`", ",", "0.9528697851444942`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1512724590885901, 0.9503447978114992, 0.13754267479839277`, 
   0.9528697851444942}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022505808668*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9959535251730509`", ",", "0.995523107332349`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9959535251730509, 0.995523107332349}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022505810669*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630225058126707`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.26235279833333333333333333333333333333`8.347551949089398"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.26235279833333333333333333333333333333`8.347551949089398],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022521549837*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630226172697563`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.675159399475664`", ",", "6.594529869397953`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022617272759*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630226172747593`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "41.15159201050662`", ",", "71.58896824519513`", ",", "82.36296087876828`", 
   ",", "89.85055193228654`", ",", "91.83336414290608`", ",", 
   "95.43575720799652`", ",", "96.92451320881392`", ",", "98.03169111408103`",
    ",", "99.47071932884897`", ",", "0.8595136664177965`", ",", "9.912375`", 
   ",", "4.187339285714286`", ",", "4.820281721475193`", ",", 
   "9.405040389562327`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022617276761*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15427809080725952`", ",", "0.9491699027091891`", ",", 
     "0.14291200844222762`", ",", "0.9511452021275182`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15427809080725952`, 0.9491699027091891, 0.14291200844222762`, 
   0.9511452021275182}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022617279765*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9981924229297522`", ",", "0.9992712993749737`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9981924229297522, 0.9992712993749737}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630226172817645`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "4.17277751333333333333333333333333333333`9.549091477569677"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   4.17277751333333333333333333333333333333`9.549091477569677],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630226172837667`*^9}],

Cell[BoxData["\<\"-----------------------------------------\"\>"], "Print",
 CellChangeTimes->{3.6630226173217926`*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.663022617323794*^9}],

Cell[BoxData["\<\" Difference beteen approximated points of \[Beta] (\
\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \
\[Beta]middle+\[EmptyDownTriangle]\"\>"], "Print",
 CellChangeTimes->{3.663022617325796*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.006`", ",", "0.9570377517504659`", ",", "0.9360377517504659`", ",", 
   "0.9780377517504659`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022617327798*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find parameter values for \[Beta]-Dist model \
with time pref factors approximated by seven points (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "105.78964688833333333333333333333333333333`10.953109415732612"}],
  SequenceForm[
  " Time spent to find parameter values for \[Beta]-Dist model with time pref \
factors approximated by seven points (minutes):  ", 
   105.78964688833333333333333333333333333333`10.953109415732612],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630226173858395`*^9}],

Cell[BoxData["\<\" Matrix for \[EmptyDownTriangle]/3.5, \[Beta]middle, \
KLevMean, SumOfDevSq:\"\>"], "Print",
 CellChangeTimes->{3.6630226173878407`*^9}]
}, Open  ]],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0.0059`", "0.9571955042955442`", "19.717104312104002`", 
      "9.465493310088384`"},
     {"0.006`", "0.9570377517504659`", "19.803870113850255`", 
      "9.397303016291215`"},
     {"0.0061`", "0.9566148528694454`", "19.675159399475664`", 
      "9.405040389562327`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.6630226173888397`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663022617431872*^9}],

Cell[BoxData["\<\"Run \[Beta]-Dist model with time pref factors approximated \
by seven points\"\>"], "Print",
 CellChangeTimes->{3.663022617433875*^9}],

Cell[BoxData["\<\"Using parameter values estimated by matching liquid \
FINANCIAL assets plus retirement assets\"\>"], "Print",
 CellChangeTimes->{3.6630226174378757`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630226174398785`*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6630226174508867`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663022618352523*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.035422783383458424`", ",", "0.021116875842012918`", ",", 
   "0.5961382428201276`", ",", "0.15061341673470724`", ",", 
   "4.251879788899933`", ",", "0.8137181346633343`", ",", 
   "0.7640037151111625`", ",", "0.7840806378715673`", ",", 
   "0.9819712675336542`", ",", "0.8878460340722755`", ",", 
   "0.6065890997339303`", ",", "0.7104189932218934`", ",", 
   "6.6117707110745565`"}], "}"}]], "Print",
 CellChangeTimes->{3.663022618355527*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630226183575277`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.23590585671491238`", ",", "0.860695918377116`", ",", 
   "0.154979303236924`", ",", "0.11081033875611751`", ",", 
   "0.8629847511869324`", ",", "0.2790086919461096`", ",", 
   "0.7207486018463911`", ",", "0.6867132973017785`", ",", 
   "0.8134826807016882`", ",", 
   RowBox[{"-", "0.10588219564504728`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630226183605294`*^9}],

Cell[BoxData["\<\" Mean of K (level), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663022618362531*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"19.726767315657256`", ",", "6.6117707110745565`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630226183645334`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.6630226183665347`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.16153215320396996`", ",", "0.9471823504748965`", ",", 
   "0.14460315382377908`", ",", "0.9502300561419714`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630226183695374`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.9146472`7.111768607046589"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.9146472`7.111768607046589],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022618371539*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.66302261837454*^9}],

Cell[BoxData["\<\"Running \[Beta]-Dist model with time pref factors \
approximated by seven points... \"\>"], "Print",
 CellChangeTimes->{3.663022618376541*^9}],

Cell[BoxData["\<\"\[EmptyDownTriangle]/3.5, \[Beta]middle: \"\>"], "Print",
 CellChangeTimes->{3.663022618957955*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.006`", ",", "0.9570377517504659`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630226189599543`*^9}],

Cell[BoxData["\<\"Generated steady state distribution of Pt\"\>"], "Print",
 CellChangeTimes->{3.6630226404702177`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to generate steady state distribution of Pt \
(minutes): \"\>", "\[InvisibleSpace]", 
   "0.35853771333333333333333333333333333333`8.48320109254615"}],
  SequenceForm[
  " Time spent to generate steady state distribution of Pt (minutes): ", 
   0.35853771333333333333333333333333333333`8.48320109254615],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630226404732213`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630226405052423`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "4.05867987333333333333333333333333333333`9.5370510460893"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   4.05867987333333333333333333333333333333`9.5370510460893],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630228840270357`*^9}],

Cell[BoxData["\<\" Produce initial distribution of capital income \
ratio\"\>"], "Print",
 CellChangeTimes->{3.6630228842622013`*^9}],

Cell[BoxData["\<\" Mean of K (level): \"\>"], "Print",
 CellChangeTimes->{3.6630228873303795`*^9}],

Cell[BoxData["19.677962826043178`"], "Print",
 CellChangeTimes->{3.6630228873333817`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.11949572760405996`", ",", "0.9607931045958877`", ",", 
     "0.11557518381583634`", ",", "0.9603368912331751`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.11949572760405996`, 0.9607931045958877, 0.11557518381583634`, 
   0.9603368912331751}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022983569667*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9982529522855594`", ",", "0.9989596566187309`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9982529522855594, 0.9989596566187309}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630229835716686`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.65904383666666666666666666666666666667`9.14852410968961"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.65904383666666666666666666666666666667`9.14852410968961],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630229835746703`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630229835766716`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.15265834333333333333333333333333333333`8.112386793270934"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.15265834333333333333333333333333333333`8.112386793270934],
  Editable->False]], "Print",
 CellChangeTimes->{3.663022992729167*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663023089606907*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.53598495647065`", ",", "71.482252502352`", ",", "82.12587026665587`", 
   ",", "89.71056946350721`", ",", "91.71230764687229`", ",", 
   "95.35892447347672`", ",", "96.86932192632254`", ",", "97.99513226078747`",
    ",", "99.45965208758328`", ",", "0.8594151321340637`", ",", 
   "10.019767857142858`", ",", "4.09325`", ",", "4.871755310517156`", ",", 
   "9.4414869484742`"}], "}"}]], "Print",
 CellChangeTimes->{3.663023089609908*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.13726297487876823`", ",", "0.9548188341589174`", ",", 
     "0.12331771635440315`", ",", "0.957803484342441`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.13726297487876823`, 0.9548188341589174, 0.12331771635440315`, 
   0.957803484342441}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630230896129103`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995693521694392`", ",", "0.9992613232305826`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995693521694392, 0.9992613232305826}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023089614912*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.614629005`9.136738998046612"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.614629005`9.136738998046612],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630230896169133`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023089618914*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.11813380666666666666666666666666666667`8.001040446826474"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.11813380666666666666666666666666666667`8.001040446826474],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023096694936*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630231931273613`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.84318746862568`", ",", "71.76245338873834`", ",", "82.26987032778662`", 
   ",", "89.72206188970632`", ",", "91.71304055039342`", ",", 
   "95.35418711466595`", ",", "96.86578634131561`", ",", "97.99323189981564`",
    ",", "99.46060160836939`", ",", "0.860000375137166`", ",", 
   "10.023589285714285`", ",", "4.102035714285714`", ",", 
   "4.867932931013697`", ",", "9.499427309684513`"}], "}"}]], "Print",
 CellChangeTimes->{3.66302319312936*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1441464300048368`", ",", "0.952509134623888`", ",", 
     "0.1338408341977016`", ",", "0.9543075760694979`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1441464300048368, 0.952509134623888, 0.1338408341977016, 
   0.9543075760694979}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630231931313615`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999638969227463`", ",", "0.9994684887709553`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999638969227463, 0.9994684887709553}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023193134365*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.60720708833333333333333333333333333333`9.134738087347356"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.60720708833333333333333333333333333333`9.134738087347356],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023193136365*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630231931383677`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.12450498666666666666666666666666666667`8.023852994333701"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.12450498666666666666666666666666666667`8.023852994333701],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630232005976596`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630232985911922`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.6162171125611`", ",", "71.53293873347418`", ",", "82.11113665126122`", 
   ",", "89.68955303100185`", ",", "91.70378615127302`", ",", 
   "95.35539222395944`", ",", "96.86618791301478`", ",", "97.99188837926314`",
    ",", "99.45731555394471`", ",", "0.8592984497502787`", ",", 
   "10.215464285714285`", ",", "4.094714285714286`", ",", 
   "4.881997935824723`", ",", "9.410729531759301`"}], "}"}]], "Print",
 CellChangeTimes->{3.663023298594194*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15294667089516992`", ",", "0.9495525835171303`", ",", 
     "0.14031429149067223`", ",", "0.952138825121464`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15294667089516992`, 0.9495525835171303, 0.14031429149067223`, 
   0.952138825121464}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630232985961957`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9992958221676221`", ",", "0.9994552707024252`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9992958221676221, 0.9994552707024252}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630232985991974`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.633208855`9.141707974148943"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 1.633208855`9.141707974148943],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630232986012*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630232986032004`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.13010899333333333333333333333333333333`8.042973564915973"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.13010899333333333333333333333333333333`8.042973564915973],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023306397732*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663023403024293*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "42.68050881332743`", ",", "71.35154653225369`", ",", "82.06253311344788`", 
   ",", "89.62030269921169`", ",", "91.64941762595625`", ",", 
   "95.32561548876619`", ",", "96.84555668849713`", ",", "97.97863996186975`",
    ",", "99.45439130398441`", ",", "0.8582481374521916`", ",", 
   "10.196160714285714`", ",", "4.100232142857143`", ",", 
   "4.878449027731958`", ",", "9.397644442652739`"}], "}"}]], "Print",
 CellChangeTimes->{3.663023403027295*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.15213080355513797`", ",", "0.9498189955726453`", ",", 
     "0.14210364666514402`", ",", "0.9515283000345922`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.15213080355513797`, 0.9498189955726453, 0.14210364666514402`, 
   0.9515283000345922}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023403029297*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9996507127921276`", ",", "0.9993784005193186`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9996507127921276, 0.9993784005193186}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023403031299*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "1.61045937166666666666666666666666666667`9.13561602121888"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   1.61045937166666666666666666666666666667`9.13561602121888],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630234030343013`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.663023403035301*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.05151988166666666666666666666666666667`7.640641105060155"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.05151988166666666666666666666666666667`7.640641105060155],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630234061164875`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630242176022825`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "43.87970520276204`", ",", "71.65647473636905`", ",", "82.21171184789371`", 
   ",", "89.7235872160572`", ",", "91.72876571453091`", ",", 
   "95.37247355356676`", ",", "96.88008055712747`", ",", "98.00246652053366`",
    ",", "99.4622071924313`", ",", "0.8599977810545387`", ",", 
   "10.121071428571428`", ",", "4.111742857142857`", ",", "4.87738326731328`",
    ",", "9.394303663882773`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630242176042843`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1571659570676222`", ",", "0.94813596944315`", ",", 
     "0.14625048987316172`", ",", "0.9501470603361445`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1571659570676222, 0.94813596944315, 0.14625048987316172`, 
   0.9501470603361445}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630242176072865`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999858722820409`", ",", "0.9997572328913963`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999858722820409, 0.9997572328913963}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630242176092877`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "13.52474658166666666666666666666666666667`10.059795384529185"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   13.52474658166666666666666666666666666667`10.059795384529185],
  Editable->False]], "Print",
 CellChangeTimes->{3.663024217611289*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630242176132913`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.10022110333333333333333333333333333333`7.9296254277929235"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.10022110333333333333333333333333333333`7.9296254277929235],
  Editable->False]], "Print",
 CellChangeTimes->{3.663024223615551*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.6630242238607235`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663024890737911*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025558726888*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663025694022891*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03240891707690767`", ",", "0.021750249919150425`", ",", 
   "0.6711193054533788`", ",", "0.09689199450130612`", ",", 
   "2.989670844952255`", ",", "0.765648520834107`", ",", 
   "0.9568452286049728`", ",", "0.8322153236998501`", ",", 
   "0.8614962752735578`", ",", "0.9436133482105029`", ",", 
   "0.6090562002656951`", ",", "0.6768188641834448`", ",", 
   "6.619390740391829`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630256940268917`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630256940299006`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "0.00680397881485148`"}], ",", "0.9890432100996535`", ",", 
   "0.013191193392860361`", ",", 
   RowBox[{"-", "0.006279713729279891`"}], ",", "0.5860890629397546`", ",", 
   RowBox[{"-", "0.16059216223569323`"}], ",", "0.9770230482034551`", ",", 
   "0.9708983588207823`", ",", "0.7656417958925653`", ",", 
   RowBox[{"-", "0.08786773668795463`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630256940328965`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663025694034897*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "45.2180220219808`", ",", "72.00782825639455`", ",", "82.36504287877608`", 
   ",", "89.78740191212145`", ",", "91.77231016016069`", ",", 
   "95.39242927886178`", ",", "96.89280675572873`", ",", "98.01017203142047`",
    ",", "99.46398586366563`", ",", "0.8615525081629518`", ",", 
   "10.044283928571428`", ",", "4.106058928571429`", ",", 
   "4.871637884423524`", ",", "9.469082916809615`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630256940368986`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.43745631390036255`"}],
  SequenceForm[" MPC mean:", 0.43745631390036255`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630256940399003`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630256940419016`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.17567977253052502`", ",", "0.2768616892561986`", ",", 
   "0.30941471504652207`", ",", "0.3447560188749784`", ",", 
   "0.3692384764168051`", ",", "0.5292182750970627`", ",", 
   "0.6087065893688294`", ",", "0.47292643125149936`", ",", 
   "0.5094442889879287`", ",", "0.5775265321189361`"}], "}"}]], "Print",
 CellChangeTimes->{3.663025694043903*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663025694046905*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.11858853268454372`", ",", "0.12176344547380002`", ",", 
   "0.13452968868850523`", ",", "0.2023784943903877`", ",", 
   "0.27857061634272273`", ",", "0.6247235434156835`", ",", 
   "0.7141099998914946`", ",", "0.5153840093979292`", ",", 
   "0.5926328902761754`", ",", "0.6858134540129593`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630256940489063`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.3966911222574938`", ",", "0.8058789012040836`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.3966911222574938, 0.8058789012040836}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025694050908*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1584560851194274`", ",", "0.9477174385245055`", ",", 
     "0.14681305800665795`", ",", "0.9499698952005282`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1584560851194274, 0.9477174385245055, 0.14681305800665795`, 
   0.9499698952005282}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630256940539103`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998699663288733`", ",", "0.9997913936975213`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998699663288733, 0.9997913936975213}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025694055912*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "24.50693911166666666666666666666666666667`10.317955319976683"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   24.50693911166666666666666666666666666667`10.317955319976683],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025694057913*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "51.27801803`10.63859747893722"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 51.27801803`10.63859747893722],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630256950476184`*^9}],

Cell[BoxData["\<\" Figure of MPC comparison\"\>"], "Print",
 CellChangeTimes->{3.6630256995167866`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQfUH/ucxSm9X2DFAQkG6nh+CLOAQc3pFpcA3GV3EQ
YFPbe6JgA5Sv53DDesac3pcwvolDwJuFl9l2bYLyLR0M+h/UTW3fCuXbOQg8
2vbIXWYnhN/g6LDAhtOhvfIgVN7FIcTPeK7zFyi/wc3hzB4uDr2vR6Hyng4a
ay//3Tn3JFTe24FjR70B97YzUHk/B4nHc8omLjgH4TsEOLxJZeeye3sBqj7Q
YYVp+JXLAZcg/ANBDm+OzJtcP+8yVH+Iw7v1644dYrsK1R/qUHdaQIjhznWo
/jAHLltpDct3t6H6wx2WlCq8vT3/LlR/hEP0TPEulvQHUP0RDm+mu1Wf+fEQ
qj/C4Z/jwqIVDM+h+iMc7lwy6////z1Uf6QDAH6HeXw=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQLWG0g9Miep89AxRE3PUQWT0Jxhdx6NgrmKkTvR/K
V3G44qRefkn1MJSv52DTmr5sY/MRKN/EQeJx8tZ7AqegfEuHBRvNTruEXYDy
7RxWfahzzZ99CcJvcHSI+DBrax3vVai8i0PBr0N+Tp3XofJuDnkzBW6/OAnl
M3g6LAsJnvMq7RZU3tvhRMtSL5aFd6Dyfg5/FhjXn+i7B+E7BDg47Z78wCvk
PlR9oMOj55cPh856AOEfCHJwWvtCxTznIVR/iMO2fS0/beoeQfWHOkxibZPm
eP0Yqj/M4WWw6uL7ss+g+sMd7CaZBzadgvIZIhy4VgT82pr+Aqo/wiHpvUmk
68VXUP0RDnqGZjJ7vr6F6o9wuOJX/Pj///dQ/ZEOACUXe6Q=
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.045, 0.045}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQXdAb+eqa7hJ7BihYwGKqtHkXjC/igMpXcbhQ4bvC
4OJSKF/P4YBDIBLfBI1vica3Q+U3OKLJuzgoGKueCf8Jk3dzaPh75XTdyuVQ
eU+HBYduIPgN3qh8Bj9UvkMAmvpAVP6BIIcAE+NK1+mroPpDUPkOoaj8hjAH
h9M8Cj+fr4PqD0flM0Q4GLDGBZuHbYLqj3CQuBeP4DcA5TUMZnv+2ArVH+Ew
o/Hy17W9p6D6Ix0Absl3ow==
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.03, 0.03}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQXTC3p9q6doE9AxQE9DbUIPgiDgGbVWYedl0K5as4
fDgxF4mv57Bg9v4rt8+tgPJNHHacskx4HrAByrd0WLHMGolvh8pvcHRYES/J
OTN2M1TeBZXf4IYm7+kgYC6NJO/tsGDxeaFYwa1QeT+HDH8z3kPa2yF8hwBU
fkMgKv9AkMOGSd+8v+3dDdUf4nDlUPX+u00HoPpDHXyMJqW0uB6G6g9zYFCa
bfTC4hhUf7jDn7/fc5rOnIDqj3C481zEccLvU1D9EQ4SBr8adWafgeqPcFgj
sWVbt95FqP4Ih+/l+xb8/v8eqj/SAQBnnXYW
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[{{0.85, 20.}, {0.99, 20.}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[{{0.85, 10.}, {0.99, 10.}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.03, 0.03}], 
      LineBox[{{0.85, 30.}, {0.99, 30.}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.045, 0.045}], 
      LineBox[{{0.85, 40.}, {0.99, 40.}}]}}, {}}, 
   InsetBox["\<\"Annual MPC\"\>", {0.78, -8}, {-1, 0}], 
   InsetBox["\<\"KS-JEDC\"\>", {0.83, 40}, {1, 0}], 
   InsetBox["\<\"KS-Hetero\"\>", {0.83, 30}, {1, 0}], 
   InsetBox["\<\"Matching net worth\"\>", {0.83, 20}, {1, 0}], 
   InsetBox["\<\"Matching liquid financial + retirement assets\"\>", \
{0.83, 10}, {1, 0}], InsetBox["\<\" Percentile\"\>", {87, -0.1}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, 
    FormBox["\"Percentile\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->29,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 1}, {0, 100}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {0.25, 
      FormBox["0.25`", TraditionalForm]}, {0.5, 
      FormBox["0.5`", TraditionalForm]}, {0.75, 
      FormBox["0.75`", TraditionalForm]}, {1, 
      FormBox["1", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {25, 
      FormBox["25", TraditionalForm]}, {50, 
      FormBox["50", TraditionalForm]}, {75, 
      FormBox["75", TraditionalForm]}, {100, 
      FormBox["100", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{3.6630256995287957`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6630256995708237`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663025700393407*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151333`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663966`", ",", "0.10618025700090113`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133834`", ",", "0.7054024753403315`", ",", 
   "0.987648408628959`", ",", "0.940222875080717`", ",", 
   "0.6753895677023233`", ",", "0.7273964276788892`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630257003984113`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630257004004135`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2434881284855772`", ",", "0.8403562070237575`", ",", 
   "0.1470787509349106`", ",", "0.10757403488551805`", ",", 
   "0.8613280423351569`", ",", "0.28313368709839476`", ",", 
   "0.6663671970124141`", ",", "0.60865067515029`", ",", 
   "0.7979901621977178`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630257004034157`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.663025700406418*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630257004084187`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8345922`7.07198931936178"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8345922`7.07198931936178],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630257004104204`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663025700412421*^9}],

Cell[BoxData["\<\"Alt params\"\>"], "Print",
 CellChangeTimes->{3.663025700414423*^9}],

Cell[BoxData["\<\"Models with aggregate shocks\"\>"], "Print",
 CellChangeTimes->{3.6630257004174314`*^9}],

Cell[BoxData["\<\"High variance of tran shocks\"\>"], "Print",
 CellChangeTimes->{3.6630257004314346`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663025700476467*^9}],

Cell[BoxData["\<\"Run \[Beta]-Point model\"\>"], "Print",
 CellChangeTimes->{3.6630257004794693`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630257004804726`*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6630257004864745`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630257013150606`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151333`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663966`", ",", "0.10618025700090113`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133834`", ",", "0.7054024753403315`", ",", 
   "0.987648408628959`", ",", "0.940222875080717`", ",", 
   "0.6753895677023233`", ",", "0.7273964276788892`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630257013180647`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630257013200665`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2434881284855772`", ",", "0.8403562070237575`", ",", 
   "0.1470787509349106`", ",", "0.10757403488551805`", ",", 
   "0.8613280423351569`", ",", "0.28313368709839476`", ",", 
   "0.6663671970124141`", ",", "0.60865067515029`", ",", 
   "0.7979901621977178`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630257013230667`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.6630257013250694`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.663025701328071*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8395967`7.074585720769262"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8395967`7.074585720769262],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025701330073*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630257013330746`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Point model... \"\>"], "Print",
 CellChangeTimes->{3.6630257013350754`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630257019164896`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1400196463128881`", ",", "0.9626970812661084`", ",", 
     "0.12348964895510084`", ",", "0.9657469237812493`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1400196463128881, 0.9626970812661084, 0.12348964895510084`, 
   0.9657469237812493}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025849845454*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9960841698456684`", ",", "0.9948568451419496`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9960841698456684, 0.9948568451419496}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025849849455*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630258498524585`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1424855258566187`", ",", "0.9620738364041674`", ",", 
     "0.12453945367412869`", ",", "0.9655178373378341`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1424855258566187, 0.9620738364041674, 0.12453945367412869`, 
   0.9655178373378341}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025933486801*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9987288702984009`", ",", "0.9983838167852901`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9987288702984009, 0.9983838167852901}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630259334898024`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.663025933491805*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14242269714574915`", ",", "0.9621119045507214`", ",", 
     "0.12646246694966443`", ",", "0.9650283848748831`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14242269714574915`, 0.9621119045507214, 0.12646246694966443`, 
   0.9650283848748831}],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302601267599*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9993154956415552`", ",", "0.9992144120637962`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9993154956415552, 0.9992144120637962}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630260126789927`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630260126809936`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14363285511529825`", ",", "0.9617915596971921`", ",", 
     "0.1268578802486579`", ",", "0.9649376860047038`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14363285511529825`, 0.9617915596971921, 0.1268578802486579, 
   0.9649376860047038}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026087193865*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9994579196533394`", ",", "0.9994667314450766`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9994579196533394, 0.9994667314450766}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026087196868*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630260871988688`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14244258477069988`", ",", "0.9621166085163082`", ",", 
     "0.1261475912432506`", ",", "0.9651379587333158`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14244258477069988`, 0.9621166085163082, 0.1261475912432506, 
   0.9651379587333158}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630261587806597`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995564288457573`", ",", "0.9995504508514491`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995564288457573, 0.9995504508514491}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630261587836614`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630261587856627`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14230307625288557`", ",", "0.9621573489338706`", ",", 
     "0.1261086354909699`", ",", "0.9651548924366824`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14230307625288557`, 0.9621573489338706, 0.1261086354909699, 
   0.9651548924366824}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630262281708956`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995127237901753`", ",", "0.9995970207484854`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995127237901753, 0.9995970207484854}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630262281738977`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630262281758995`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by the \
Point model (dropping samples if annual income is below 20 percent of the \
7-year average): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.010990381172321317`", ",", "0.19897518493770075`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by the Point model \
(dropping samples if annual income is below 20 percent of the 7-year \
average): ", {0.010990381172321317`, 0.19897518493770075`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630264045010123`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.663026404504015*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.032761718418054656`", ",", "0.014384477928149873`", ",", 
   "0.43906359686623553`", ",", "0.10161752846235803`", ",", 
   "3.1017154584405935`", ",", "0.764978869534614`", ",", 
   "0.7082876740657779`", ",", "0.7185188589539123`", ",", 
   "0.9658142120744211`", ",", "0.9584640483472061`", ",", 
   "0.6617079348830279`", ",", "0.7097462862096481`", ",", 
   "10.42390553804522`"}], "}"}]], "Print",
 CellChangeTimes->{3.663026404507016*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663026404509018*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.14511890874887903`", ",", "0.8797341301602651`", ",", 
   "0.13330798732095758`", ",", "0.09342940950925287`", ",", 
   "0.786614140920063`", ",", "0.1407954554662049`", ",", 
   "0.785637793366347`", ",", "0.7331804736412242`", ",", 
   "0.7648574585001521`", ",", 
   RowBox[{"-", "0.10319800319612636`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630264045130205`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.663026404515022*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "8.723803790160394`", ",", "23.388538069896132`", ",", 
   "35.096236984496095`", ",", "51.759362502019926`", ",", 
   "58.32675287770945`", ",", "73.91087498204307`", ",", "81.82277912323316`",
    ",", "88.1944335504246`", ",", "96.90974168899545`", ",", 
   "0.4808886815266184`", ",", "47.2097625`", ",", "1.4131875`", ",", 
   "38.94325113200587`", ",", "1529.51308884217`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630264045180244`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.13299569341668704`"}],
  SequenceForm[" MPC mean:", 0.13299569341668704`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026404520026*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663026404522028*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0936426800233141`", ",", "0.1309336940436031`", ",", 
   "0.1381210633033294`", ",", "0.14126044073453126`", ",", 
   "0.14188847146560457`", ",", "0.11952715322568319`", ",", 
   "0.10776595003859846`", ",", "0.1320473983451007`", ",", 
   "0.12347202620336761`", ",", "0.11283824754601979`"}], "}"}]], "Print",
 CellChangeTimes->{3.663026404525031*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663026404527031*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06792147279736582`", ",", "0.06792147291543038`", ",", 
   "0.06800725756351167`", ",", "0.06971103764723008`", ",", 
   "0.07198057551695614`", ",", "0.21881468720848052`", ",", 
   "0.33486761076417304`", ",", "0.1537010688048538`", ",", 
   "0.19204127874098653`", ",", "0.29159133239119517`"}], "}"}]], "Print",
 CellChangeTimes->{3.663026404529032*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12413722091923796`", ",", "0.24047395719869702`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.12413722091923796`, 0.24047395719869702`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630264045310335`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14308406684101016`", ",", "0.9619456603850463`", ",", 
     "0.12688285650801584`", ",", "0.9649488700192539`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14308406684101016`, 0.9619456603850463, 0.12688285650801584`, 
   0.9649488700192539}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630264045330353`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9995489024142487`", ",", "0.9995609553275572`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9995489024142487, 0.9995609553275572}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026404535036*^9}],

Cell[BoxData["\<\" Consumption function\"\>"], "Print",
 CellChangeTimes->{3.663026404538039*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Point model(minutes): \"\>", 
   "\[InvisibleSpace]", "11.818736075`10.001237282713221"}],
  SequenceForm[
  " Time spent to run \[Beta]-Point model(minutes): ", 
   11.818736075`10.001237282713221],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026410451235*^9}],

Cell[BoxData["\<\"High variance of perm shocks\"\>"], "Print",
 CellChangeTimes->{3.6630264104542365`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6630264104982696`*^9}],

Cell[BoxData["\<\"Run \[Beta]-Point model\"\>"], "Print",
 CellChangeTimes->{3.663026410500269*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630264105022707`*^9}],

Cell[BoxData["\<\"Running rep agent model with aggregate shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.6630264105122805`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630264113848963`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03420074782151333`", ",", "0.017021583145074595`", ",", 
   "0.49769622681663966`", ",", "0.10618025700090113`", ",", 
   "3.1046179912507776`", ",", "0.7982230638364417`", ",", 
   "0.6816203176133834`", ",", "0.7054024753403317`", ",", 
   "0.9876484086289592`", ",", "0.940222875080717`", ",", 
   "0.6753895677023233`", ",", "0.7273964276788892`", ",", 
   "10.26955729458785`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630264113878994`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663026411390901*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.24348812848557735`", ",", "0.8403562070237575`", ",", 
   "0.14707875093491063`", ",", "0.10757403488551805`", ",", 
   "0.8613280423351569`", ",", "0.28313368709839476`", ",", 
   "0.6663671970124141`", ",", "0.60865067515029`", ",", 
   "0.7979901621977175`", ",", 
   RowBox[{"-", "0.1110796512919512`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630264113929033`*^9}],

Cell[BoxData["\<\" Estimates of agg process:\"\>"], "Print",
 CellChangeTimes->{3.6630264113959055`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13851774432594022`", ",", "0.9630167380396836`", ",", 
   "0.12092567814745481`", ",", "0.9663324920280181`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630264113979063`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with aggregate shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.8856252`7.097764963499897"}],
  SequenceForm[
  " Time spent to run rep agent model with aggregate shocks (seconds): ", 
   0.8856252`7.097764963499897],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630264114009094`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630264114029093`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Point model... \"\>"], "Print",
 CellChangeTimes->{3.6630264114059114`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630264120043364`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14085861995515736`", ",", "0.9624217103368193`", ",", 
     "0.12387274220499378`", ",", "0.965592706134905`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14085861995515736`, 0.9624217103368193, 0.12387274220499378`, 
   0.965592706134905}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026551773511*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.99916788319787`", ",", "0.9984567779256565`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.99916788319787, 0.9984567779256565}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630265517755117`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026551778514*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14119913551951918`", ",", "0.9623480058926224`", ",", 
     "0.12590545984838522`", ",", "0.9650712324574983`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14119913551951918`, 0.9623480058926224, 0.12590545984838522`, 
   0.9650712324574983}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026632894071*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9997269431282714`", ",", "0.9995158582676926`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9997269431282714, 0.9995158582676926}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630266328970723`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630266328990726`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14236297243234142`", ",", "0.9620407550503707`", ",", 
     "0.12692305303533624`", ",", "0.9648131403547265`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14236297243234142`, 0.9620407550503707, 0.12692305303533624`, 
   0.9648131403547265}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267090561123`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998169156472445`", ",", "0.9997421330466566`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998169156472445, 0.9997421330466566}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267090591135`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267090611153`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14172651399971675`", ",", "0.9622164836783458`", ",", 
     "0.1274542536988369`", ",", "0.9646792681669795`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14172651399971675`, 0.9622164836783458, 0.1274542536988369, 
   0.9646792681669795}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267835719843`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998716998050288`", ",", "0.9998373413441638`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998716998050288, 0.9998373413441638}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267835749865`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630267835779886`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.1423657086636741`", ",", "0.9620439408855347`", ",", 
     "0.1271495453006359`", ",", "0.9647687753495169`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.1423657086636741, 0.9620439408855347, 0.1271495453006359, 
   0.9647687753495169}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630268554760046`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998423114673523`", ",", "0.9998470852001561`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998423114673523, 0.9998470852001561}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663026855479007*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630268554810085`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14294784525728`", ",", "0.961886256400622`", ",", 
     "0.1280627519561883`", ",", "0.9645247846690059`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14294784525728, 0.961886256400622, 0.1280627519561883, 
   0.9645247846690059}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630269274250574`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.999826714591762`", ",", "0.9998715998208462`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.999826714591762, 0.9998715998208462}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630269274280586`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630269274300604`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Variances of perm shocks and trans shocks implied by the \
Point model (dropping samples if annual income is below 20 percent of the \
7-year average): \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.03758554828823571`", ",", "0.04629061855243573`"}], "}"}]}],
  SequenceForm[
  " Variances of perm shocks and trans shocks implied by the Point model \
(dropping samples if annual income is below 20 percent of the 7-year \
average): ", {0.03758554828823571, 0.04629061855243573}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027107351725*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio: \"\>"], "Print",
 CellChangeTimes->{3.6630271073547277`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.03256280493904463`", ",", "0.014071614851740846`", ",", 
   "0.4321376760411752`", ",", "0.10211501435088731`", ",", 
   "3.135940363308374`", ",", "0.7674858055035719`", ",", "0.70472011575007`",
    ",", "0.7139366260570519`", ",", "0.9660283353592595`", ",", 
   "0.9595187106917789`", ",", "0.6676427328001583`", ",", 
   "0.7160164290827548`", ",", "10.352912461045225`"}], "}"}]], "Print",
 CellChangeTimes->{3.66302710735773*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)),  corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663027107360732*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.14971046524949788`", ",", "0.8963689534432597`", ",", 
   "0.12436641622141664`", ",", "0.09477739430820303`", ",", 
   "0.7878912730511047`", ",", "0.1443114277162266`", ",", 
   "0.7903233321601448`", ",", "0.7357612797926386`", ",", 
   "0.7674499115487482`", ",", 
   RowBox[{"-", "0.09781872868690747`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630271073637342`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%), Frac mRat \
below 2 (%), Median mRat, Sum of Dev Squared: \"\>"], "Print",
 CellChangeTimes->{3.6630271073657365`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "15.763352073296533`", ",", "33.40678888363811`", ",", "45.26756863026699`",
    ",", "60.31105061996793`", ",", "65.8644425146095`", ",", 
   "78.53707202331279`", ",", "84.80590113449045`", ",", "89.8452439062498`", 
   ",", "96.99674999658802`", ",", "0.5593732371145167`", ",", "40.6789125`", 
   ",", "0.3818`", ",", "47.65662419679734`", ",", "865.5712445936449`"}], 
  "}"}]], "Print",
 CellChangeTimes->{3.663027107368738*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.10284977750983426`"}],
  SequenceForm[" MPC mean:", 0.10284977750983426`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027107370739*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630271073727407`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.0998536651804055`", ",", "0.09942029396771668`", ",", 
   "0.10341119372366103`", ",", "0.11455138596271486`", ",", 
   "0.11124223671831224`", ",", "0.0901498196213989`", ",", 
   "0.08543925333166524`", ",", "0.10159447887676654`", ",", 
   "0.09123549050250013`", ",", "0.08839193579518756`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630271073747406`*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630271073767433`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.07761137803659857`", ",", "0.07761137711104804`", ",", 
   "0.0776113767758998`", ",", "0.07839079699167106`", ",", 
   "0.07986661655579508`", ",", "0.13651385337348854`", ",", 
   "0.1831619467715776`", ",", "0.11114632898184662`", ",", 
   "0.12626217750054525`", ",", "0.16529167151368496`"}], "}"}]], "Print",
 CellChangeTimes->{3.663027107379746*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.09401253477526517`", ",", "0.20947610905824865`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.09401253477526517, 0.20947610905824865`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027107381749*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process, by good state and bad state: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.14336010469011187`", ",", "0.9617731670772499`", ",", 
     "0.1284592800097016`", ",", "0.9644187899893724`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process, by good state and bad state: ", {
   0.14336010469011187`, 0.9617731670772499, 0.1284592800097016, 
   0.9644187899893724}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027107383749*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2 if good, R^2 if bad: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.9998317925594243`", ",", "0.9998615577586912`"}], "}"}]}],
  SequenceForm[
  " R^2 if good, R^2 if bad: ", {0.9998317925594243, 0.9998615577586912}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027107386752*^9}],

Cell[BoxData["\<\" Consumption function\"\>"], "Print",
 CellChangeTimes->{3.6630271073877506`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Point model(minutes): \"\>", 
   "\[InvisibleSpace]", 
   "11.69823389833333333333333333333333333333`9.996786548756354"}],
  SequenceForm[
  " Time spent to run \[Beta]-Point model(minutes): ", 
   11.69823389833333333333333333333333333333`9.996786548756354],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630271132939615`*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.663027113296946*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.663027113299946*^9}],

Cell[BoxData["\<\"Models with aggregate permanent shocks\"\>"], "Print",
 CellChangeTimes->{3.6630271133019495`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.6630271134210405`*^9}],

Cell[BoxData["\<\"Run \[Beta]-Point model\"\>"], "Print",
 CellChangeTimes->{3.663027113426064*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.663027113430066*^9}],

Cell[BoxData["\<\"Running rep agent model with permanent shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.663027114353695*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.6630271151072273`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05744877870132316`", ",", "0.059046432572672634`", ",", 
   "1.0278100580633`", ",", "0.056099706021112646`", ",", 
   "0.9765169476060691`", ",", "0.9965784191812694`", ",", 
   "0.9949659616594662`", ",", "0.994831556634029`", ",", 
   "0.9992603749621536`", ",", "0.9545285336164773`", ",", 
   "0.9408156515108294`", ",", "0.9722791946884406`", ",", 
   "10.259205717381175`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630271151102314`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630271151122313`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.09638479524744226`", ",", "0.8432676445957245`", ",", 
   "0.06012135698108243`", ",", "0.047622883260817664`", ",", 
   "0.47933907823574756`", ",", "0.20817745725954465`", ",", 
   "0.9324174143162659`", ",", "0.9486914927886495`", ",", 
   "0.9968964498798544`", ",", 
   RowBox[{"-", "0.15273288432920112`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663027115115239*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with permanent shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.7615413`7.032208458853666"}],
  SequenceForm[
  " Time spent to run rep agent model with permanent shocks (seconds): ", 
   0.7615413`7.032208458853666],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630271151172357`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.663027115119238*^9}],

Cell[BoxData["\<\"Running \[Beta]-Point model ... \"\>"], "Print",
 CellChangeTimes->{3.663027115122239*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630271158407497`*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.663027115843751*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.87426320666666666666666666666666666667`9.201496827924393"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   1.87426320666666666666666666666666666667`9.201496827924393],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027228296543*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12592986369471199`", ",", "0.9653607569848284`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12592986369471199`, 0.9653607569848284}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027254136877*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.926`"}],
  SequenceForm[" R^2: ", 0.926],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302725413988*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.43068893833333333333333333333333333333`8.562829965851263"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.43068893833333333333333333333333333333`8.562829965851263],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630272541428823`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027254144883*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.663027254146885*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", "0.182646265`8.190277043808324"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.182646265`8.190277043808324],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630272650956526`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12626001151435157`", ",", "0.9652582614616216`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12626001151435157`, 0.9652582614616216}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630272909950314`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630272909980326`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.43165630833333333333333333333333333333`8.563804340397448"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.43165630833333333333333333333333333333`8.563804340397448],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630272910000343`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027291002035*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.6630272910040445`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", "0.065563165`7.7453261587769555"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.065563165`7.7453261587769555],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027294929823*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.126219823677575`", ",", "0.9652648578071067`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.126219823677575, 0.9652648578071067}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273211694403`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273211714425`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.43734365333333333333333333333333333333`8.569489076705214"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.43734365333333333333333333333333333333`8.569489076705214],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273211734443`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273211754456`*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.6630273211774473`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", "0.03067177`7.415405087095172"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.03067177`7.415405087095172],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027323010747*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.1264627757005671`", ",", "0.9651962916548225`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.1264627757005671, 0.9651962916548225}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273490902514`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027349093255*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.43465840666666666666666666666666666667`8.56681433188611"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.43465840666666666666666666666666666667`8.56681433188611],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027349095256*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027349097257*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.66302734910026*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.02209901333333333333333333333333333333`7.273039132151672"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.02209901333333333333333333333333333333`7.273039132151672],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027350417194*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12688902280530923`", ",", "0.9650790662237752`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12688902280530923`, 0.9650790662237752}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027376852953*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.924`"}],
  SequenceForm[" R^2: ", 0.924],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273768559546`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.44059597`8.572706768686382"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.44059597`8.572706768686382],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027376857955*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630273768599567`*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.6630273768609576`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.03017140833333333333333333333333333333`7.408261830751258"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.03017140833333333333333333333333333333`7.408261830751258],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027378662235*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.1270082592276534`", ",", "0.9650482811283451`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.1270082592276534, 0.9650482811283451}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027611013101*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630276110151033`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "3.87249777333333333333333333333333333333`9.516657424929818"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   3.87249777333333333333333333333333333333`9.516657424929818],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027611018106*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027611019106*^9}],

Cell[BoxData["\<\" Solving ind consumption function...\"\>"], "Print",
 CellChangeTimes->{3.6630276110211077`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function (minutes): \"\>", 
   "\[InvisibleSpace]", "0.007788845`6.820139309570306"}],
  SequenceForm[
  " Time spent to solve consumption function (minutes): ", 
   0.007788845`6.820139309570306],
  Editable->False]], "Print",
 CellChangeTimes->{3.663027611480434*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.663028052912656*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05735004572845456`", ",", "0.058889527751678106`", ",", 
   "1.0268436058536519`", ",", "0.056164398214411104`", ",", 
   "0.9793261278350612`", ",", "0.9965336027671797`", ",", 
   "0.9949519737217961`", ",", "0.9948716144770816`", ",", 
   "0.9992620393006222`", ",", "0.9543428141013237`", ",", 
   "0.940288633175494`", ",", "0.9705167343149625`", ",", 
   "10.230845866324369`"}], "}"}]], "Print",
 CellChangeTimes->{3.663028052915657*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663028052918659*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.10024494504012291`", ",", "0.8101814075629925`", ",", 
   "0.08026976669729384`", ",", "0.04903895347797819`", ",", 
   "0.4777143977472553`", ",", "0.21495030847939012`", ",", 
   "0.9209597105383429`", ",", "0.944109624659755`", ",", 
   "0.9968521577982989`", ",", 
   RowBox[{"-", "0.15846969006018757`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630280529216614`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%): \"\>"], \
"Print",
 CellChangeTimes->{3.663028052923662*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "9.74986406337297`", ",", "25.277821881001667`", ",", "37.368935949326584`",
    ",", "54.19572818784215`", ",", "60.69535020259843`", ",", 
   "75.83936427929623`", ",", "83.36820524503764`", ",", "89.3431129961561`", 
   ",", "97.26317194238564`", ",", "0.5076103967509131`", ",", 
   "44.1860375`"}], "}"}]], "Print",
 CellChangeTimes->{3.663028052925665*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.09613868994230146`"}],
  SequenceForm[" MPC mean:", 0.09613868994230146],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028052928666*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630280529296665`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06919426276828122`", ",", "0.07106307363124076`", ",", 
   "0.07759965956310244`", ",", "0.09230634225018763`", ",", 
   "0.10025962708771408`", ",", "0.08993076224841179`", ",", 
   "0.10758396000988113`", ",", "0.10135373161599204`", ",", 
   "0.09502535066242102`", ",", "0.09975563673743137`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630280529316683`*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.66302805293367*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.06600010135288004`", ",", "0.06600010135244505`", ",", 
   "0.06600420273275054`", ",", "0.06687791602999293`", ",", 
   "0.06769558862516323`", ",", "0.13757683319164138`", ",", 
   "0.20012856763883302`", ",", "0.10592183039137704`", ",", 
   "0.1242771318134478`", ",", "0.17580224996461646`"}], "}"}]], "Print",
 CellChangeTimes->{3.663028052935671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.08954635831598168`", ",", "0.1803694081296292`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.08954635831598168, 0.1803694081296292}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630280529376726`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.127066477731265`", ",", "0.965033940910175`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.127066477731265, 0.965033940910175}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630280529396744`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630280529416757`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "7.35723706166666666666666666666666666667`9.795380998129957"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   7.35723706166666666666666666666666666667`9.795380998129957],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028052943677*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Point model (mins): \"\>", 
   "\[InvisibleSpace]", 
   "15.63282573166666666666666666666666666667`10.122703734792177"}],
  SequenceForm[
  " Time spent to run \[Beta]-Point model (mins): ", 
   15.63282573166666666666666666666666666667`10.122703734792177],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630280530847807`*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663028053095785*^9}],

Cell[BoxData["\<\"Run \[Beta]-Dist model with time pref factors approximated \
by seven points\"\>"], "Print",
 CellChangeTimes->{3.663028053097786*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630280530997877`*^9}],

Cell[BoxData["\<\"Running rep agent model with permanent shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.663028053840313*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.663028054594848*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05744877870132316`", ",", "0.059046432572672634`", ",", 
   "1.0278100580633`", ",", "0.056099706021112646`", ",", 
   "0.9765169476060691`", ",", "0.9965784191812694`", ",", 
   "0.9949659616594662`", ",", "0.994831556634029`", ",", 
   "0.9992603749621536`", ",", "0.9545285336164773`", ",", 
   "0.9408156515108294`", ",", "0.9722791946884406`", ",", 
   "10.259205717381175`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630280545978513`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663028054599852*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.09638479524744226`", ",", "0.8432676445957245`", ",", 
   "0.06012135698108243`", ",", "0.047622883260817664`", ",", 
   "0.47933907823574756`", ",", "0.20817745725954465`", ",", 
   "0.9324174143162659`", ",", "0.9486914927886495`", ",", 
   "0.9968964498798544`", ",", 
   RowBox[{"-", "0.15273288432920112`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630280546028547`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with permanent shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.7615418`7.03220874399535"}],
  SequenceForm[
  " Time spent to run rep agent model with permanent shocks (seconds): ", 
   0.7615418`7.03220874399535],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630280546048555`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630280546078587`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Dist model with time pref factors \
approximated by seven points... \"\>"], "Print",
 CellChangeTimes->{3.6630280546098595`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028055315362*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663028055317361*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "7.937131825`9.828329841623782"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   7.937131825`9.828329841623782],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028531543271*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.09046852221685453`", ",", "0.9751315049353966`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.09046852221685453, 0.9751315049353966}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630285802058*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.971`"}],
  SequenceForm[" R^2: ", 0.971],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028580208802*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.811042155`8.837709676049592"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.811042155`8.837709676049592],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028580210802*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028580212805*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630285802148056`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "2.06299715666666666666666666666666666667`9.243164877621247"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   2.06299715666666666666666666666666666667`9.243164877621247],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028703985628*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11311255887253163`", ",", "0.968901706787154`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11311255887253163`, 0.968901706787154}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630287531134872`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.92`"}],
  SequenceForm[" R^2: ", 0.92],
  Editable->False]], "Print",
 CellChangeTimes->{3.66302875311549*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.81879765`8.841842835755813"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.81879765`8.841842835755813],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630287531174903`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630287531194925`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630287531214943`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "1.31678431833333333333333333333333333333`9.048180894074525"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.31678431833333333333333333333333333333`9.048180894074525],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630288321205473`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11529841979699804`", ",", "0.9683073410410987`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11529841979699804`, 0.9683073410410987}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028879890443*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.931`"}],
  SequenceForm[" R^2: ", 0.931],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630288798924437`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.79616492333333333333333333333333333333`8.829669288157579"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.79616492333333333333333333333333333333`8.829669288157579],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028879895445*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028879897447*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630288798994484`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.24012038666666666666666666666666666667`8.309095282245902"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.24012038666666666666666666666666666667`8.309095282245902],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028894297665*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12095891483038039`", ",", "0.9667548677138507`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12095891483038039`, 0.9667548677138507}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630289425639143`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.925`"}],
  SequenceForm[" R^2: ", 0.925],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028942566916*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.80445416333333333333333333333333333333`8.834167551866944"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.80445416333333333333333333333333333333`8.834167551866944],
  Editable->False]], "Print",
 CellChangeTimes->{3.663028942568917*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630289425719194`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630289425739202`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.62187455`8.722369032041975"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.62187455`8.722369032041975],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630289798773975`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12617532224300262`", ",", "0.9653212748307937`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12617532224300262`, 0.9653212748307937}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630290281896696`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.923`"}],
  SequenceForm[" R^2: ", 0.923],
  Editable->False]], "Print",
 CellChangeTimes->{3.663029028192671*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.80518783`8.834563450344088"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.80518783`8.834563450344088],
  Editable->False]], "Print",
 CellChangeTimes->{3.663029028195674*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630290281976748`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663029028199676*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.58096220333333333333333333333333333333`8.692814126874946"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.58096220333333333333333333333333333333`8.692814126874946],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630290630484047`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.6630290630584106`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663029263061324*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630294632143435`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12121138992323476`", ",", "0.9666833317813973`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12121138992323476`, 0.9666833317813973}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630295036800575`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.931`"}],
  SequenceForm[" R^2: ", 0.931],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630295036820583`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "7.343844195`9.794589702633012"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 7.343844195`9.794589702633012],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630295036840596`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.663029503686061*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630295036880627`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.05001883166666666666666666666666666667`7.627799791534835"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.05001883166666666666666666666666666667`7.627799791534835],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630295066801863`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.6630295066831875`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663031231760229*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630329650010624`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%): \"\>"], \
"Print",
 CellChangeTimes->{3.663033316646576*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.11263718376434`", ",", "52.481876258727944`", ",", "67.48278276928136`",
    ",", "82.47248356845535`", ",", "86.68883183965978`", ",", 
   "93.64342402309457`", ",", "95.95724230822252`", ",", "97.4913987157588`", 
   ",", "99.33186595768058`", ",", "0.7826769991954665`", ",", "16.064775`"}],
   "}"}]], "Print",
 CellChangeTimes->{3.663033316649576*^9}],

Cell[BoxData["\<\" median wealth (net worth), wealth at 25th percentile, \
average wealth as fraction of average ANNUAL income: \"\>"], "Print",
 CellChangeTimes->{3.6630333166525793`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.47199194359601243`", ",", "0.19404487264302664`", ",", 
   "2.5628796234099336`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630333166545796`*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
ratio, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.663033316656581*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2012219222165303`", ",", "0.2709506548555649`", ",", 
   "0.32820305951620776`", ",", "0.3750484598093993`", ",", 
   "0.4288436179356556`", ",", "0.5695938194333006`", ",", 
   "1.3691659459358616`", ",", "4.79412804207391`", ",", 
   "12.316386076290298`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630333166595836`*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
level, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.663033316661586*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3972756598700655`", ",", "0.41941657389771675`", ",", 
   "0.49363615443513004`", ",", "0.5597713148272695`", ",", 
   "0.5516376055052553`", ",", "0.6685234781969219`", ",", 
   "1.2583296857742838`", ",", "3.167790317975626`", ",", 
   "4.395507823328363`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630333166635857`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11908894841915718`", ",", "0.9672642572440404`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11908894841915718`, 0.9672642572440404}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663033316666588*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.931`"}],
  SequenceForm[" R^2: ", 0.931],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630333166685905`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "63.49943982833333333333333333333333333333`10.731436142318055"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   63.49943982833333333333333333333333333333`10.731436142318055],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630333166705923`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "8"}],
  SequenceForm["Iteration ", 8],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630333166735935`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630333166755953`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.052754075`7.650922260652846"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.052754075`7.650922260652846],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630333198128223`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663033319814822*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630350461267405`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630367815441165`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.6630371333637533`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05724334155952996`", ",", "0.058492619960064864`", ",", 
   "1.0218239950097203`", ",", "0.05608840015769951`", ",", 
   "0.9798240044978965`", ",", "0.9965018746898976`", ",", 
   "0.9961385475849317`", ",", "0.9958204102589475`", ",", 
   "0.9991498100312245`", ",", "0.9656016720631647`", ",", 
   "0.9523140809342763`", ",", "0.9716916313017843`", ",", 
   "10.253421138757652`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630371333687587`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630371333717585`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.09121510333815935`", ",", "0.8198695930708577`", ",", 
   "0.06967709148422714`", ",", "0.04203812729040575`", ",", 
   "0.4446521972949892`", ",", "0.18812642593550896`", ",", 
   "0.9289597282164883`", ",", "0.9518201946300203`", ",", 
   "0.9968203265142029`", ",", 
   RowBox[{"-", "0.16000492764391952`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630371333747616`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%): \"\>"], \
"Print",
 CellChangeTimes->{3.663037133376762*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.024142972880288`", ",", "52.454958851486346`", ",", 
   "67.48270682882126`", ",", "82.48268443276791`", ",", "86.69782917190186`",
    ",", "93.6463663855622`", ",", "95.95664118181129`", ",", 
   "97.48944862438799`", ",", "99.33124124371359`", ",", 
   "0.7826510988787727`", ",", "16.047630357142857`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630371333787627`*^9}],

Cell[BoxData["\<\" median wealth (net worth), wealth at 25th percentile, \
average wealth as fraction of average ANNUAL income: \"\>"], "Print",
 CellChangeTimes->{3.663037133380765*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.47155823783352957`", ",", "0.19434639143866853`", ",", 
   "2.5633552846894134`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037133382767*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
ratio, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.6630371333847685`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2012822765968792`", ",", "0.2677266154096446`", ",", 
   "0.3213959186567418`", ",", "0.3754203720627994`", ",", 
   "0.4293742200354595`", ",", "0.5681471258349203`", ",", 
   "1.361818616762231`", ",", "4.797526512636368`", ",", 
   "12.353774862751191`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630371333867693`*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
level, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.663037133388771*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3802409366829786`", ",", "0.43705001525964865`", ",", 
   "0.5047929480446015`", ",", "0.5369863524641092`", ",", 
   "0.5595767747945676`", ",", "0.7134621019233799`", ",", 
   "1.3411363548156334`", ",", "3.0708128411626916`", ",", 
   "4.4084825051923255`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037133390773*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.21131144782766687`"}],
  SequenceForm[" MPC mean:", 0.21131144782766687`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630371333927736`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663037133394775*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.1760897559712603`", ",", "0.1778593176590152`", ",", 
   "0.18481115097584944`", ",", "0.19898430546118306`", ",", 
   "0.20679083206987636`", ",", "0.21805610688444144`", ",", 
   "0.25817784104186836`", ",", "0.21917856135046476`", ",", 
   "0.2186252136889254`", ",", "0.24122078114566126`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037133396777*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663037133398778*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.055821179574700786`", ",", "0.05780226235715202`", ",", 
   "0.05972585779938899`", ",", "0.06632784285572946`", ",", 
   "0.08877432647776051`", ",", "0.371416344992463`", ",", 
   "0.4881636730823652`", ",", "0.25718016835376545`", ",", 
   "0.33209069478841813`", ",", "0.4503922165281242`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630371334007797`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.19357547100926586`", ",", "0.42028099348402215`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.19357547100926586`, 0.42028099348402215`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037133403781*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Annual MPC at top 1/3:\"\>", "\[InvisibleSpace]", 
   "0.2083421111453041`"}],
  SequenceForm[" Annual MPC at top 1/3:", 0.2083421111453041],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037133465827*^9}],

Cell[BoxData["\<\" Share (in %) among top 1/3 MPCs by wealth LEVELS -- top \
20%, 20-40%, 40-60%, 60-80%, 80-100%, total:\"\>"], "Print",
 CellChangeTimes->{3.6630371334688272`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.08146453338155851`", ",", "1.8552054954487176`", ",", 
   "12.856300753945995`", ",", "34.680278964809446`", ",", 
   "50.52675025241428`", ",", "100"}], "}"}]], "Print",
 CellChangeTimes->{3.66303713347183*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC mean:\"\>", "\[InvisibleSpace]", 
   "0.17719830371098136`"}],
  SequenceForm[" Alternative (simulation) MPC mean:", 0.17719830371098136`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037133473832*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by income top 1%, 10%, 20%, \
40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663037133475833*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.166292858594416`", ",", "0.16696798727150425`", ",", 
   "0.17129852219803654`", ",", "0.1788300067968671`", ",", 
   "0.18150699314311156`", ",", "0.17073526956278462`", ",", 
   "0.18230677339562368`", ",", "0.17863813667639514`", ",", 
   "0.17350223028185643`", ",", "0.1765380798673361`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037133478835*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by wealth perm inc ratio top \
1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663037133481838*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.056659483090888293`", ",", "0.05866550727315888`", ",", 
   "0.0606116960962413`", ",", "0.06724132583217446`", ",", 
   "0.0891899860789152`", ",", "0.30921078015908077`", ",", 
   "0.38776589028523123`", ",", "0.21566633726938783`", ",", 
   "0.2787297873482826`", ",", "0.36381697907130517`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037133483839*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC employed, unemployed: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.17094020969911516`", ",", "0.26034155272577225`"}], "}"}]}],
  SequenceForm[
  " Alternative (simulation) MPC employed, unemployed: ", {
   0.17094020969911516`, 0.26034155272577225`}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037133486841*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11758911206542505`", ",", "0.9676768884020007`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11758911206542505`, 0.9676768884020007}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630371334898434`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.931`"}],
  SequenceForm[" R^2: ", 0.931],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630371334928455`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "63.56090009666666666666666666666666666667`10.731856286912203"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   63.56090009666666666666666666666666666667`10.731856286912203],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630371334948473`*^9}],

Cell[BoxData["\<\" Consumption function\"\>"], "Print",
 CellChangeTimes->{3.6630371334978485`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "151.47314551333333333333333333333333333333`11.109001892346692"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   151.47314551333333333333333333333333333333`11.109001892346692],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630371429905868`*^9}],

Cell[BoxData["\<\" Figure of consumption function\"\>"], "Print",
 CellChangeTimes->{3.6630371429935865`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1: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
     "], {{{}, {}, {}, {}, {}, {}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{382, 381, 340}, {374, 373, 328}, {93, 398, 304}, {368, 
          367, 319}, {366, 100, 316}, {97, 96, 310}, {394, 393, 358}, {99, 98,
           313}, {370, 369, 322}, {372, 371, 325}, {392, 391, 355}, {376, 375,
           331}, {378, 377, 334}, {380, 379, 337}, {384, 383, 343}, {386, 385,
           346}, {388, 387, 349}, {396, 395, 361}, {364, 399, 397}, {390, 389,
           352}, {95, 94, 307}}]]}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwVz/EugnEUgOGf5hLcgEvIWKbVNMYyltVqmQqfrMZWUkSIIkTds6c/nu3d
zs52zmrUzrdiIYQVlvlZCmHKFXUeeeKIQz6ZcEaNO7rsssMLrxTIM+SNEkXG
fFDhlBZt0qS4pUOGbXrcs88el26sk9RbXOiITZ1gxpwbrqma1VjTcb74Jlrs
Lv4wO2dDr/POiBPKPNDngCy//NGkwYBnjsnxD10HIPk=
          
          "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwV0Ec/wgEAgOE/hSh7hqRhj2wZmUlWlMi8uJfvf/M4PL/3/qZ+fmuttiAI
vvlvOyHCdNBJFxG66SFKjF766GeAQYYYZoRRxhhngjiTTDFNghmSzJIiTYYs
c8yzwCJLLLPCKmusk2ODTbbYZodd9tgnzwGHHHFMgRNOOeOcCy4pckWJa8rc
cMsd9zxQ4ZEnqtR4ps4LrzR4450PPvmiafgfh/0TNQ==
         "]]}, 
       {GrayLevel[0], Thickness[0.01], 
        LineBox[{102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
         114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
          128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 
         141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
          155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 
         168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
          182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
         195, 196, 197, 198, 199, 200, 201, 202}]}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwNz0VWQgEAAMCPii1iB0qZmHfxCL7nVg+qYAd2dyO2wizmAJOaXZiZDwVB
MMciS2TJscwKq6yxzgabbLHNDnl22WOfAw454pgTTjnjnAsuueKaG265454H
HnnimRdeKfBGkXc++OSLb3745Y9/SgRyISqopIow1dRQSx31NNBIExGaidJC
K22000EnXXTTQy8x+ugnToIkKdIMMMgQw4wwSoYxxplgkimmKQNmAjYa
         "]]}, 
       {GrayLevel[0], LineBox[CompressedData["
1:eJwV0NVWggEQhdHfR/ENLGzF7sQGE8FeIthd2PrO7rnY65uruTi1+VLmuCZJ
kiJ1jjWt1wbW3Y26oU2aYtPdrFvaoq3k3W26re3aQcHdqfG8i25KpDmhh17K
9FGhnwFOGeSMIYY5Z4QLRhnjknGumGCSa6a4YZoZbpnljgxz3DPPAwss8sgS
TyyzwjNZXsixymvsRDU2in14i214j21iEz5iEz5jD4p8scM3u+zxwz6/HHDI
H0f8A3cSJ8A=
         "]]}}}], {}}, 
   InsetBox["\<\" Consumption/(quarterly) permanent\"\>", {-0.3, 1.63}, \
{-1, 0}], 
   InsetBox["\<\" income ratio for least patient\"\>", {-0.3, 1.53}, {-1, 0}],
    InsetBox["\<\" in \[Beta]-Dist (left scale) \"\>", {-0.3, 1.43}, {-1, 0}],
    InsetBox["\<\" \[DownArrow] \"\>", {5.5, 1.35}, {-1, 0}], 
   InsetBox["\<\"  \[Beta]-Point (left scale)\"\>", {6, 1.2}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow] \"\>", {8, 1.11}, {-1, 0}], 
   InsetBox["\<\"  \[UpArrow] for most patient in \[Beta]-Dist (left scale)\"\
\>", {4, 0.75}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {16.5, -0.16}, {-1, 0}], 
   InsetBox["\<\"   Histogram: empirical density of \"\>", {4.8, 0.55}, \
{-1, 0}], 
   InsetBox["\<\"   \\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\)) (right scale)\"\>", {4.85, 0.45}, \
{-1, 0}], InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.35}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{-0.00189573459715639, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.39857819905213276`, 
      FormBox["0.05`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.7990521327014218, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.199526066350711, 
      FormBox["0.15000000000000002`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.07819905213270145, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.1582938388625593, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.23838862559241716`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.31848341232227495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.4786729857819907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5587677725118484, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6388625592417063, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7189573459715641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8791469194312798, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9592417061611375, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.0393364928909954`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.1194312796208532`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.279620853080569, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3597156398104269`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4398104265402847`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5199052132701425`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.08199052132701423, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{3.6630371430065956`*^9}],

Cell[BoxData["CFuncDistSevenPermAndHistNetWorthLiqFinPlot"], "Output",
 CellChangeTimes->{3.66303714302761*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, GraphicsComplexBox[CompressedData["
1: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
     "], {{{}, {}, {}, {}, {}, {}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[
         PolygonBox[{{382, 381, 340}, {374, 373, 328}, {93, 398, 304}, {368, 
          367, 319}, {366, 100, 316}, {97, 96, 310}, {394, 393, 358}, {99, 98,
           313}, {370, 369, 322}, {372, 371, 325}, {392, 391, 355}, {376, 375,
           331}, {378, 377, 334}, {380, 379, 337}, {384, 383, 343}, {386, 385,
           346}, {388, 387, 349}, {396, 395, 361}, {364, 399, 397}, {390, 389,
           352}, {95, 94, 307}}]]}, 
       {RGBColor[0.8, 0.8, 1.], EdgeForm[None], 
        GraphicsGroupBox[PolygonBox[CompressedData["
1:eJwVz/EugnEUgOGf5hLcgEvIWKbVNMYyltVqmQqfrMZWUkSIIkTds6c/nu3d
zs52zmrUzrdiIYQVlvlZCmHKFXUeeeKIQz6ZcEaNO7rsssMLrxTIM+SNEkXG
fFDhlBZt0qS4pUOGbXrcs88el26sk9RbXOiITZ1gxpwbrqma1VjTcb74Jlrs
Lv4wO2dDr/POiBPKPNDngCy//NGkwYBnjsnxD10HIPk=
          
          "]]]}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, {}, \
{}, {}, {}, {}, {}}, {{}, {}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwV0Ec/wgEAgOE/hSh7hqRhj2wZmUlWlMi8uJfvf/M4PL/3/qZ+fmuttiAI
vvlvOyHCdNBJFxG66SFKjF766GeAQYYYZoRRxhhngjiTTDFNghmSzJIiTYYs
c8yzwCJLLLPCKmusk2ODTbbYZodd9tgnzwGHHHFMgRNOOeOcCy4pckWJa8rc
cMsd9zxQ4ZEnqtR4ps4LrzR4450PPvmiafgfh/0TNQ==
         "]]}, 
       {GrayLevel[0], Thickness[0.01], 
        LineBox[{102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
         114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
          128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 
         141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154,
          155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 
         168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181,
          182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
         195, 196, 197, 198, 199, 200, 201, 202}]}, 
       {GrayLevel[0], Thickness[0.01], Dashing[{0.04, 0.04}], 
        LineBox[CompressedData["
1:eJwNz0VWQgEAAMCPii1iB0qZmHfxCL7nVg+qYAd2dyO2wizmAJOaXZiZDwVB
MMciS2TJscwKq6yxzgabbLHNDnl22WOfAw454pgTTjnjnAsuueKaG265454H
HnnimRdeKfBGkXc++OSLb3745Y9/SgRyISqopIow1dRQSx31NNBIExGaidJC
K22000EnXXTTQy8x+ugnToIkKdIMMMgQw4wwSoYxxplgkimmKQNmAjYa
         "]]}, 
       {GrayLevel[0], LineBox[CompressedData["
1:eJwV0NVWggEQhdHfR/ENLGzF7sQGE8FeIthd2PrO7rnY65uruTi1+VLmuCZJ
kiJ1jjWt1wbW3Y26oU2aYtPdrFvaoq3k3W26re3aQcHdqfG8i25KpDmhh17K
9FGhnwFOGeSMIYY5Z4QLRhnjknGumGCSa6a4YZoZbpnljgxz3DPPAwss8sgS
TyyzwjNZXsixymvsRDU2in14i214j21iEz5iEz5jD4p8scM3u+zxwz6/HHDI
H0f8A3cSJ8A=
         "]]}}}], {}}, 
   InsetBox["\<\" Consumption/(quarterly) permanent\"\>", {-0.3, 1.63}, \
{-1, 0}], 
   InsetBox["\<\" income ratio for least patient\"\>", {-0.3, 1.53}, {-1, 0}],
    InsetBox["\<\" in \[Beta]-Dist (left scale) \"\>", {-0.3, 1.43}, {-1, 0}],
    InsetBox["\<\" \[DownArrow] \"\>", {5.5, 1.35}, {-1, 0}], 
   InsetBox["\<\"  \[Beta]-Point (left scale)\"\>", {6, 1.2}, {-1, 0}], 
   InsetBox["\<\"  \[DownArrow] \"\>", {8, 1.11}, {-1, 0}], 
   InsetBox["\<\"  \[UpArrow] for most patient in \[Beta]-Dist (left scale)\"\
\>", {4, 0.75}, {-1, 0}], 
   InsetBox["\<\"\\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\))\"\>", {16.5, -0.16}, {-1, 0}], 
   InsetBox["\<\"   Histogram: empirical density of \"\>", {4.8, 0.55}, \
{-1, 0}], 
   InsetBox["\<\"   \\!\\(\[ScriptM]\\_\[ScriptT]\\)/(\\!\\(\[ScriptP]\\_\
\[ScriptT]\\)\\!\\(W\\_\[ScriptT]\\)) (right scale)\"\>", {4.85, 0.45}, \
{-1, 0}], InsetBox["\<\"  \[DownArrow]\"\>", {8, 0.35}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  Frame->True,
  FrameLabel->{None, None},
  FrameStyle->{{}, {
     GrayLevel[0]}, {}, {
     GrayLevel[0]}},
  FrameTicks->{Automatic, Automatic, None, {{-0.00189573459715639, 
      FormBox["0.`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.39857819905213276`, 
      FormBox["0.05`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.7990521327014218, 
      FormBox["0.1`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.199526066350711, 
      FormBox["0.15000000000000002`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {1.6, 
      FormBox["0.2`", TraditionalForm], {0.00625, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.25]}}, {0.07819905213270145, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.1582938388625593, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.23838862559241716`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.31848341232227495`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.4786729857819907, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.5587677725118484, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.6388625592417063, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.7189573459715641, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.8791469194312798, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {0.9592417061611375, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.0393364928909954`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.1194312796208532`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.279620853080569, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.3597156398104269`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.4398104265402847`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {1.5199052132701425`, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}, {-0.08199052132701423, 
      FormBox["\"\"", TraditionalForm], {0.00375, 0.}, {
       GrayLevel[0.], 
       AbsoluteThickness[0.125]}}}},
  ImagePadding->39,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 20.00001}, {-0.005499999999999977, 1.6845}},
  PlotRangeClipping->False,
  PlotRangePadding->{{0.40000020000000003`, 0.40000020000000003`}, {0., 
   0.}}]], "Output",
 CellChangeTimes->{3.663037143030612*^9}],

Cell[BoxData["\<\" Figure of wealth distribution\"\>"], "Print",
 CellChangeTimes->{3.663037143822174*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], LineBox[CompressedData["
1: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
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.04, 0.04}], 
      LineBox[CompressedData["
1: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

       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.04, 0.04}], 
      LineBox[{{70., 0.07999999999999996}, {80., 0.12}, {90., 0.27}, {95., 
       0.44999999999999996`}, {99., 0.76}}]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1: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
As2MGQ==
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[CompressedData["
1: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
eQ7+A9Gqc1k=
       "]]}}, {}}, 
   InsetBox["\<\" \[UpArrow] US data (SCF) \"\>", {56, 0.025}, {-1, 0}], 
   InsetBox["\<\" KS-JEDC \[RightArrow]\"\>", {50, 0.6}, {-1, 0}], 
   InsetBox["\<\" \[LeftArrow] \[Beta]-Point\"\>", {68, 0.3}, {-1, 0}], 
   InsetBox["\<\" \[Beta]-Dist (dashed line)\"\>", {20, 0.4}, {-1, 0}], 
   InsetBox["\<\" Percentile\"\>", {87, -0.1}, {-1, 0}], 
   {Arrowheads[0.02], ArrowBox[{{35, 0.3}, {35, 0.02}}]}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, 
    FormBox["\[ScriptCapitalF]", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->29,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 100}, {0, 1}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {25, 
      FormBox["25", TraditionalForm]}, {50, 
      FormBox["50", TraditionalForm]}, {75, 
      FormBox["75", TraditionalForm]}, {100, 
      FormBox["100", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {0.25, 
      FormBox["0.25`", TraditionalForm]}, {0.5, 
      FormBox["0.5`", TraditionalForm]}, {0.75, 
      FormBox["0.75`", TraditionalForm]}, {1, 
      FormBox["1", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{3.6630371438301806`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663037143891225*^9}],

Cell[BoxData["\<\"Run \[Beta]-Dist model with time pref factors approximated \
by seven points\"\>"], "Print",
 CellChangeTimes->{3.663037143894232*^9}],

Cell[BoxData["\<\"Using parameter values estimated by matching liquid \
FINANCIAL assets plus retirement assets\"\>"], "Print",
 CellChangeTimes->{3.6630371438972273`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.663037143899232*^9}],

Cell[BoxData["\<\"Running rep agent model with permanent shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.663037144613735*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.6630371453612657`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05715444091405019`", ",", "0.05838557198618322`", ",", 
   "1.0215404271731818`", ",", "0.05766489969421631`", ",", 
   "1.0089312181521248`", ",", "0.9965569155419625`", ",", 
   "0.9960939347223096`", ",", "0.9959747510529747`", ",", 
   "0.9991942023104338`", ",", "0.898929703240066`", ",", 
   "0.8780178192286514`", ",", "0.9448781861526369`", ",", 
   "6.592915486195024`"}], "}"}]], "Print",
 CellChangeTimes->{3.663037145364269*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630371453662696`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13067142613605742`", ",", "0.8506136279992648`", ",", 
   "0.08122077816293252`", ",", "0.06823559685962945`", ",", 
   "0.5513797624004988`", ",", "0.24500381073073646`", ",", 
   "0.9316346292005175`", ",", "0.9488134182354926`", ",", 
   "0.9968754665063645`", ",", 
   RowBox[{"-", "0.14316066127860275`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.6630371453692737`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with permanent shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.7545368`7.02819542371589"}],
  SequenceForm[
  " Time spent to run rep agent model with permanent shocks (seconds): ", 
   0.7545368`7.02819542371589],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037145371273*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.663037145374276*^9}],

Cell[BoxData["\<\"Running \[Beta]-Dist model with time pref factors \
approximated by seven points... \"\>"], "Print",
 CellChangeTimes->{3.663037145377279*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037146072771*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663037146074773*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "3.98767947833333333333333333333333333333`9.529386491539967"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.98767947833333333333333333333333333333`9.529386491539967],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630373853335395`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.10090323048150474`", ",", "0.9657460655869173`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.10090323048150474`, 0.9657460655869173}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630374327661967`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.961`"}],
  SequenceForm[" R^2: ", 0.961],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630374327692*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.79052759833333333333333333333333333333`8.826583284526434"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.79052759833333333333333333333333333333`8.826583284526434],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630374327712*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037432773202*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630374327752028`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.303191355`9.043674438539837"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.303191355`9.043674438539837],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037510957678*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11177304679185512`", ",", "0.9620787469037387`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11177304679185512`, 0.9620787469037387}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037558490406*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.912`"}],
  SequenceForm[" R^2: ", 0.912],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630375584934072`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.79222882166666666666666666666666666667`8.827516886414053"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.79222882166666666666666666666666666667`8.827516886414053],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630375584964094`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037558498411*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630375585014124`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.49091498333333333333333333333333333333`8.619672535723291"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.49091498333333333333333333333333333333`8.619672535723291],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630375879463053`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11842969998026046`", ",", "0.9598333428692074`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11842969998026046`, 0.9598333428692074}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630376355640926`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.912`"}],
  SequenceForm[" R^2: ", 0.912],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630376355680957`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.7936298`8.828284214988496"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.7936298`8.828284214988496],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037635572099*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037635575102*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630376355791035`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.552608775`8.671084025111398"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.552608775`8.671084025111398],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630376687216206`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12771085818059486`", ",", "0.9566888326705258`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12771085818059486`, 0.9566888326705258}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630377172860794`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.902`"}],
  SequenceForm[" R^2: ", 0.902],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630377172890816`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.80942434`8.836842508029958"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 0.80942434`8.836842508029958],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630377172910824`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037717293084*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630377172960873`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.67506232166666666666666666666666666667`8.75801011690819"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.67506232166666666666666666666666666667`8.75801011690819],
  Editable->False]], "Print",
 CellChangeTimes->{3.66303775779082*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.13120830379981155`", ",", "0.9554955433715957`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.13120830379981155`, 0.9554955433715957}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630378060520644`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.903`"}],
  SequenceForm[" R^2: ", 0.903],
  Editable->False]], "Print",
 CellChangeTimes->{3.663037806055066*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.80437076166666666666666666666666666667`8.83412252411646"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.80437076166666666666666666666666666667`8.83412252411646],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630378060580697`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630378060600696`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630378060630717`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.395130345`8.525406631883403"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.395130345`8.525406631883403],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630378297608895`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663037829770894*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663038029479598*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630382298117456`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.13084650163664735`", ",", "0.9556202348844349`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.13084650163664735`, 0.9556202348844349}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630382702584457`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.907`"}],
  SequenceForm[" R^2: ", 0.907],
  Editable->False]], "Print",
 CellChangeTimes->{3.663038270261447*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "7.34162597666666666666666666666666666667`9.794458503566466"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   7.34162597666666666666666666666666666667`9.794458503566466],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630382702634487`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.663038270266451*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630382702684517`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.05083607833333333333333333333333333333`7.634838288447617"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.05083607833333333333333333333333333333`7.634838288447617],
  Editable->False]], "Print",
 CellChangeTimes->{3.663038273308609*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.6630382733116117`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630400024425287`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630417420068493`*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.663042093816479*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05716067225830828`", ",", "0.05824195183048667`", ",", 
   "1.018916495021124`", ",", "0.05750392570913027`", ",", 
   "1.006005063223729`", ",", "0.9965603071110332`", ",", 
   "0.9965852197934081`", ",", "0.9965424600339665`", ",", 
   "0.9992099357115806`", ",", "0.9117843572720313`", ",", 
   "0.8906068532036472`", ",", "0.9417783066968438`", ",", 
   "6.598138156216902`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093821483*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.6630420938264866`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.16037683259859414`", ",", "0.8288301988681935`", ",", 
   "0.11561358951232106`", ",", "0.08143646332003764`", ",", 
   "0.5512556195478269`", ",", "0.2627345306883518`", ",", 
   "0.9212533193600714`", ",", "0.9441559612158479`", ",", 
   "0.9968741416544319`", ",", 
   RowBox[{"-", "0.1417691904706486`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663042093830488*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%): \"\>"], \
"Print",
 CellChangeTimes->{3.6630420938344917`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "41.961727131444974`", ",", "68.20769201388698`", ",", "79.60287331712507`",
    ",", "89.16398280152268`", ",", "91.47998646122164`", ",", 
   "95.26838397013657`", ",", "96.78938732781639`", ",", "97.92818891117844`",
    ",", "99.42693395893649`", ",", "0.8499647686699902`", ",", 
   "11.210269642857142`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630420938384953`*^9}],

Cell[BoxData["\<\" median wealth (net worth), wealth at 25th percentile, \
average wealth as fraction of average ANNUAL income: \"\>"], "Print",
 CellChangeTimes->{3.663042093842497*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.21502374545732927`", ",", "0.10458559066353398`", ",", 
   "1.6495345390542289`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093845499*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
ratio, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.663042093849502*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.11029145764577242`", ",", "0.14649513159596048`", ",", 
   "0.17503865816715997`", ",", "0.20163436307395535`", ",", 
   "0.22706104095699214`", ",", "0.2799925743042545`", ",", 
   "0.47087705869770285`", ",", "1.397501249513621`", ",", 
   "4.582833282842427`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093852504*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
level, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.6630420938565063`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.22020011332719994`", ",", "0.23378270087794475`", ",", 
   "0.2598409057892141`", ",", "0.28126970382288197`", ",", 
   "0.3036539073916229`", ",", "0.34855527141636256`", ",", 
   "0.5183933894705339`", ",", "1.3159452458783318`", ",", 
   "2.405432437549672`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093860509*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.4170568481380812`"}],
  SequenceForm[" MPC mean:", 0.4170568481380812],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420938645115`*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663042093868515*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3534870840123152`", ",", "0.3583674770299593`", ",", 
   "0.3645788474135211`", ",", "0.37868961429723824`", ",", 
   "0.3901100098083434`", ",", "0.4557904272440718`", ",", 
   "0.5201937865324111`", ",", "0.4331799597633641`", ",", 
   "0.44800118675947886`", ",", "0.4938508454357131`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093871517*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630420938755198`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.11885922321713338`", ",", "0.12237259339346807`", ",", 
   "0.1266621866355977`", ",", "0.16831351139536654`", ",", 
   "0.24037523013729323`", ",", "0.6219896582943233`", ",", 
   "0.7191747456663471`", ",", "0.4944036919898922`", ",", 
   "0.5842837165677857`", ",", "0.6899134266244668`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630420938805237`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.38604793585850916`", ",", "0.7276663162026255`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.38604793585850916`, 0.7276663162026255}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663042093884529*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Annual MPC at top 1/3:\"\>", "\[InvisibleSpace]", 
   "0.45115725927500516`"}],
  SequenceForm[" Annual MPC at top 1/3:", 0.45115725927500516`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420938885293`*^9}],

Cell[BoxData["\<\" Share (in %) among top 1/3 MPCs by wealth LEVELS -- top \
20%, 20-40%, 40-60%, 60-80%, 80-100%, total:\"\>"], "Print",
 CellChangeTimes->{3.663042093891531*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12466260791116153`", ",", "3.783359728302246`", ",", 
   "15.14897474900244`", ",", "32.92979993407866`", ",", 
   "48.013202980705486`", ",", "100"}], "}"}]], "Print",
 CellChangeTimes->{3.6630420938955345`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC mean:\"\>", "\[InvisibleSpace]", 
   "0.36683938244975167`"}],
  SequenceForm[" Alternative (simulation) MPC mean:", 0.36683938244975167`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420938995385`*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by income top 1%, 10%, 20%, \
40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630420939035397`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.34286652393715633`", ",", "0.3459703610914611`", ",", 
   "0.34998423988039257`", ",", "0.35779683360355896`", ",", 
   "0.362937035687978`", ",", "0.3726929025924108`", ",", 
   "0.3921159497375148`", ",", "0.3720386250886035`", ",", 
   "0.3728958377107822`", ",", "0.38287965615659686`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093907543*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by wealth perm inc ratio top \
1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630420939105444`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12409018478246815`", ",", "0.12773576234809286`", ",", 
   "0.1321760417525678`", ",", "0.17385605441140237`", ",", 
   "0.2417979103583679`", ",", "0.5544015905868264`", ",", 
   "0.6190919941840759`", ",", "0.4434971417422514`", ",", 
   "0.5255617334267724`", ",", "0.6006739156064899`"}], "}"}]], "Print",
 CellChangeTimes->{3.663042093914549*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC employed, unemployed: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.3564256811437267`", ",", "0.5051928426583738`"}], "}"}]}],
  SequenceForm[
  " Alternative (simulation) MPC employed, unemployed: ", {0.3564256811437267,
    0.5051928426583738}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663042093919552*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12969714756324757`", ",", "0.9560152332883783`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12969714756324757`, 0.9560152332883783}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420939245553`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.907`"}],
  SequenceForm[" R^2: ", 0.907],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420939285583`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "63.67564819166666666666666666666666666667`10.732639622811337"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   63.67564819166666666666666666666666666667`10.732639622811337],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630420939315605`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "82.49096535166666666666666666666666666667`10.84507263418645"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   82.49096535166666666666666666666666666667`10.84507263418645],
  Editable->False]], "Print",
 CellChangeTimes->{3.663042094826194*^9}],

Cell[BoxData["\<\" Figure of MPC comparison\"\>"], "Print",
 CellChangeTimes->{3.6630420982956753`*^9}]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[{{{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.02, 0.02}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQMNAucf6exZbQ/hiTg4yPx5h+CrOGxo2XlUJW0N
lK/n8GHdGnWfqPVQvomDx6Qbes3iG6B8S4cPTveXtB6G8e0cCrall+sJbILw
GxwdApqWpvSEbIbKuzjs+H5CWNRmK1TezcEi65nzL/ddUHlPhxan54ax0geg
8t4ObxYuN0/lOQKV93NYUmN3Ulv2KITvEOAQcONjrtexk1D1gQ4HDh3Yzxd7
FsI/EOSQcv+t8TLVC1D9IQ5cNu2Hz06/BNUf6vDluunKludXoPrDHNS4f9ya
wnsTqj/cYc/nnVOvfHoA1R/hILVITuduy0Oo/ggHB47f8hqqT6H6Ixxm6aV+
fjvrOVR/hINKwt+ZHEtfQfVHOljIiPz///+9PQDlm3pV
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.01, 0.01}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQMP+O8enRG+zx7CE3Ew2LlfWXcKjK/i8EPE0y5J
eD+Ur+dgY7E6jlXgIJRv4sBwWnlHRRmMb+ngs/qRyLePR6B8OweRTnWJux9P
QPgNjg4Glo8rhfguQOVdHJ452q/XVLsElXdzaFCJf3Ph7mWovKfDlZhpe08f
vAaV93awS2fd4vvrBlTez2HVgwzj3WduQfgOAQ7vFIv2vY2/A1Uf6HDDVv/H
HbH7EP6BIIeKq+rCmQ4PoPpDHNgyU43Cpj2E6g91YKvbtF/T6DFUf5hDSQ7P
l09XnkL1hzuEdP7YZNb3Eqo/wmFW+ecTU7JeQfVHOIQt2+fC/BXKb4hw8BKT
Wm644g1Uf4TDWiOzI4W976D6Ix1eC975+///e3sATGF5Ow==
       "]]}}, {}}, {{}, {{}, {}, 
     {GrayLevel[0], Thickness[0.004], Dashing[{0.04, 0.04}], 
      LineBox[CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQMFvZGvrukusYfwRBwWsJgqbd4F46ug8fUcLlT4
rjC4uBTKN3E44BCIxLdE49uh8hsc0eRd0OTdHBSMVc+E/4TJezo0/L1yum7l
cqi8t8OCQzcQfAY/VL5DACq/IRCVfyAITX+IQ4CJcaXr9FVQ/aGo/IYwVP6B
cAeH0zwKP5+vg+qPQOU7RDgYsMYFm4dtguqPcJC4F4/gHwDKaxjM9vyxFao/
0mFG4+Wva3tP2QMA67x3ow==
       "]]}}, {}}, InsetBox["\<\" KS-JEDC \"\>", {65, 0.1}, {-1, 0}], 
   InsetBox["\<\" Matching net worth \"\>", {48, 0.315}, {-1, 0}], 
   InsetBox["\<\" \[DownArrow] \"\>", {60, 0.23}, {-1, 0}], 
   InsetBox["\<\" Matching liquid financial assets + retirement assets\"\>", \
{7, 0.65}, {-1, 0}], InsetBox["\<\" Percentile\"\>", {87, -0.1}, {-1, 0}]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesLabel->{None, 
    FormBox["\"    Annual MPC\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  ImagePadding->29,
  ImageSize->{468., 289.23990673495075`},
  Method->{},
  PlotRange->{{0, 100}, {0, 1}},
  PlotRangeClipping->False,
  PlotRangePadding->{Automatic, Automatic},
  Ticks->{{{0, 
      FormBox["0", TraditionalForm]}, {25, 
      FormBox["25", TraditionalForm]}, {50, 
      FormBox["50", TraditionalForm]}, {75, 
      FormBox["75", TraditionalForm]}, {100, 
      FormBox["100", TraditionalForm]}}, {{0, 
      FormBox["0", TraditionalForm]}, {0.25, 
      FormBox["0.25`", TraditionalForm]}, {0.5, 
      FormBox["0.5`", TraditionalForm]}, {0.75, 
      FormBox["0.75`", TraditionalForm]}, {1, 
      FormBox["1", TraditionalForm]}}}]], "Output",
 CellChangeTimes->{3.6630420983036623`*^9}],

Cell[CellGroupData[{

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6630420983136687`*^9}],

Cell[BoxData["\<\"Robustness check: if people die at age 100 years \"\>"], \
"Print",
 CellChangeTimes->{3.663042098316674*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.663042098320676*^9}],

Cell[BoxData["\<\"Models without aggregate shock\"\>"], "Print",
 CellChangeTimes->{3.663042098322675*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663042098361706*^9}],

Cell[BoxData["\<\"Match liquid FINANCIAL assets plus retirement assets\"\>"], \
"Print",
 CellChangeTimes->{3.663042098363707*^9}],

Cell[BoxData["\<\"Estimate \[Beta]middle using \[Beta]-Dist model with time \
pref factors approximated by seven points \"\>"], "Print",
 CellChangeTimes->{3.663042098365726*^9}],

Cell[BoxData["\<\"Obtain (common) initial distribution of Pt and kRatt for \
later simulations \"\>"], "Print",
 CellChangeTimes->{3.663042098642902*^9}],

Cell[BoxData["\<\" Searching for good guess of \[Beta]middle using Reiter's \
method... \"\>"], "Print",
 CellChangeTimes->{3.6630421020983534`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0035`"}],
  SequenceForm[" Diff between approximated points of \[Beta]:  ", 0.0035],
  Editable->False]], "Print",
 CellChangeTimes->{3.663042102100356*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96519657689005333825269510644319002607`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96519657689005333825269510644319002607`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.663042568267127*^9}],

Cell[BoxData["\<\" Searching \[Beta]middle and obtaining (common) initial \
distribution of Pt and kRatt...\"\>"], "Print",
 CellChangeTimes->{3.663042575821488*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to search \[Beta]middle and obtain (common) \
initial distribution of Pt and kRatt (minutes):  \"\>", "\[InvisibleSpace]", 
   "2.56615416666666666666666666666666666667`9.337948992117909"}],
  SequenceForm[
  " Time spent to search \[Beta]middle and obtain (common) initial \
distribution of Pt and kRatt (minutes):  ", 
   2.56615416666666666666666666666666666667`9.337948992117909],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630427297907395`*^9}],

Cell[BoxData["\<\" Obtained (common) initial distribution of Pt and kRatt. \"\
\>"], "Print",
 CellChangeTimes->{3.663042729792739*^9}],

Cell[BoxData["\<\"Start searching for \[Beta]middle using the simulation \
method \"\>"], "Print",
 CellChangeTimes->{3.663042729795741*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0034000000000000002`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0034000000000000002`],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630427332491913`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630427332521954`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96544838818725889329933253436543624497`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96544838818725889329933253436543624497`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630430441798153`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.66304305195233*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "8.272303005`9.846292681967121"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   8.272303005`9.846292681967121],
  Editable->False]], "Print",
 CellChangeTimes->{3.663043229588378*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9650533881872589`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9650533881872589],
  Editable->False]], "Print",
 CellChangeTimes->{3.663043229591375*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630432914002333`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.279332388316302`", ",", "74.69142577958033`", ",", "87.05749056337442`",
    ",", "89.860387802959`", ",", "94.44258228401793`", ",", 
   "96.23004767108864`", ",", "97.55464971161267`", ",", "99.30276191933038`",
    ",", "87.05749056337442`", ",", "0.8156988454058508`", ",", 
   "0.8148323374604789`", ",", "0.27388877571054254`", ",", "Indeterminate", 
   ",", "1.8504756779308569`", ",", "0.5343778829398161`", ",", 
   "0.3850970027360747`", ",", "15.561231533446607`"}], "}"}]], "Print",
 CellChangeTimes->{3.663043291404235*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0035`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0035],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630432914072385`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630432914102397`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96519597098124885008275138007225274492`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96519597098124885008275138007225274492`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630435073074293`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.663043515024905*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.33037510333333333333333333333333333333`9.730095692906179"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.33037510333333333333333333333333333333`9.730095692906179],
  Editable->False]], "Print",
 CellChangeTimes->{3.663043671222739*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9647759709812488`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9647759709812488],
  Editable->False]], "Print",
 CellChangeTimes->{3.663043671225741*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.663043733871189*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "26.834241202358456`", ",", "75.29556632208406`", ",", "87.4606206417945`", 
   ",", "90.17850523684335`", ",", "94.59849290895008`", ",", 
   "96.33176925469196`", ",", "97.61945829457478`", ",", "99.32163179081354`",
    ",", "87.4606206417945`", ",", "0.8196653835444893`", ",", 
   "0.8188250290803583`", ",", "0.27403271475308477`", ",", "Indeterminate", 
   ",", "1.8644084171057733`", ",", "0.5346559780457912`", ",", 
   "0.39167904670125164`", ",", "13.506029980557887`"}], "}"}]], "Print",
 CellChangeTimes->{3.663043733876196*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0036`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0036],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630437338792*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.663043733882201*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96494494955746080071958933950997342296`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96494494955746080071958933950997342296`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630439476018453`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6630439552983046`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.29211462333333333333333333333333333333`9.727462873773323"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.29211462333333333333333333333333333333`9.727462873773323],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044111399068*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9644999495574608`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9644999495574608],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044111401069*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.663044172616506*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.307923390631668`", ",", "75.85518522707015`", ",", "87.8194757096336`", 
   ",", "90.45918002300468`", ",", "94.73445729283873`", ",", 
   "96.42033374190211`", ",", "97.67601674492337`", ",", "99.33824948165633`",
    ",", "87.8194757096336`", ",", "0.8232430053523208`", ",", 
   "0.8224242130986853`", ",", "0.27415947288011216`", ",", "Indeterminate", 
   ",", "1.8773145696835565`", ",", "0.5347461796020172`", ",", 
   "0.3981994871802216`", ",", "12.01875537310838`"}], "}"}]], "Print",
 CellChangeTimes->{3.663044172619508*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0036999999999999997`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0036999999999999997`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044172622509*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.663044172625512*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96469192112145674295209671139392134703`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96469192112145674295209671139392134703`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044385711708*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6630443933801484`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "6.64288015333333333333333333333333333333`9.751022665459903"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.64288015333333333333333333333333333333`9.751022665459903],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044571189315*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9642169211214567`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9642169211214567],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044571192317*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630446332803726`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "27.660617071215558`", ",", "76.36451825663102`", ",", "88.13831154278708`",
    ",", "90.7101524665963`", ",", "94.8573384755123`", ",", 
   "96.50012071250679`", ",", "97.72682399724114`", ",", "99.35303127716591`",
    ",", "88.13831154278708`", ",", "0.8264489763940276`", ",", 
   "0.825650484921214`", ",", "0.2743499127727463`", ",", "Indeterminate", 
   ",", "1.890001039672278`", ",", "0.534740522282038`", ",", 
   "0.4047298413658661`", ",", "10.937159955840794`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630446332843757`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0037999999999999996`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0037999999999999996`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044633287378*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.663044633289379*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96443769013267409126852686487264339302`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96443769013267409126852686487264339302`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630448478556256`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.663044855621135*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "5.919149975`9.700925592156027"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.919149975`9.700925592156027],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044988429371*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9639376901326742`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9639376901326742],
  Editable->False]], "Print",
 CellChangeTimes->{3.663044988432375*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.663045050218214*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.138581534415476`", ",", "76.87860484975286`", ",", "88.45392794184221`",
    ",", "90.95860743646776`", ",", "94.98120646926436`", ",", 
   "96.5811586893967`", ",", "97.77859278532752`", ",", "99.36817275214894`", 
   ",", "88.45392794184221`", ",", "0.8297193331255587`", ",", 
   "0.82894083735854`", ",", "0.27405532413054556`", ",", "Indeterminate", 
   ",", "1.9028525227127282`", ",", "0.5345258156516004`", ",", 
   "0.4110437063464073`", ",", "10.084744574543464`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630450502222185`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0038999999999999994`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0038999999999999994`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663045050225219*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630450502282224`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96418169781340679324654937879364941186`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96418169781340679324654937879364941186`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.66304540209489*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6630454098483915`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "8.57521794`9.861911414707304"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   8.57521794`9.861911414707304],
  Editable->False]], "Print",
 CellChangeTimes->{3.663045564731292*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9636516978134069`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9636516978134069],
  Editable->False]], "Print",
 CellChangeTimes->{3.663045564734292*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630456265001173`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.54846707170873`", ",", "77.3404819453878`", ",", "88.72461564899875`", 
   ",", "91.17027749588127`", ",", "95.08599700594714`", ",", 
   "96.64945318562923`", ",", "97.82230835645859`", ",", "99.38112064239189`",
    ",", "88.72461564899875`", ",", "0.8326085312316276`", ",", 
   "0.831846871861563`", ",", "0.27407761966441946`", ",", "Indeterminate", 
   ",", "1.914731802987561`", ",", "0.5344756411611832`", ",", 
   "0.4173820202611279`", ",", "9.550908143461186`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630456265041223`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.003999999999999999`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.003999999999999999],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630456265071244`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.663045626510126*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96392560949717205093568416296406098161`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96392560949717205093568416296406098161`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.663045885993243*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6630458936426725`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "6.66669707`9.752576969755419"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   6.66669707`9.752576969755419],
  Editable->False]], "Print",
 CellChangeTimes->{3.663046026502943*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9633706094971721`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9633706094971721],
  Editable->False]], "Print",
 CellChangeTimes->{3.663046026505946*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630460884338865`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "28.98894898280271`", ",", "77.82627317240444`", ",", "89.01094705485666`", 
   ",", "91.39718949085137`", ",", "95.2049156609779`", ",", 
   "96.72867040928261`", ",", "97.87349537992627`", ",", "99.39626020409217`",
    ",", "89.01094705485666`", ",", "0.8356836451269908`", ",", 
   "0.8349419183241116`", ",", "0.2740856817435403`", ",", "Indeterminate", 
   ",", "1.9278782450125487`", ",", "0.5345237098878128`", ",", 
   "0.4234465606545902`", ",", "9.1181777823326`"}], "}"}]], "Print",
 CellChangeTimes->{3.663046088437892*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0040999999999999995`"}],
  SequenceForm[
  "Diff between approximated points of \[Beta]:  ", 0.0040999999999999995`],
  Editable->False]], "Print",
 CellChangeTimes->{3.663046088439892*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630460884428935`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96366336509286928602273364520760444027`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96366336509286928602273364520760444027`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.663046278085456*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.6630462857168703`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "5.85428728333333333333333333333333333333`9.696140278664808"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   5.85428728333333333333333333333333333333`9.696140278664808],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630464396911235`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9630883650928693`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9630883650928693],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630464396941285`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630465018021965`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.358556041760615`", ",", "78.27139772789074`", ",", "89.25748549405982`",
    ",", "91.59053383904988`", ",", "95.30490027768607`", ",", 
   "96.79489145892137`", ",", "97.9160499068362`", ",", "99.40875047451179`", 
   ",", "89.25748549405982`", ",", "0.8384013760606854`", ",", 
   "0.8376766640154689`", ",", "0.27422118663745`", ",", "Indeterminate", ",",
    "1.9399081923159092`", ",", "0.5345341230584683`", ",", 
   "0.4294143863030442`", ",", "8.920505179894072`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630465018061986`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0042`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0042],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630465018092012`*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630465018122034`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96340951367689245060006177439807775638`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96340951367689245060006177439807775638`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630468059880342`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.663046814023734*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", 
   "8.51517532166666666666666666666666666667`9.858859842434223"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   8.51517532166666666666666666666666666667`9.858859842434223],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630470127137165`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.9627995136768924`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.9627995136768924],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630470127157173`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.663047074711707*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.825932076567213`", ",", "78.7309350093223`", ",", "89.50518511904116`", 
   ",", "91.78366090012001`", ",", "95.40446364107159`", ",", 
   "96.86081592405891`", ",", "97.95837730651171`", ",", "99.42123090655821`",
    ",", "89.50518511904116`", ",", "0.8412184567475816`", ",", 
   "0.8405104030219386`", ",", "0.27396076730779345`", ",", "Indeterminate", 
   ",", "1.9512695032615546`", ",", "0.5341559496526592`", ",", 
   "0.43537423649791696`", ",", "8.873642534048383`"}], "}"}]], "Print",
 CellChangeTimes->{3.663047074716711*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Diff between approximated points of \[Beta]:  \"\>", 
   "\[InvisibleSpace]", "0.0043`"}],
  SequenceForm["Diff between approximated points of \[Beta]:  ", 0.0043],
  Editable->False]], "Print",
 CellChangeTimes->{3.663047074719713*^9}],

Cell[BoxData["\<\" Searching for initial guess of \[Beta]middle using \
Reiter's method... \"\>"], "Print",
 CellChangeTimes->{3.6630470747227154`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" \[Beta]middle:  \"\>", "\[InvisibleSpace]", 
   "0.96314832621280908566658553060475210258`10."}],
  SequenceForm[
  " \[Beta]middle:  ", 0.96314832621280908566658553060475210258`10.],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630473782500863`*^9}],

Cell[BoxData["\<\" Searching for \[Beta]middle... \"\>"], "Print",
 CellChangeTimes->{3.663047385872493*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to find \[Beta]middle (minutes):  \"\>", 
   "\[InvisibleSpace]", "7.750933055`9.81802023410861"}],
  SequenceForm[
  " Time spent to find \[Beta]middle (minutes):  ", 
   7.750933055`9.81802023410861],
  Editable->False]], "Print",
 CellChangeTimes->{3.663047539768692*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Solution of \[Beta]middle: \"\>", "\[InvisibleSpace]", 
   "0.962513326212809`"}],
  SequenceForm[" Solution of \[Beta]middle: ", 0.962513326212809],
  Editable->False]], "Print",
 CellChangeTimes->{3.663047539771693*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.6630476020558887`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.126822518509087`", ",", "79.11643098569155`", ",", "89.70640071012036`",
    ",", "91.94018986580696`", ",", "95.48611826373123`", ",", 
   "96.9155568358315`", ",", "97.99399667225477`", ",", "99.43209116982676`", 
   ",", "89.70640071012036`", ",", "0.8434999578638834`", ",", 
   "0.8428054429316391`", ",", "0.27402296185134184`", ",", "Indeterminate", 
   ",", "1.9627163208227887`", ",", "0.5346232272223468`", ",", 
   "0.4411804957726022`", ",", "8.935449733221471`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630476020598917`*^9}],

Cell[BoxData["\<\"Solution: \"\>"], "Print",
 CellChangeTimes->{3.6630476194862566`*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 10%, 20%, 25%, 40%, 50%, \
60%, 80%, 5th quintile, (* Frac between 0.5 and 1.5 * mean k (%), *) Gini \
coeff of wealth at beg-period, Gini coeff of wealth at end-period, Gini coeff \
of perm inc, std log wealth at beg-period, std log wealth at end-period, std \
log perm inc, Agg Annual MPC, Sum of Dev Squared:  \"\>"], "Print",
 CellChangeTimes->{3.663047922641361*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "30.1171445358823`", ",", "78.96284450242784`", ",", "89.65536154860001`", 
   ",", "91.9066524102935`", ",", "95.47242335584173`", ",", 
   "96.90913939135297`", ",", "97.99135756704537`", ",", "99.431924367441`", 
   ",", "89.65536154860001`", ",", "0.8429220560423387`", ",", 
   "0.8422163774444248`", ",", "0.2758472618113844`", ",", "Indeterminate", 
   ",", "1.9587144013709255`", ",", "0.5385490112584489`", ",", 
   "0.4356218908296633`", ",", "8.85851237676904`"}], "}"}]], "Print",
 CellChangeTimes->{3.663047922645365*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Difference beteen approximated points of \[Beta] (\
\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{
    "0.0042`", ",", "0.9627995136768924`", ",", "0.9480995136768924`", ",", 
     "0.9774995136768925`", ",", "19.802138818231786`", ",", 
     "6.6188397041225615`", ",", "0.6763496582087166`"}], "}"}]}],
  SequenceForm[
  " Difference beteen approximated points of \[Beta] \
(\[EmptyDownTriangle]/3.5), \[Beta]middle (\[Beta]grave in the text), \
\[Beta]middle-\[EmptyDownTriangle],  \[Beta]middle+\[EmptyDownTriangle], Agg \
K (Mean of k (level)), K/Y ratio, Average deviation of K (%): ", {0.0042, 
   0.9627995136768924, 0.9480995136768924, 0.9774995136768925, 
   19.802138818231786`, 6.6188397041225615`, 0.6763496582087166}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630479227684526`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with seven types \
(minutes):  \"\>", "\[InvisibleSpace]", 
   "97.07344578166666666666666666666666666667`10.915766694110522"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with seven types (minutes):  ", 
   97.07344578166666666666666666666666666667`10.915766694110522],
  Editable->False]], "Print",
 CellChangeTimes->{3.663047922771455*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.663047922774457*^9}],

Cell[BoxData["\<\"Models with aggregate permanent shocks\"\>"], "Print",
 CellChangeTimes->{3.663047922776458*^9}],

Cell[BoxData["\<\"============================================================\
=\"\>"], "Print",
 CellChangeTimes->{3.663047923041646*^9}],

Cell[BoxData["\<\"Run \[Beta]-Dist model with time pref factors approximated \
by seven points\"\>"], "Print",
 CellChangeTimes->{3.6630479230436473`*^9}],

Cell[BoxData["\<\"Using parameter values estimated by matching liquid \
FINANCIAL assets plus retirement assets\"\>"], "Print",
 CellChangeTimes->{3.6630479230456486`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630479230476503`*^9}],

Cell[BoxData["\<\"Running rep agent model with permanent shocks ... \"\>"], \
"Print",
 CellChangeTimes->{3.663047923856224*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.6630479246097584`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05715444091405019`", ",", "0.05838557198618322`", ",", 
   "1.0215404271731818`", ",", "0.05766489969421631`", ",", 
   "1.0089312181521248`", ",", "0.9965569155419625`", ",", 
   "0.9960939347223099`", ",", "0.9959747510529747`", ",", 
   "0.9991942023104338`", ",", "0.8989297032400663`", ",", 
   "0.8780178192286514`", ",", "0.9448781861526369`", ",", 
   "6.592915486195024`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630479246127615`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663047924615763*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.13067142613605742`", ",", "0.8506136279992645`", ",", 
   "0.08122077816293252`", ",", "0.06823559685962945`", ",", 
   "0.5513797624004988`", ",", "0.24500381073073646`", ",", 
   "0.9316346292005181`", ",", "0.9488134182354926`", ",", 
   "0.9968754665063645`", ",", 
   RowBox[{"-", "0.14316066127860275`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663047924619766*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run rep agent model with permanent shocks \
(seconds): \"\>", "\[InvisibleSpace]", "0.7595394`7.0310653050087675"}],
  SequenceForm[
  " Time spent to run rep agent model with permanent shocks (seconds): ", 
   0.7595394`7.0310653050087675],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630479246227674`*^9}],

Cell[BoxData["\<\"=========================================\"\>"], "Print",
 CellChangeTimes->{3.6630479246257706`*^9}],

Cell[BoxData["\<\"Running \[Beta]-Dist model with time pref factors \
approximated by seven points... \"\>"], "Print",
 CellChangeTimes->{3.6630479246287737`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "1"}],
  SequenceForm["Iteration ", 1],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630479253192625`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630479253212633`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "3.98332638166666666666666666666666666667`9.528912140853823"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   3.98332638166666666666666666666666666667`9.528912140853823],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630481643188453`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.10569771695248842`", ",", "0.9641255559087124`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.10569771695248842`, 0.9641255559087124}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048213994094*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.954`"}],
  SequenceForm[" R^2: ", 0.954],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630482139960947`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.82792080666666666666666666666666666667`8.846655045299391"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.82792080666666666666666666666666666667`8.846655045299391],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048213999097*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "2"}],
  SequenceForm["Iteration ", 2],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630482140020995`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630482140041003`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "1.194197335`9.005742345880282"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   1.194197335`9.005742345880282],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048285645934*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.11994463333270866`", ",", "0.9592937428512074`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.11994463333270866`, 0.9592937428512074}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630483349269047`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.904`"}],
  SequenceForm[" R^2: ", 0.904],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048334929904*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.82134947666666666666666666666666666667`8.843194232976616"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.82134947666666666666666666666666666667`8.843194232976616],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630483349329076`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "3"}],
  SequenceForm["Iteration ", 3],
  Editable->False]], "Print",
 CellChangeTimes->{3.66304833493591*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663048334937911*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.71248887`8.781444332706236"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.71248887`8.781444332706236],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048377676235*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12274371941064083`", ",", "0.9583530224279121`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12274371941064083`, 0.9583530224279121}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048426772071*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.91`"}],
  SequenceForm[" R^2: ", 0.91],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048426775074*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.81828063166666666666666666666666666667`8.841568519958958"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.81828063166666666666666666666666666667`8.841568519958958],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048426777075*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "4"}],
  SequenceForm["Iteration ", 4],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048426780078*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630484267820787`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", "0.296810605`8.40114566237889"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.296810605`8.40114566237889],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630484445807076`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.1237779159487162`", ",", "0.958007426274075`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.1237779159487162, 0.958007426274075}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048494737297*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.91`"}],
  SequenceForm[" R^2: ", 0.91],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630484947402987`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.83592647833333333333333333333333333333`8.850834330130423"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.83592647833333333333333333333333333333`8.850834330130423],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048494742301*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "5"}],
  SequenceForm["Iteration ", 5],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048494744302*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.6630484947463026`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.10794324333333333333333333333333333333`7.961861711237103"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.10794324333333333333333333333333333333`7.961861711237103],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630485012128906`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12934445208443657`", ",", "0.9561199291842613`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12934445208443657`, 0.9561199291842613}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048550247684*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.904`"}],
  SequenceForm[" R^2: ", 0.904],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630485502506866`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "0.81722987833333333333333333333333333333`8.841010484489905"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   0.81722987833333333333333333333333333333`8.841010484489905],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048550252688*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "6"}],
  SequenceForm["Iteration ", 6],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630485502556906`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663048550258692*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.49942104166666666666666666666666666667`8.627133084363148"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.49942104166666666666666666666666666667`8.627133084363148],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630485802139482`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663048580233963*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.663048780506067*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630489806600876`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12934378598501822`", ",", "0.9561232536333416`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12934378598501822`, 0.9561232536333416}],
  Editable->False]], "Print",
 CellChangeTimes->{3.663049021284912*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.908`"}],
  SequenceForm[" R^2: ", 0.908],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630490212879148`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "7.35118274333333333333333333333333333333`9.795023467242588"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   7.35118274333333333333333333333333333333`9.795023467242588],
  Editable->False]], "Print",
 CellChangeTimes->{3.663049021290916*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\"Iteration \"\>", "\[InvisibleSpace]", "7"}],
  SequenceForm["Iteration ", 7],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630490212939177`*^9}],

Cell[BoxData["\<\" Solving ind consumption function(s)...\"\>"], "Print",
 CellChangeTimes->{3.663049021294919*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to solve consumption function(s) (minutes): \"\>", 
   "\[InvisibleSpace]", 
   "0.05031904666666666666666666666666666667`7.630398652685276"}],
  SequenceForm[
  " Time spent to solve consumption function(s) (minutes): ", 
   0.05031904666666666666666666666666666667`7.630398652685276],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630490243040547`*^9}],

Cell[BoxData["\<\" Simulating period 1\"\>"], "Print",
 CellChangeTimes->{3.663049024307057*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "500"}],
  SequenceForm[" Simulating period ", 500],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630507617999077`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Simulating period \"\>", "\[InvisibleSpace]", "1000"}],
  SequenceForm[" Simulating period ", 1000],
  Editable->False]], "Print",
 CellChangeTimes->{3.663052513248659*^9}],

Cell[BoxData["\<\" \
sigmaLogY,sigmaLogC,sigmaCYRatio,sigmaLogI,sigmaIYRatio,corr(Y(t),Y(t-1)),\
corr(C(t),Y(t)),corr(C(t),Y(t-1)),corr(C(t),C(t-1)),corr(I(t),Y(t)),corr(I(t),\
Y(t-1)),corr(I(t),I(t-1)), KYRatio, : \"\>"], "Print",
 CellChangeTimes->{3.6630528664993105`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.05718323036530784`", ",", "0.058243997788554464`", ",", 
   "1.0185503235209001`", ",", "0.05761442550335806`", ",", 
   "1.0075405872542629`", ",", "0.9965216232683025`", ",", 
   "0.9965931449704083`", ",", "0.9965755062171388`", ",", 
   "0.9992147290965064`", ",", "0.9122953323174912`", ",", 
   "0.8908111204319935`", ",", "0.9409623578362658`", ",", 
   "6.595067827331695`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665043173`*^9}],

Cell[BoxData["\<\" corr(dlC(t),dlC(t-1)), corr(dlC(t),dlY(t)), \
corr(dlC(t),dlY(t-1)), corr(dlC(t),dlY(t-2)), corr(dlC(t),r(t)), \
corr(dlC(t),r(t-1)), corr(d4lC(t),d4lY(t)), corr(d8lC(t),d8lY(t)), \
corr(lY(t),lY(t-1)), corr(dlY(t),dlY(t-1)): \"\>"], "Print",
 CellChangeTimes->{3.663052866509319*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.16520381569497444`", ",", "0.8289620670280882`", ",", 
   "0.1180530787446314`", ",", "0.08263339372900788`", ",", 
   "0.554341067494712`", ",", "0.2682351488931753`", ",", 
   "0.9210701881368919`", ",", "0.943607055292944`", ",", 
   "0.9968442245837441`", ",", 
   RowBox[{"-", "0.14834341438010487`"}]}], "}"}]], "Print",
 CellChangeTimes->{3.663052866512322*^9}],

Cell[BoxData["\<\" Distribution of wealth (k) 1%, 5%, 10%, 20%, 25%, 40%, \
50%, 60%, 80%, Gini coeff, Frac between 0.5 and 1.5 * mean k (%): \"\>"], \
"Print",
 CellChangeTimes->{3.6630528665153227`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "29.281439413595844`", ",", "63.77444875213355`", ",", "77.99097967407208`",
    ",", "89.11233752744316`", ",", "91.49731458713408`", ",", 
   "95.26853324388577`", ",", "96.77517394870878`", ",", "97.90534673805512`",
    ",", "99.40600557225595`", ",", "0.8372042156456253`", ",", 
   "9.939721428571428`"}], "}"}]], "Print",
 CellChangeTimes->{3.663052866519326*^9}],

Cell[BoxData["\<\" median wealth (net worth), wealth at 25th percentile, \
average wealth as fraction of average ANNUAL income: \"\>"], "Print",
 CellChangeTimes->{3.663052866522331*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.21299099610789116`", ",", "0.10523859703051898`", ",", 
   "1.6487669568329244`"}], "}"}]], "Print",
 CellChangeTimes->{3.663052866526331*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
ratio, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.6630528665283327`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.10553689130897044`", ",", "0.1405712999036595`", ",", 
   "0.16824692835515384`", ",", "0.19585510986122218`", ",", 
   "0.22107380032748003`", ",", "0.2756582670146923`", ",", 
   "0.45735851133420685`", ",", "1.461370948794785`", ",", 
   "5.453680935990654`"}], "}"}]], "Print",
 CellChangeTimes->{3.663052866531335*^9}],

Cell[BoxData["\<\" wealth (net worth) to ANNUAL total income ratio by wealth \
level, p10, p15, p20, p25, p30, p40, p60, p80, p90: \"\>"], "Print",
 CellChangeTimes->{3.6630528665343375`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.186323257400068`", ",", "0.22322475503447697`", ",", 
   "0.23443375913477987`", ",", "0.2664623575387055`", ",", 
   "0.3019702665577266`", ",", "0.3288143482516706`", ",", 
   "0.49398113566843194`", ",", "1.3735007759450228`", ",", 
   "2.588597199148003`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665373387`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC mean:\"\>", "\[InvisibleSpace]", "0.4310348948619507`"}],
  SequenceForm[" MPC mean:", 0.4310348948619507],
  Editable->False]], "Print",
 CellChangeTimes->{3.663052866540341*^9}],

Cell[BoxData["\<\" MPC by income top 1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, \
3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630528665433435`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.36511331428445504`", ",", "0.3690177860164886`", ",", 
   "0.3759159725444019`", ",", "0.39040479878080125`", ",", 
   "0.40134016173402354`", ",", "0.47348846327209626`", ",", 
   "0.537091475875342`", ",", "0.44792873796549315`", ",", 
   "0.4636565745608434`", ",", "0.5101065804939584`"}], "}"}]], "Print",
 CellChangeTimes->{3.663052866547346*^9}],

Cell[BoxData["\<\" MPC by wealth perm inc ratio top 1%, 10%, 20%, 40%, 60%; \
bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630528665503483`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.11746226890338407`", ",", "0.12162734888670879`", ",", 
   "0.1259283682617227`", ",", "0.1701737119886818`", ",", 
   "0.2479645469044044`", ",", "0.6403571206352874`", ",", 
   "0.7358149371985027`", ",", "0.5112120613108009`", ",", 
   "0.6029192780682942`", ",", "0.7070554533744315`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665533547`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" MPC employed, unemployed: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.39930418170667636`", ",", "0.7446116845205897`"}], "}"}]}],
  SequenceForm[
  " MPC employed, unemployed: ", {0.39930418170667636`, 0.7446116845205897}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630528665563536`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Annual MPC at top 1/3:\"\>", "\[InvisibleSpace]", 
   "0.4820785435678867`"}],
  SequenceForm[" Annual MPC at top 1/3:", 0.4820785435678867],
  Editable->False]], "Print",
 CellChangeTimes->{3.663052866559355*^9}],

Cell[BoxData["\<\" Share (in %) among top 1/3 MPCs by wealth LEVELS -- top \
20%, 20-40%, 40-60%, 60-80%, 80-100%, total:\"\>"], "Print",
 CellChangeTimes->{3.663052866561356*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.046098985272651244`", ",", "3.2534686913027646`", ",", 
   "14.514570897374034`", ",", "32.745592861941866`", ",", 
   "49.44026856410868`", ",", "100"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665643597`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC mean:\"\>", "\[InvisibleSpace]", 
   "0.3794018404918606`"}],
  SequenceForm[" Alternative (simulation) MPC mean:", 0.3794018404918606],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630528665663605`*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by income top 1%, 10%, 20%, \
40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.6630528665683603`*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.3541043003793943`", ",", "0.3563281857510175`", ",", 
   "0.36088701840357745`", ",", "0.368974393467231`", ",", 
   "0.3739591346489356`", ",", "0.38756589925624885`", ",", 
   "0.40703261871048524`", ",", "0.38512719011539176`", ",", 
   "0.3866183464443386`", ",", "0.3972308456618628`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665713625`*^9}],

Cell[BoxData["\<\" Alternative (simulation) MPC by wealth perm inc ratio top \
1%, 10%, 20%, 40%, 60%; bottom 40%, 20%, 3/4, 1/2, 1/4: \"\>"], "Print",
 CellChangeTimes->{3.663052866573365*^9}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.12263916970116942`", ",", "0.12696224207699738`", ",", 
   "0.13141709053655837`", ",", "0.17585312176018927`", ",", 
   "0.24920124332674934`", ",", "0.5747027362395275`", ",", 
   "0.6384012506088097`", ",", "0.4604245588646051`", ",", 
   "0.5458749399032112`", ",", "0.620331000634484`"}], "}"}]], "Print",
 CellChangeTimes->{3.6630528665763683`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Alternative (simulation) MPC employed, unemployed: \"\>", 
   "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.36891598071732495`", ",", "0.5187139774964086`"}], "}"}]}],
  SequenceForm[
  " Alternative (simulation) MPC employed, unemployed: ", {
   0.36891598071732495`, 0.5187139774964086}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630528665793695`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Estimates of agg process: \"\>", "\[InvisibleSpace]", 
   RowBox[{"{", 
    RowBox[{"0.12873955301676435`", ",", "0.9563309927279748`"}], "}"}]}],
  SequenceForm[
  " Estimates of agg process: ", {0.12873955301676435`, 0.9563309927279748}],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630528665813704`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" R^2: \"\>", "\[InvisibleSpace]", "0.908`"}],
  SequenceForm[" R^2: ", 0.908],
  Editable->False]], "Print",
 CellChangeTimes->{3.6630528665853753`*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to simulate (minutes): \"\>", "\[InvisibleSpace]", 
   "64.03698792333333333333333333333333333333`10.73509714424491"}],
  SequenceForm[
  " Time spent to simulate (minutes): ", 
   64.03698792333333333333333333333333333333`10.73509714424491],
  Editable->False]], "Print",
 CellChangeTimes->{3.663052866588376*^9}],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"\<\" Time spent to run \[Beta]-Dist model with time pref factors \
approximated by seven points (minutes): \"\>", "\[InvisibleSpace]", 
   "82.38117082833333333333333333333333333333`10.84449420821611"}],
  SequenceForm[
  " Time spent to run \[Beta]-Dist model with time pref factors approximated \
by seven points (minutes): ", 
   82.38117082833333333333333333333333333333`10.84449420821611],
  Editable->False]], "Print",
 CellChangeTimes->{3.663052867487013*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6630528674890137`*^9}],

Cell[BoxData["\<\"Generate tables \"\>"], "Print",
 CellChangeTimes->{3.6630528674920173`*^9}],

Cell[BoxData["\<\"============================================================\
===============\"\>"], "Print",
 CellChangeTimes->{3.6630528750313673`*^9}],

Cell[BoxData["\<\"Copy figures \"\>"], "Print",
 CellChangeTimes->{3.663052875038373*^9}]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1356, 435},
WindowMargins->{{255, Automatic}, {Automatic, 4}},
FrontEndVersion->"9.0 for Microsoft Windows (64-bit) (January 25, 2013)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 16050, 801, 12203, "Input"],
Cell[CellGroupData[{
Cell[16654, 827, 155, 2, 23, "Print"],
Cell[16812, 831, 155, 2, 23, "Print"],
Cell[16970, 835, 106, 1, 23, "Print"],
Cell[17079, 838, 139, 2, 23, "Print"],
Cell[17221, 842, 132, 2, 23, "Print"],
Cell[17356, 846, 264, 6, 23, "Print"],
Cell[17623, 854, 286, 6, 23, "Print"],
Cell[17912, 862, 139, 2, 23, "Print"],
Cell[18054, 866, 136, 2, 23, "Print"],
Cell[18193, 870, 144, 2, 23, "Print"],
Cell[18340, 874, 333, 8, 23, "Print"],
Cell[18676, 884, 133, 2, 23, "Print"],
Cell[18812, 888, 102, 1, 23, "Print"],
Cell[18917, 891, 263, 6, 23, "Print"],
Cell[19183, 899, 600, 13, 23, "Print"],
Cell[19786, 914, 423, 5, 43, "Print"],
Cell[20212, 921, 585, 10, 23, "Print"],
Cell[20800, 933, 375, 8, 23, "Print"],
Cell[21178, 943, 139, 2, 23, "Print"],
Cell[21320, 947, 179, 2, 23, "Print"],
Cell[21502, 951, 155, 2, 23, "Print"],
Cell[21660, 955, 146, 2, 23, "Print"],
Cell[21809, 959, 287, 6, 23, "Print"],
Cell[22099, 967, 305, 7, 23, "Print"],
Cell[22407, 976, 369, 8, 23, "Print"],
Cell[22779, 986, 137, 2, 23, "Print"],
Cell[22919, 990, 140, 2, 23, "Print"],
Cell[23062, 994, 285, 6, 23, "Print"],
Cell[23350, 1002, 148, 2, 23, "Print"],
Cell[23501, 1006, 307, 7, 23, "Print"],
Cell[23811, 1015, 110, 1, 23, "Print"],
Cell[23924, 1018, 399, 9, 23, "Print"],
Cell[24326, 1029, 275, 6, 23, "Print"],
Cell[24604, 1037, 421, 5, 43, "Print"],
Cell[25028, 1044, 581, 10, 23, "Print"],
Cell[25612, 1056, 285, 6, 23, "Print"],
Cell[25900, 1064, 151, 2, 23, "Print"],
Cell[26054, 1068, 305, 7, 23, "Print"],
Cell[26362, 1077, 108, 1, 23, "Print"],
Cell[26473, 1080, 401, 9, 23, "Print"],
Cell[26877, 1091, 273, 6, 23, "Print"],
Cell[27153, 1099, 423, 5, 43, "Print"],
Cell[27579, 1106, 583, 10, 23, "Print"],
Cell[28165, 1118, 285, 6, 23, "Print"],
Cell[28453, 1126, 149, 2, 23, "Print"],
Cell[28605, 1130, 305, 7, 23, "Print"],
Cell[28913, 1139, 108, 1, 23, "Print"],
Cell[29024, 1142, 401, 9, 23, "Print"],
Cell[29428, 1153, 275, 6, 23, "Print"],
Cell[29706, 1161, 423, 5, 43, "Print"],
Cell[30132, 1168, 583, 10, 23, "Print"],
Cell[30718, 1180, 319, 7, 23, "Print"],
Cell[31040, 1189, 148, 2, 23, "Print"],
Cell[31191, 1193, 307, 7, 23, "Print"],
Cell[31501, 1202, 107, 1, 23, "Print"],
Cell[31611, 1205, 401, 9, 23, "Print"],
Cell[32015, 1216, 275, 6, 23, "Print"],
Cell[32293, 1224, 423, 5, 43, "Print"],
Cell[32719, 1231, 584, 10, 23, "Print"],
Cell[33306, 1243, 319, 7, 23, "Print"],
Cell[33628, 1252, 151, 2, 23, "Print"],
Cell[33782, 1256, 307, 7, 23, "Print"],
Cell[34092, 1265, 110, 1, 23, "Print"],
Cell[34205, 1268, 401, 9, 23, "Print"],
Cell[34609, 1279, 273, 6, 23, "Print"],
Cell[34885, 1287, 423, 5, 43, "Print"],
Cell[35311, 1294, 582, 10, 23, "Print"],
Cell[35896, 1306, 321, 7, 23, "Print"],
Cell[36220, 1315, 149, 2, 23, "Print"],
Cell[36372, 1319, 305, 7, 23, "Print"],
Cell[36680, 1328, 110, 1, 23, "Print"],
Cell[36793, 1331, 399, 9, 23, "Print"],
Cell[37195, 1342, 275, 6, 23, "Print"],
Cell[37473, 1350, 423, 5, 43, "Print"],
Cell[37899, 1357, 580, 10, 23, "Print"],
Cell[38482, 1369, 283, 6, 23, "Print"],
Cell[38768, 1377, 151, 2, 23, "Print"],
Cell[38922, 1381, 307, 7, 23, "Print"],
Cell[39232, 1390, 110, 1, 23, "Print"],
Cell[39345, 1393, 401, 9, 23, "Print"],
Cell[39749, 1404, 275, 6, 23, "Print"],
Cell[40027, 1412, 423, 5, 43, "Print"],
Cell[40453, 1419, 581, 10, 23, "Print"],
Cell[41037, 1431, 86, 1, 23, "Print"],
Cell[41126, 1434, 423, 5, 43, "Print"],
Cell[41552, 1441, 582, 10, 23, "Print"],
Cell[42137, 1453, 1121, 22, 43, "Print"],
Cell[43261, 1477, 445, 9, 23, "Print"],
Cell[43709, 1488, 141, 2, 23, "Print"],
Cell[43853, 1492, 237, 3, 23, "Print"],
Cell[44093, 1497, 256, 3, 23, "Print"],
Cell[44352, 1502, 104, 2, 23, "Print"],
Cell[44459, 1506, 319, 7, 23, "Print"]
}, Open  ]],
Cell[44793, 1516, 129033, 2124, 304, "Output"],
Cell[CellGroupData[{
Cell[173851, 3644, 139, 2, 23, "Print"],
Cell[173993, 3648, 118, 1, 23, "Print"],
Cell[174114, 3651, 117, 1, 23, "Print"],
Cell[174234, 3654, 128, 2, 23, "Print"],
Cell[174365, 3658, 197, 5, 23, "Print"],
Cell[174565, 3665, 549, 13, 23, "Print"],
Cell[175117, 3680, 357, 8, 23, "Print"],
Cell[175477, 3690, 198, 5, 23, "Print"],
Cell[175678, 3697, 561, 13, 23, "Print"],
Cell[176242, 3712, 359, 8, 23, "Print"],
Cell[176604, 3722, 200, 5, 23, "Print"],
Cell[176807, 3729, 545, 13, 23, "Print"],
Cell[177355, 3744, 359, 8, 23, "Print"],
Cell[177717, 3754, 198, 5, 23, "Print"],
Cell[177918, 3761, 549, 13, 23, "Print"],
Cell[178470, 3776, 357, 8, 23, "Print"],
Cell[178830, 3786, 197, 5, 23, "Print"],
Cell[179030, 3793, 566, 13, 23, "Print"],
Cell[179599, 3808, 359, 8, 23, "Print"],
Cell[179961, 3818, 200, 5, 23, "Print"],
Cell[180164, 3825, 546, 13, 23, "Print"],
Cell[180713, 3840, 356, 8, 23, "Print"],
Cell[181072, 3850, 260, 3, 43, "Print"],
Cell[181335, 3855, 501, 9, 23, "Print"],
Cell[181839, 3866, 237, 5, 23, "Print"],
Cell[182079, 3873, 153, 2, 23, "Print"],
Cell[182235, 3877, 408, 8, 23, "Print"],
Cell[182646, 3887, 170, 2, 23, "Print"],
Cell[182819, 3891, 407, 8, 23, "Print"],
Cell[183229, 3901, 365, 8, 23, "Print"],
Cell[183597, 3911, 333, 8, 23, "Print"],
Cell[183933, 3921, 139, 2, 23, "Print"],
Cell[184075, 3925, 120, 1, 23, "Print"],
Cell[184198, 3928, 119, 1, 23, "Print"],
Cell[184320, 3931, 129, 2, 23, "Print"],
Cell[184452, 3935, 200, 5, 23, "Print"],
Cell[184655, 3942, 552, 13, 23, "Print"],
Cell[185210, 3957, 359, 8, 23, "Print"],
Cell[185572, 3967, 373, 8, 23, "Print"],
Cell[185948, 3977, 200, 5, 23, "Print"],
Cell[186151, 3984, 260, 3, 43, "Print"],
Cell[186414, 3989, 503, 9, 23, "Print"],
Cell[186920, 4000, 564, 13, 23, "Print"],
Cell[187487, 4015, 357, 8, 23, "Print"],
Cell[187847, 4025, 311, 7, 23, "Print"],
Cell[188161, 4034, 200, 5, 23, "Print"],
Cell[188364, 4041, 257, 3, 43, "Print"],
Cell[188624, 4046, 496, 9, 23, "Print"],
Cell[189123, 4057, 584, 14, 23, "Print"],
Cell[189710, 4073, 357, 8, 23, "Print"],
Cell[190070, 4083, 375, 8, 23, "Print"],
Cell[190448, 4093, 198, 5, 23, "Print"],
Cell[190649, 4100, 260, 3, 43, "Print"],
Cell[190912, 4105, 509, 10, 23, "Print"],
Cell[191424, 4117, 566, 13, 23, "Print"],
Cell[191993, 4132, 359, 8, 23, "Print"],
Cell[192355, 4142, 373, 8, 23, "Print"],
Cell[192731, 4152, 198, 5, 23, "Print"],
Cell[192932, 4159, 258, 3, 43, "Print"],
Cell[193193, 4164, 498, 10, 23, "Print"],
Cell[193694, 4176, 562, 13, 23, "Print"],
Cell[194259, 4191, 357, 8, 23, "Print"],
Cell[194619, 4201, 375, 8, 23, "Print"],
Cell[194997, 4211, 200, 5, 23, "Print"],
Cell[195200, 4218, 98, 1, 23, "Print"],
Cell[195301, 4221, 220, 5, 23, "Print"],
Cell[195524, 4228, 224, 5, 23, "Print"],
Cell[195751, 4235, 257, 3, 43, "Print"],
Cell[196011, 4240, 509, 10, 23, "Print"],
Cell[196523, 4252, 547, 13, 23, "Print"],
Cell[197073, 4267, 357, 8, 23, "Print"],
Cell[197433, 4277, 313, 7, 23, "Print"],
Cell[197749, 4286, 260, 3, 43, "Print"],
Cell[198012, 4291, 507, 10, 23, "Print"],
Cell[198522, 4303, 235, 5, 23, "Print"],
Cell[198760, 4310, 155, 2, 23, "Print"],
Cell[198918, 4314, 401, 8, 23, "Print"],
Cell[199322, 4324, 170, 2, 23, "Print"],
Cell[199495, 4328, 405, 8, 23, "Print"],
Cell[199903, 4338, 367, 8, 23, "Print"],
Cell[200273, 4348, 401, 9, 23, "Print"],
Cell[200677, 4359, 135, 2, 23, "Print"]
}, Open  ]],
Cell[200827, 4364, 23492, 401, 304, "Output"],
Cell[CellGroupData[{
Cell[224344, 4769, 141, 2, 23, "Print"],
Cell[224488, 4773, 143, 2, 23, "Print"],
Cell[224634, 4777, 287, 6, 23, "Print"],
Cell[224924, 4785, 332, 8, 23, "Print"],
Cell[225259, 4795, 1069, 21, 43, "Print"],
Cell[226331, 4818, 248, 6, 23, "Print"],
Cell[226582, 4826, 287, 6, 23, "Print"],
Cell[226872, 4834, 335, 8, 23, "Print"],
Cell[227210, 4844, 1074, 21, 43, "Print"],
Cell[228287, 4867, 248, 6, 23, "Print"],
Cell[228538, 4875, 318, 7, 23, "Print"],
Cell[228859, 4884, 335, 8, 23, "Print"],
Cell[229197, 4894, 1077, 21, 43, "Print"],
Cell[230277, 4917, 247, 6, 23, "Print"],
Cell[230527, 4925, 86, 1, 23, "Print"],
Cell[230616, 4928, 736, 15, 23, "Print"],
Cell[231355, 4945, 1074, 21, 43, "Print"],
Cell[232432, 4968, 250, 6, 23, "Print"],
Cell[232685, 4976, 423, 5, 43, "Print"],
Cell[233111, 4983, 580, 10, 23, "Print"],
Cell[233694, 4995, 443, 9, 23, "Print"],
Cell[234140, 5006, 141, 2, 23, "Print"],
Cell[234284, 5010, 130, 2, 23, "Print"],
Cell[234417, 5014, 178, 2, 23, "Print"],
Cell[234598, 5018, 155, 2, 23, "Print"],
Cell[234756, 5022, 148, 2, 23, "Print"],
Cell[234907, 5026, 289, 6, 23, "Print"],
Cell[235199, 5034, 305, 7, 23, "Print"],
Cell[235507, 5043, 167, 2, 23, "Print"],
Cell[235677, 5047, 515, 10, 23, "Print"],
Cell[236195, 5059, 135, 2, 23, "Print"],
Cell[236333, 5063, 142, 2, 23, "Print"],
Cell[236478, 5067, 321, 7, 23, "Print"],
Cell[236802, 5076, 151, 2, 23, "Print"],
Cell[236956, 5080, 305, 7, 23, "Print"],
Cell[237264, 5089, 110, 1, 23, "Print"],
Cell[237377, 5092, 401, 9, 23, "Print"],
Cell[237781, 5103, 275, 6, 23, "Print"],
Cell[238059, 5111, 421, 5, 43, "Print"],
Cell[238483, 5118, 584, 10, 23, "Print"],
Cell[239070, 5130, 285, 6, 23, "Print"],
Cell[239358, 5138, 151, 2, 23, "Print"],
Cell[239512, 5142, 305, 7, 23, "Print"],
Cell[239820, 5151, 108, 1, 23, "Print"],
Cell[239931, 5154, 399, 9, 23, "Print"],
Cell[240333, 5165, 271, 6, 23, "Print"],
Cell[240607, 5173, 423, 5, 43, "Print"],
Cell[241033, 5180, 581, 10, 23, "Print"],
Cell[241617, 5192, 287, 6, 23, "Print"],
Cell[241907, 5200, 151, 2, 23, "Print"],
Cell[242061, 5204, 305, 7, 23, "Print"],
Cell[242369, 5213, 108, 1, 23, "Print"],
Cell[242480, 5216, 339, 8, 23, "Print"],
Cell[242822, 5226, 273, 6, 23, "Print"],
Cell[243098, 5234, 420, 5, 43, "Print"],
Cell[243521, 5241, 585, 10, 23, "Print"],
Cell[244109, 5253, 319, 7, 23, "Print"],
Cell[244431, 5262, 149, 2, 23, "Print"],
Cell[244583, 5266, 307, 7, 23, "Print"],
Cell[244893, 5275, 108, 1, 23, "Print"],
Cell[245004, 5278, 401, 9, 23, "Print"],
Cell[245408, 5289, 273, 6, 23, "Print"],
Cell[245684, 5297, 423, 5, 43, "Print"],
Cell[246110, 5304, 584, 10, 23, "Print"],
Cell[246697, 5316, 319, 7, 23, "Print"],
Cell[247019, 5325, 151, 2, 23, "Print"],
Cell[247173, 5329, 305, 7, 23, "Print"],
Cell[247481, 5338, 108, 1, 23, "Print"],
Cell[247592, 5341, 401, 9, 23, "Print"],
Cell[247996, 5352, 273, 6, 23, "Print"],
Cell[248272, 5360, 421, 5, 43, "Print"],
Cell[248696, 5367, 584, 10, 23, "Print"],
Cell[249283, 5379, 321, 7, 23, "Print"],
Cell[249607, 5388, 151, 2, 23, "Print"],
Cell[249761, 5392, 307, 7, 23, "Print"],
Cell[250071, 5401, 108, 1, 23, "Print"],
Cell[250182, 5404, 401, 9, 23, "Print"],
Cell[250586, 5415, 275, 6, 23, "Print"],
Cell[250864, 5423, 423, 5, 43, "Print"],
Cell[251290, 5430, 583, 10, 23, "Print"],
Cell[251876, 5442, 88, 1, 23, "Print"],
Cell[251967, 5445, 421, 5, 43, "Print"],
Cell[252391, 5452, 585, 10, 23, "Print"],
Cell[252979, 5464, 1120, 22, 43, "Print"],
Cell[254102, 5488, 379, 8, 23, "Print"],
Cell[254484, 5498, 139, 2, 23, "Print"],
Cell[254626, 5502, 237, 3, 23, "Print"],
Cell[254866, 5507, 258, 3, 23, "Print"],
Cell[255127, 5512, 104, 2, 23, "Print"],
Cell[255234, 5516, 384, 9, 23, "Print"]
}, Open  ]],
Cell[255633, 5528, 400097, 6567, 304, "Output"],
Cell[CellGroupData[{
Cell[655755, 12099, 139, 2, 23, "Print"],
Cell[655897, 12103, 220, 3, 23, "Print"],
Cell[656120, 12108, 338, 8, 23, "Print"],
Cell[656461, 12118, 138, 2, 23, "Print"],
Cell[656602, 12122, 195, 2, 23, "Print"],
Cell[656800, 12126, 131, 2, 23, "Print"],
Cell[656934, 12130, 89, 1, 23, "Print"],
Cell[657026, 12133, 191, 5, 23, "Print"],
Cell[657220, 12140, 94, 1, 23, "Print"],
Cell[657317, 12143, 175, 4, 23, "Print"],
Cell[657495, 12149, 110, 1, 23, "Print"],
Cell[657608, 12152, 177, 4, 23, "Print"],
Cell[657788, 12158, 286, 6, 23, "Print"],
Cell[658077, 12166, 141, 2, 23, "Print"],
Cell[658221, 12170, 88, 1, 23, "Print"],
Cell[658312, 12173, 106, 1, 23, "Print"],
Cell[658421, 12176, 106, 1, 23, "Print"],
Cell[658530, 12179, 141, 2, 23, "Print"],
Cell[658674, 12183, 135, 2, 23, "Print"],
Cell[658812, 12187, 144, 2, 23, "Print"],
Cell[658959, 12191, 331, 8, 23, "Print"],
Cell[659293, 12201, 131, 2, 23, "Print"],
Cell[659427, 12205, 101, 1, 23, "Print"],
Cell[659531, 12208, 265, 6, 23, "Print"],
Cell[659799, 12216, 598, 13, 23, "Print"],
Cell[660400, 12231, 423, 5, 43, "Print"],
Cell[660826, 12238, 591, 11, 23, "Print"],
Cell[661420, 12251, 439, 9, 23, "Print"],
Cell[661862, 12262, 106, 1, 23, "Print"],
Cell[661971, 12265, 141, 2, 23, "Print"],
Cell[662115, 12269, 136, 2, 23, "Print"],
Cell[662254, 12273, 144, 2, 23, "Print"],
Cell[662401, 12277, 331, 8, 23, "Print"],
Cell[662735, 12287, 131, 2, 23, "Print"],
Cell[662869, 12291, 102, 1, 23, "Print"],
Cell[662974, 12294, 265, 6, 23, "Print"],
Cell[663242, 12302, 599, 13, 23, "Print"],
Cell[663844, 12317, 421, 5, 43, "Print"],
Cell[664268, 12324, 587, 11, 23, "Print"],
Cell[664858, 12337, 439, 9, 23, "Print"],
Cell[665300, 12348, 155, 2, 23, "Print"],
Cell[665458, 12352, 153, 2, 23, "Print"],
Cell[665614, 12356, 106, 1, 23, "Print"],
Cell[665723, 12359, 141, 2, 23, "Print"],
Cell[665867, 12363, 95, 1, 23, "Print"],
Cell[665965, 12366, 117, 1, 23, "Print"],
Cell[666085, 12369, 128, 2, 23, "Print"],
Cell[666216, 12373, 273, 4, 100, "Print"],
Cell[666492, 12379, 487, 10, 23, "Print"],
Cell[666982, 12391, 306, 4, 43, "Print"],
Cell[667291, 12397, 412, 9, 23, "Print"],
Cell[667706, 12408, 102, 1, 23, "Print"],
Cell[667811, 12411, 215, 5, 23, "Print"],
Cell[668029, 12418, 375, 8, 23, "Print"],
Cell[668407, 12428, 116, 1, 23, "Print"],
Cell[668526, 12431, 102, 1, 23, "Print"],
Cell[668631, 12434, 198, 5, 23, "Print"],
Cell[668832, 12441, 538, 13, 23, "Print"],
Cell[669373, 12456, 359, 8, 23, "Print"],
Cell[669735, 12466, 200, 5, 23, "Print"],
Cell[669938, 12473, 539, 13, 23, "Print"],
Cell[670480, 12488, 359, 8, 23, "Print"],
Cell[670842, 12498, 200, 5, 23, "Print"],
Cell[671045, 12505, 542, 13, 23, "Print"],
Cell[671590, 12520, 357, 8, 23, "Print"],
Cell[671950, 12530, 198, 5, 23, "Print"],
Cell[672151, 12537, 544, 13, 23, "Print"],
Cell[672698, 12552, 355, 8, 23, "Print"],
Cell[673056, 12562, 200, 5, 23, "Print"],
Cell[673259, 12569, 542, 13, 23, "Print"],
Cell[673804, 12584, 359, 8, 23, "Print"],
Cell[674166, 12594, 198, 5, 23, "Print"],
Cell[674367, 12601, 554, 12, 23, "Print"],
Cell[674924, 12615, 491, 10, 23, "Print"],
Cell[675418, 12627, 610, 12, 23, "Print"],
Cell[676031, 12641, 273, 4, 100, "Print"],
Cell[676307, 12647, 491, 10, 23, "Print"],
Cell[676801, 12659, 306, 4, 43, "Print"],
Cell[677110, 12665, 419, 9, 23, "Print"],
Cell[677532, 12676, 258, 3, 43, "Print"],
Cell[677793, 12681, 508, 10, 23, "Print"],
Cell[678304, 12693, 235, 5, 23, "Print"],
Cell[678542, 12700, 155, 2, 23, "Print"],
Cell[678700, 12704, 409, 8, 23, "Print"],
Cell[679112, 12714, 170, 2, 23, "Print"],
Cell[679285, 12718, 404, 8, 23, "Print"],
Cell[679692, 12728, 365, 8, 23, "Print"],
Cell[680060, 12738, 542, 13, 23, "Print"],
Cell[680605, 12753, 357, 8, 23, "Print"],
Cell[680965, 12763, 397, 9, 23, "Print"],
Cell[681365, 12774, 99, 1, 23, "Print"]
}, Open  ]],
Cell[681479, 12778, 2700, 53, 304, "Output"],
Cell[CellGroupData[{
Cell[684204, 12835, 139, 2, 23, "Print"],
Cell[684346, 12839, 96, 1, 23, "Print"],
Cell[684445, 12842, 117, 1, 23, "Print"],
Cell[684565, 12845, 130, 2, 23, "Print"],
Cell[684698, 12849, 271, 4, 100, "Print"],
Cell[684972, 12855, 491, 10, 23, "Print"],
Cell[685466, 12867, 306, 4, 43, "Print"],
Cell[685775, 12873, 415, 9, 23, "Print"],
Cell[686193, 12884, 102, 1, 23, "Print"],
Cell[686298, 12887, 217, 5, 23, "Print"],
Cell[686518, 12894, 375, 8, 23, "Print"],
Cell[686896, 12904, 119, 1, 23, "Print"],
Cell[687018, 12907, 101, 1, 23, "Print"],
Cell[687122, 12910, 198, 5, 23, "Print"],
Cell[687323, 12917, 541, 13, 23, "Print"],
Cell[687867, 12932, 357, 8, 23, "Print"],
Cell[688227, 12942, 311, 7, 23, "Print"],
Cell[688541, 12951, 197, 5, 23, "Print"],
Cell[688741, 12958, 260, 3, 43, "Print"],
Cell[689004, 12963, 501, 9, 23, "Print"],
Cell[689508, 12974, 542, 13, 23, "Print"],
Cell[690053, 12989, 359, 8, 23, "Print"],
Cell[690415, 12999, 373, 8, 23, "Print"],
Cell[690791, 13009, 200, 5, 23, "Print"],
Cell[690994, 13016, 258, 3, 43, "Print"],
Cell[691255, 13021, 487, 9, 23, "Print"],
Cell[691745, 13032, 541, 13, 23, "Print"],
Cell[692289, 13047, 359, 8, 23, "Print"],
Cell[692651, 13057, 375, 8, 23, "Print"],
Cell[693029, 13067, 200, 5, 23, "Print"],
Cell[693232, 13074, 260, 3, 43, "Print"],
Cell[693495, 13079, 476, 9, 23, "Print"],
Cell[693974, 13090, 541, 13, 23, "Print"],
Cell[694518, 13105, 357, 8, 23, "Print"],
Cell[694878, 13115, 373, 8, 23, "Print"],
Cell[695254, 13125, 198, 5, 23, "Print"],
Cell[695455, 13132, 258, 3, 43, "Print"],
Cell[695716, 13137, 488, 9, 23, "Print"],
Cell[696207, 13148, 541, 13, 23, "Print"],
Cell[696751, 13163, 355, 8, 23, "Print"],
Cell[697109, 13173, 373, 8, 23, "Print"],
Cell[697485, 13183, 198, 5, 23, "Print"],
Cell[697686, 13190, 96, 1, 23, "Print"],
Cell[697785, 13193, 220, 5, 23, "Print"],
Cell[698008, 13200, 221, 5, 23, "Print"],
Cell[698232, 13207, 271, 4, 100, "Print"],
Cell[698506, 13213, 492, 10, 23, "Print"],
Cell[699001, 13225, 306, 4, 43, "Print"],
Cell[699310, 13231, 419, 9, 23, "Print"],
Cell[699732, 13242, 258, 3, 43, "Print"],
Cell[699993, 13247, 490, 9, 23, "Print"],
Cell[700486, 13258, 237, 5, 23, "Print"],
Cell[700726, 13265, 153, 2, 23, "Print"],
Cell[700882, 13269, 404, 8, 23, "Print"],
Cell[701289, 13279, 168, 2, 23, "Print"],
Cell[701460, 13283, 405, 8, 23, "Print"],
Cell[701868, 13293, 361, 8, 23, "Print"],
Cell[702232, 13303, 544, 13, 23, "Print"],
Cell[702779, 13318, 357, 8, 23, "Print"],
Cell[703139, 13328, 377, 8, 23, "Print"],
Cell[703519, 13338, 401, 9, 23, "Print"],
Cell[703923, 13349, 139, 2, 23, "Print"],
Cell[704065, 13353, 101, 1, 23, "Print"],
Cell[704169, 13356, 119, 1, 23, "Print"],
Cell[704291, 13359, 128, 2, 23, "Print"],
Cell[704422, 13363, 271, 4, 100, "Print"],
Cell[704696, 13369, 487, 10, 23, "Print"],
Cell[705186, 13381, 306, 4, 43, "Print"],
Cell[705495, 13387, 414, 9, 23, "Print"],
Cell[705912, 13398, 104, 1, 23, "Print"],
Cell[706019, 13401, 215, 5, 23, "Print"],
Cell[706237, 13408, 377, 8, 23, "Print"],
Cell[706617, 13418, 119, 1, 23, "Print"],
Cell[706739, 13421, 109, 1, 23, "Print"],
Cell[706851, 13424, 200, 5, 23, "Print"],
Cell[707054, 13431, 539, 13, 23, "Print"],
Cell[707596, 13446, 357, 8, 23, "Print"],
Cell[707956, 13456, 198, 5, 23, "Print"],
Cell[708157, 13463, 541, 13, 23, "Print"],
Cell[708701, 13478, 357, 8, 23, "Print"],
Cell[709061, 13488, 200, 5, 23, "Print"],
Cell[709264, 13495, 542, 13, 23, "Print"],
Cell[709809, 13510, 359, 8, 23, "Print"],
Cell[710171, 13520, 198, 5, 23, "Print"],
Cell[710372, 13527, 544, 13, 23, "Print"],
Cell[710919, 13542, 357, 8, 23, "Print"],
Cell[711279, 13552, 200, 5, 23, "Print"],
Cell[711482, 13559, 544, 13, 23, "Print"],
Cell[712029, 13574, 359, 8, 23, "Print"],
Cell[712391, 13584, 200, 5, 23, "Print"],
Cell[712594, 13591, 539, 13, 23, "Print"],
Cell[713136, 13606, 359, 8, 23, "Print"],
Cell[713498, 13616, 198, 5, 23, "Print"],
Cell[713699, 13623, 620, 12, 23, "Print"],
Cell[714322, 13637, 273, 4, 100, "Print"],
Cell[714598, 13643, 491, 10, 23, "Print"],
Cell[715092, 13655, 304, 4, 43, "Print"],
Cell[715399, 13661, 409, 8, 23, "Print"],
Cell[715811, 13671, 260, 3, 43, "Print"],
Cell[716074, 13676, 481, 9, 23, "Print"],
Cell[716558, 13687, 233, 5, 23, "Print"],
Cell[716794, 13694, 153, 2, 23, "Print"],
Cell[716950, 13698, 402, 8, 23, "Print"],
Cell[717355, 13708, 168, 2, 23, "Print"],
Cell[717526, 13712, 402, 8, 23, "Print"],
Cell[717931, 13722, 366, 8, 23, "Print"],
Cell[718300, 13732, 539, 13, 23, "Print"],
Cell[718842, 13747, 356, 8, 23, "Print"],
Cell[719201, 13757, 99, 1, 23, "Print"],
Cell[719303, 13760, 411, 9, 23, "Print"],
Cell[719717, 13771, 109, 1, 23, "Print"]
}, Open  ]],
Cell[719841, 13775, 3405, 62, 304, "Output"],
Cell[723249, 13839, 9049, 170, 304, "Output"],
Cell[CellGroupData[{
Cell[732323, 14013, 138, 2, 23, "Print"],
Cell[732464, 14017, 182, 2, 23, "Print"],
Cell[732649, 14021, 117, 1, 23, "Print"],
Cell[732769, 14024, 130, 2, 23, "Print"],
Cell[732902, 14028, 273, 4, 100, "Print"],
Cell[733178, 14034, 489, 10, 23, "Print"],
Cell[733670, 14046, 304, 4, 43, "Print"],
Cell[733977, 14052, 417, 9, 23, "Print"],
Cell[734397, 14063, 102, 1, 23, "Print"],
Cell[734502, 14066, 217, 5, 23, "Print"],
Cell[734722, 14073, 379, 8, 23, "Print"],
Cell[735104, 14083, 117, 1, 23, "Print"],
Cell[735224, 14086, 192, 2, 23, "Print"],
Cell[735419, 14090, 117, 1, 23, "Print"],
Cell[735539, 14093, 379, 8, 23, "Print"],
Cell[735921, 14103, 119, 1, 23, "Print"],
Cell[736043, 14106, 119, 1, 23, "Print"],
Cell[736165, 14109, 138, 3, 23, "Print"],
Cell[736306, 14114, 200, 5, 23, "Print"],
Cell[736509, 14121, 419, 9, 23, "Print"],
Cell[736931, 14132, 131, 2, 23, "Print"],
Cell[737065, 14136, 95, 1, 23, "Print"],
Cell[737163, 14139, 86, 1, 23, "Print"],
Cell[737252, 14142, 107, 1, 23, "Print"],
Cell[737362, 14145, 149, 3, 23, "Print"],
Cell[737514, 14150, 540, 13, 23, "Print"],
Cell[738057, 14165, 359, 8, 23, "Print"],
Cell[738419, 14175, 198, 5, 23, "Print"],
Cell[738620, 14182, 419, 9, 23, "Print"],
Cell[739042, 14193, 107, 1, 23, "Print"],
Cell[739152, 14196, 150, 3, 23, "Print"],
Cell[739305, 14201, 260, 3, 43, "Print"],
Cell[739568, 14206, 498, 9, 23, "Print"],
Cell[740069, 14217, 544, 13, 23, "Print"],
Cell[740616, 14232, 357, 8, 23, "Print"],
Cell[740976, 14242, 200, 5, 23, "Print"],
Cell[741179, 14249, 357, 8, 23, "Print"],
Cell[741539, 14259, 105, 1, 23, "Print"],
Cell[741647, 14262, 151, 3, 23, "Print"],
Cell[741801, 14267, 258, 3, 43, "Print"],
Cell[742062, 14272, 488, 9, 23, "Print"],
Cell[742553, 14283, 542, 13, 23, "Print"],
Cell[743098, 14298, 357, 8, 23, "Print"],
Cell[743458, 14308, 515, 10, 23, "Print"],
Cell[743976, 14320, 117, 1, 23, "Print"],
Cell[744096, 14323, 119, 1, 23, "Print"],
Cell[744218, 14326, 138, 3, 23, "Print"],
Cell[744359, 14331, 200, 5, 23, "Print"],
Cell[744562, 14338, 421, 9, 23, "Print"],
Cell[744986, 14349, 544, 13, 23, "Print"],
Cell[745533, 14364, 357, 8, 23, "Print"],
Cell[745893, 14374, 200, 5, 23, "Print"],
Cell[746096, 14381, 419, 9, 23, "Print"],
Cell[746518, 14392, 107, 1, 23, "Print"],
Cell[746628, 14395, 149, 3, 23, "Print"],
Cell[746780, 14400, 260, 3, 43, "Print"],
Cell[747043, 14405, 488, 9, 23, "Print"],
Cell[747534, 14416, 541, 13, 23, "Print"],
Cell[748078, 14431, 359, 8, 23, "Print"],
Cell[748440, 14441, 511, 10, 23, "Print"],
Cell[748954, 14453, 117, 1, 23, "Print"],
Cell[749074, 14456, 119, 1, 23, "Print"],
Cell[749196, 14459, 137, 3, 23, "Print"],
Cell[749336, 14464, 198, 5, 23, "Print"],
Cell[749537, 14471, 421, 9, 23, "Print"],
Cell[749961, 14482, 541, 13, 23, "Print"],
Cell[750505, 14497, 353, 8, 23, "Print"],
Cell[750861, 14507, 198, 5, 23, "Print"],
Cell[751062, 14514, 357, 8, 23, "Print"],
Cell[751422, 14524, 107, 1, 23, "Print"],
Cell[751532, 14527, 150, 3, 23, "Print"],
Cell[751685, 14532, 258, 3, 43, "Print"],
Cell[751946, 14537, 499, 9, 23, "Print"],
Cell[752448, 14548, 542, 13, 23, "Print"],
Cell[752993, 14563, 355, 8, 23, "Print"],
Cell[753351, 14573, 447, 9, 23, "Print"],
Cell[753801, 14584, 119, 1, 23, "Print"],
Cell[753923, 14587, 119, 1, 23, "Print"],
Cell[754045, 14590, 139, 3, 23, "Print"],
Cell[754187, 14595, 200, 5, 23, "Print"],
Cell[754390, 14602, 355, 8, 23, "Print"],
Cell[754748, 14612, 542, 13, 23, "Print"],
Cell[755293, 14627, 357, 8, 23, "Print"],
Cell[755653, 14637, 200, 5, 23, "Print"],
Cell[755856, 14644, 421, 9, 23, "Print"],
Cell[756280, 14655, 105, 1, 23, "Print"],
Cell[756388, 14658, 151, 3, 23, "Print"],
Cell[756542, 14663, 258, 3, 43, "Print"],
Cell[756803, 14668, 499, 9, 23, "Print"],
Cell[757305, 14679, 544, 13, 23, "Print"],
Cell[757852, 14694, 359, 8, 23, "Print"],
Cell[758214, 14704, 507, 10, 23, "Print"],
Cell[758724, 14716, 119, 1, 23, "Print"],
Cell[758846, 14719, 119, 1, 23, "Print"],
Cell[758968, 14722, 138, 3, 23, "Print"],
Cell[759109, 14727, 200, 5, 23, "Print"],
Cell[759312, 14734, 419, 9, 23, "Print"],
Cell[759734, 14745, 544, 13, 23, "Print"],
Cell[760281, 14760, 354, 8, 23, "Print"],
Cell[760638, 14770, 200, 5, 23, "Print"],
Cell[760841, 14777, 359, 8, 23, "Print"],
Cell[761203, 14787, 107, 1, 23, "Print"],
Cell[761313, 14790, 151, 3, 23, "Print"],
Cell[761467, 14795, 260, 3, 43, "Print"],
Cell[761730, 14800, 500, 9, 23, "Print"],
Cell[762233, 14811, 544, 13, 23, "Print"],
Cell[762780, 14826, 357, 8, 23, "Print"],
Cell[763140, 14836, 447, 9, 23, "Print"],
Cell[763590, 14847, 117, 1, 23, "Print"],
Cell[763710, 14850, 119, 1, 23, "Print"],
Cell[763832, 14853, 138, 3, 23, "Print"],
Cell[763973, 14858, 198, 5, 23, "Print"],
Cell[764174, 14865, 355, 8, 23, "Print"],
Cell[764532, 14875, 539, 13, 23, "Print"],
Cell[765074, 14890, 357, 8, 23, "Print"],
Cell[765434, 14900, 198, 5, 23, "Print"],
Cell[765635, 14907, 421, 9, 23, "Print"],
Cell[766059, 14918, 107, 1, 23, "Print"],
Cell[766169, 14921, 151, 3, 23, "Print"],
Cell[766323, 14926, 258, 3, 43, "Print"],
Cell[766584, 14931, 502, 9, 23, "Print"],
Cell[767089, 14942, 540, 13, 23, "Print"],
Cell[767632, 14957, 359, 8, 23, "Print"],
Cell[767994, 14967, 511, 10, 23, "Print"],
Cell[768508, 14979, 119, 1, 23, "Print"],
Cell[768630, 14982, 117, 1, 23, "Print"],
Cell[768750, 14985, 140, 3, 23, "Print"],
Cell[768893, 14990, 200, 5, 23, "Print"],
Cell[769096, 14997, 359, 8, 23, "Print"],
Cell[769458, 15007, 539, 13, 23, "Print"],
Cell[770000, 15022, 357, 8, 23, "Print"],
Cell[770360, 15032, 200, 5, 23, "Print"],
Cell[770563, 15039, 357, 8, 23, "Print"],
Cell[770923, 15049, 105, 1, 23, "Print"],
Cell[771031, 15052, 149, 3, 23, "Print"],
Cell[771183, 15057, 260, 3, 43, "Print"],
Cell[771446, 15062, 501, 9, 23, "Print"],
Cell[771950, 15073, 539, 13, 23, "Print"],
Cell[772492, 15088, 355, 8, 23, "Print"],
Cell[772850, 15098, 451, 9, 23, "Print"],
Cell[773304, 15109, 119, 1, 23, "Print"],
Cell[773426, 15112, 119, 1, 23, "Print"],
Cell[773548, 15115, 140, 3, 23, "Print"],
Cell[773691, 15120, 198, 5, 23, "Print"],
Cell[773892, 15127, 421, 9, 23, "Print"],
Cell[774316, 15138, 544, 13, 23, "Print"],
Cell[774863, 15153, 357, 8, 23, "Print"],
Cell[775223, 15163, 198, 5, 23, "Print"],
Cell[775424, 15170, 421, 9, 23, "Print"],
Cell[775848, 15181, 107, 1, 23, "Print"],
Cell[775958, 15184, 151, 3, 23, "Print"],
Cell[776112, 15189, 260, 3, 43, "Print"],
Cell[776375, 15194, 499, 9, 23, "Print"],
Cell[776877, 15205, 539, 13, 23, "Print"],
Cell[777419, 15220, 355, 8, 23, "Print"],
Cell[777777, 15230, 511, 10, 23, "Print"],
Cell[778291, 15242, 117, 1, 23, "Print"],
Cell[778411, 15245, 117, 1, 23, "Print"],
Cell[778531, 15248, 155, 4, 23, "Print"],
Cell[778689, 15254, 198, 5, 23, "Print"],
Cell[778890, 15261, 353, 8, 23, "Print"],
Cell[779246, 15271, 542, 13, 23, "Print"],
Cell[779791, 15286, 355, 8, 23, "Print"],
Cell[780149, 15296, 198, 5, 23, "Print"],
Cell[780350, 15303, 357, 8, 23, "Print"],
Cell[780710, 15313, 105, 1, 23, "Print"],
Cell[780818, 15316, 148, 3, 23, "Print"],
Cell[780969, 15321, 258, 3, 43, "Print"],
Cell[781230, 15326, 496, 9, 23, "Print"],
Cell[781729, 15337, 544, 13, 23, "Print"],
Cell[782276, 15352, 359, 8, 23, "Print"],
Cell[782638, 15362, 512, 10, 23, "Print"],
Cell[783153, 15374, 117, 1, 23, "Print"],
Cell[783273, 15377, 117, 1, 23, "Print"],
Cell[783393, 15380, 158, 4, 23, "Print"],
Cell[783554, 15386, 200, 5, 23, "Print"],
Cell[783757, 15393, 355, 8, 23, "Print"],
Cell[784115, 15403, 537, 13, 23, "Print"],
Cell[784655, 15418, 357, 8, 23, "Print"],
Cell[785015, 15428, 200, 5, 23, "Print"],
Cell[785218, 15435, 419, 9, 23, "Print"],
Cell[785640, 15446, 107, 1, 23, "Print"],
Cell[785750, 15449, 149, 3, 23, "Print"],
Cell[785902, 15454, 260, 3, 43, "Print"],
Cell[786165, 15459, 490, 9, 23, "Print"],
Cell[786658, 15470, 541, 13, 23, "Print"],
Cell[787202, 15485, 357, 8, 23, "Print"],
Cell[787562, 15495, 515, 10, 23, "Print"],
Cell[788080, 15507, 117, 1, 23, "Print"],
Cell[788200, 15510, 119, 1, 23, "Print"],
Cell[788322, 15513, 156, 4, 23, "Print"],
Cell[788481, 15519, 198, 5, 23, "Print"],
Cell[788682, 15526, 357, 8, 23, "Print"],
Cell[789042, 15536, 539, 13, 23, "Print"],
Cell[789584, 15551, 357, 8, 23, "Print"],
Cell[789944, 15561, 198, 5, 23, "Print"],
Cell[790145, 15568, 355, 8, 23, "Print"],
Cell[790503, 15578, 105, 1, 23, "Print"],
Cell[790611, 15581, 149, 3, 23, "Print"],
Cell[790763, 15586, 260, 3, 43, "Print"],
Cell[791026, 15591, 501, 9, 23, "Print"],
Cell[791530, 15602, 542, 13, 23, "Print"],
Cell[792075, 15617, 359, 8, 23, "Print"],
Cell[792437, 15627, 505, 10, 23, "Print"],
Cell[792945, 15639, 119, 1, 23, "Print"],
Cell[793067, 15642, 117, 1, 23, "Print"],
Cell[793187, 15645, 158, 4, 23, "Print"],
Cell[793348, 15651, 198, 5, 23, "Print"],
Cell[793549, 15658, 355, 8, 23, "Print"],
Cell[793907, 15668, 544, 13, 23, "Print"],
Cell[794454, 15683, 357, 8, 23, "Print"],
Cell[794814, 15693, 200, 5, 23, "Print"],
Cell[795017, 15700, 359, 8, 23, "Print"],
Cell[795379, 15710, 107, 1, 23, "Print"],
Cell[795489, 15713, 149, 3, 23, "Print"],
Cell[795641, 15718, 260, 3, 43, "Print"],
Cell[795904, 15723, 499, 9, 23, "Print"],
Cell[796406, 15734, 542, 13, 23, "Print"],
Cell[796951, 15749, 357, 8, 23, "Print"],
Cell[797311, 15759, 449, 9, 23, "Print"],
Cell[797763, 15770, 117, 1, 23, "Print"],
Cell[797883, 15773, 119, 1, 23, "Print"],
Cell[798005, 15776, 155, 4, 23, "Print"],
Cell[798163, 15782, 198, 5, 23, "Print"],
Cell[798364, 15789, 355, 8, 23, "Print"],
Cell[798722, 15799, 542, 13, 23, "Print"],
Cell[799267, 15814, 357, 8, 23, "Print"],
Cell[799627, 15824, 198, 5, 23, "Print"],
Cell[799828, 15831, 357, 8, 23, "Print"],
Cell[800188, 15841, 105, 1, 23, "Print"],
Cell[800296, 15844, 152, 3, 23, "Print"],
Cell[800451, 15849, 260, 3, 43, "Print"],
Cell[800714, 15854, 497, 9, 23, "Print"],
Cell[801214, 15865, 541, 13, 23, "Print"],
Cell[801758, 15880, 359, 8, 23, "Print"],
Cell[802120, 15890, 449, 9, 23, "Print"],
Cell[802572, 15901, 119, 1, 23, "Print"],
Cell[802694, 15904, 117, 1, 23, "Print"],
Cell[802814, 15907, 158, 4, 23, "Print"],
Cell[802975, 15913, 200, 5, 23, "Print"],
Cell[803178, 15920, 421, 9, 23, "Print"],
Cell[803602, 15931, 544, 13, 23, "Print"],
Cell[804149, 15946, 357, 8, 23, "Print"],
Cell[804509, 15956, 200, 5, 23, "Print"],
Cell[804712, 15963, 419, 9, 23, "Print"],
Cell[805134, 15974, 107, 1, 23, "Print"],
Cell[805244, 15977, 150, 3, 23, "Print"],
Cell[805397, 15982, 260, 3, 43, "Print"],
Cell[805660, 15987, 500, 9, 23, "Print"],
Cell[806163, 15998, 542, 13, 23, "Print"],
Cell[806708, 16013, 359, 8, 23, "Print"],
Cell[807070, 16023, 513, 10, 23, "Print"],
Cell[807586, 16035, 117, 1, 23, "Print"],
Cell[807706, 16038, 117, 1, 23, "Print"],
Cell[807826, 16041, 158, 4, 23, "Print"],
Cell[807987, 16047, 198, 5, 23, "Print"],
Cell[808188, 16054, 419, 9, 23, "Print"],
Cell[808610, 16065, 544, 13, 23, "Print"],
Cell[809157, 16080, 357, 8, 23, "Print"],
Cell[809517, 16090, 200, 5, 23, "Print"],
Cell[809720, 16097, 419, 9, 23, "Print"],
Cell[810142, 16108, 107, 1, 23, "Print"],
Cell[810252, 16111, 151, 3, 23, "Print"],
Cell[810406, 16116, 258, 3, 43, "Print"],
Cell[810667, 16121, 497, 9, 23, "Print"],
Cell[811167, 16132, 541, 13, 23, "Print"],
Cell[811711, 16147, 357, 8, 23, "Print"],
Cell[812071, 16157, 508, 10, 23, "Print"],
Cell[812582, 16169, 119, 1, 23, "Print"],
Cell[812704, 16172, 119, 1, 23, "Print"],
Cell[812826, 16175, 158, 4, 23, "Print"],
Cell[812987, 16181, 198, 5, 23, "Print"],
Cell[813188, 16188, 357, 8, 23, "Print"],
Cell[813548, 16198, 534, 13, 23, "Print"],
Cell[814085, 16213, 359, 8, 23, "Print"],
Cell[814447, 16223, 200, 5, 23, "Print"],
Cell[814650, 16230, 419, 9, 23, "Print"],
Cell[815072, 16241, 105, 1, 23, "Print"],
Cell[815180, 16244, 149, 3, 23, "Print"],
Cell[815332, 16249, 258, 3, 43, "Print"],
Cell[815593, 16254, 492, 9, 23, "Print"],
Cell[816088, 16265, 536, 13, 23, "Print"],
Cell[816627, 16280, 359, 8, 23, "Print"],
Cell[816989, 16290, 511, 10, 23, "Print"],
Cell[817503, 16302, 119, 1, 23, "Print"],
Cell[817625, 16305, 117, 1, 23, "Print"],
Cell[817745, 16308, 158, 4, 23, "Print"],
Cell[817906, 16314, 200, 5, 23, "Print"],
Cell[818109, 16321, 419, 9, 23, "Print"],
Cell[818531, 16332, 539, 13, 23, "Print"],
Cell[819073, 16347, 357, 8, 23, "Print"],
Cell[819433, 16357, 198, 5, 23, "Print"],
Cell[819634, 16364, 419, 9, 23, "Print"],
Cell[820056, 16375, 105, 1, 23, "Print"],
Cell[820164, 16378, 150, 3, 23, "Print"],
Cell[820317, 16383, 260, 3, 43, "Print"],
Cell[820580, 16388, 501, 9, 23, "Print"],
Cell[821084, 16399, 542, 13, 23, "Print"],
Cell[821629, 16414, 357, 8, 23, "Print"],
Cell[821989, 16424, 509, 10, 23, "Print"],
Cell[822501, 16436, 117, 1, 23, "Print"],
Cell[822621, 16439, 117, 1, 23, "Print"],
Cell[822741, 16442, 158, 4, 23, "Print"],
Cell[822902, 16448, 198, 5, 23, "Print"],
Cell[823103, 16455, 419, 9, 23, "Print"],
Cell[823525, 16466, 542, 13, 23, "Print"],
Cell[824070, 16481, 359, 8, 23, "Print"],
Cell[824432, 16491, 198, 5, 23, "Print"],
Cell[824633, 16498, 421, 9, 23, "Print"],
Cell[825057, 16509, 107, 1, 23, "Print"],
Cell[825167, 16512, 151, 3, 23, "Print"],
Cell[825321, 16517, 258, 3, 43, "Print"],
Cell[825582, 16522, 501, 9, 23, "Print"],
Cell[826086, 16533, 542, 13, 23, "Print"],
Cell[826631, 16548, 359, 8, 23, "Print"],
Cell[826993, 16558, 511, 10, 23, "Print"],
Cell[827507, 16570, 119, 1, 23, "Print"],
Cell[827629, 16573, 117, 1, 23, "Print"],
Cell[827749, 16576, 156, 4, 23, "Print"],
Cell[827908, 16582, 198, 5, 23, "Print"],
Cell[828109, 16589, 421, 9, 23, "Print"],
Cell[828533, 16600, 541, 13, 23, "Print"],
Cell[829077, 16615, 359, 8, 23, "Print"],
Cell[829439, 16625, 198, 5, 23, "Print"],
Cell[829640, 16632, 421, 9, 23, "Print"],
Cell[830064, 16643, 105, 1, 23, "Print"],
Cell[830172, 16646, 151, 3, 23, "Print"],
Cell[830326, 16651, 260, 3, 43, "Print"],
Cell[830589, 16656, 478, 9, 23, "Print"],
Cell[831070, 16667, 539, 13, 23, "Print"],
Cell[831612, 16682, 359, 8, 23, "Print"],
Cell[831974, 16692, 511, 10, 23, "Print"],
Cell[832488, 16704, 117, 1, 23, "Print"],
Cell[832608, 16707, 119, 1, 23, "Print"],
Cell[832730, 16710, 156, 4, 23, "Print"],
Cell[832889, 16716, 198, 5, 23, "Print"],
Cell[833090, 16723, 359, 8, 23, "Print"],
Cell[833452, 16733, 542, 13, 23, "Print"],
Cell[833997, 16748, 357, 8, 23, "Print"],
Cell[834357, 16758, 200, 5, 23, "Print"],
Cell[834560, 16765, 355, 8, 23, "Print"],
Cell[834918, 16775, 107, 1, 23, "Print"],
Cell[835028, 16778, 151, 3, 23, "Print"],
Cell[835182, 16783, 258, 3, 43, "Print"],
Cell[835443, 16788, 487, 9, 23, "Print"],
Cell[835933, 16799, 539, 13, 23, "Print"],
Cell[836475, 16814, 357, 8, 23, "Print"],
Cell[836835, 16824, 445, 9, 23, "Print"],
Cell[837283, 16835, 119, 1, 23, "Print"],
Cell[837405, 16838, 117, 1, 23, "Print"],
Cell[837525, 16841, 157, 4, 23, "Print"],
Cell[837685, 16847, 200, 5, 23, "Print"],
Cell[837888, 16854, 357, 8, 23, "Print"],
Cell[838248, 16864, 539, 13, 23, "Print"],
Cell[838790, 16879, 357, 8, 23, "Print"],
Cell[839150, 16889, 197, 5, 23, "Print"],
Cell[839350, 16896, 419, 9, 23, "Print"],
Cell[839772, 16907, 107, 1, 23, "Print"],
Cell[839882, 16910, 150, 3, 23, "Print"],
Cell[840035, 16915, 260, 3, 43, "Print"],
Cell[840298, 16920, 500, 9, 23, "Print"],
Cell[840801, 16931, 540, 13, 23, "Print"],
Cell[841344, 16946, 359, 8, 23, "Print"],
Cell[841706, 16956, 515, 10, 23, "Print"],
Cell[842224, 16968, 116, 1, 23, "Print"],
Cell[842343, 16971, 117, 1, 23, "Print"],
Cell[842463, 16974, 155, 4, 23, "Print"],
Cell[842621, 16980, 198, 5, 23, "Print"],
Cell[842822, 16987, 417, 9, 23, "Print"],
Cell[843242, 16998, 536, 13, 23, "Print"],
Cell[843781, 17013, 357, 8, 23, "Print"],
Cell[844141, 17023, 200, 5, 23, "Print"],
Cell[844344, 17030, 357, 8, 23, "Print"],
Cell[844704, 17040, 107, 1, 23, "Print"],
Cell[844814, 17043, 149, 3, 23, "Print"],
Cell[844966, 17048, 260, 3, 43, "Print"],
Cell[845229, 17053, 487, 9, 23, "Print"],
Cell[845719, 17064, 541, 13, 23, "Print"],
Cell[846263, 17079, 359, 8, 23, "Print"],
Cell[846625, 17089, 451, 9, 23, "Print"],
Cell[847079, 17100, 119, 1, 23, "Print"],
Cell[847201, 17103, 117, 1, 23, "Print"],
Cell[847321, 17106, 157, 4, 23, "Print"],
Cell[847481, 17112, 198, 5, 23, "Print"],
Cell[847682, 17119, 421, 9, 23, "Print"],
Cell[848106, 17130, 538, 13, 23, "Print"],
Cell[848647, 17145, 357, 8, 23, "Print"],
Cell[849007, 17155, 198, 5, 23, "Print"],
Cell[849208, 17162, 421, 9, 23, "Print"],
Cell[849632, 17173, 107, 1, 23, "Print"],
Cell[849742, 17176, 147, 3, 23, "Print"],
Cell[849892, 17181, 260, 3, 43, "Print"],
Cell[850155, 17186, 487, 9, 23, "Print"],
Cell[850645, 17197, 541, 13, 23, "Print"],
Cell[851189, 17212, 357, 8, 23, "Print"],
Cell[851549, 17222, 449, 9, 23, "Print"],
Cell[852001, 17233, 119, 1, 23, "Print"],
Cell[852123, 17236, 86, 1, 23, "Print"],
Cell[852212, 17239, 275, 4, 23, "Print"],
Cell[852490, 17245, 218, 5, 23, "Print"],
Cell[852711, 17252, 503, 10, 23, "Print"],
Cell[853217, 17264, 154, 2, 23, "Print"]
}, Open  ]],
Cell[853386, 17269, 1204, 28, 116, "Output"],
Cell[CellGroupData[{
Cell[854615, 17301, 139, 2, 23, "Print"],
Cell[854757, 17305, 154, 2, 23, "Print"],
Cell[854914, 17309, 117, 1, 23, "Print"],
Cell[855034, 17312, 128, 2, 23, "Print"],
Cell[855165, 17316, 273, 4, 100, "Print"],
Cell[855441, 17322, 491, 10, 23, "Print"],
Cell[855935, 17334, 304, 4, 43, "Print"],
Cell[856242, 17340, 415, 9, 23, "Print"],
Cell[856660, 17351, 104, 1, 23, "Print"],
Cell[856767, 17354, 148, 3, 23, "Print"],
Cell[856918, 17359, 102, 1, 23, "Print"],
Cell[857023, 17362, 215, 5, 23, "Print"],
Cell[857241, 17369, 377, 8, 23, "Print"],
Cell[857621, 17379, 119, 1, 23, "Print"],
Cell[857743, 17382, 162, 2, 23, "Print"],
Cell[857908, 17386, 119, 1, 23, "Print"],
Cell[858030, 17389, 155, 4, 23, "Print"],
Cell[858188, 17395, 117, 1, 23, "Print"],
Cell[858308, 17398, 439, 9, 23, "Print"],
Cell[858750, 17409, 198, 5, 23, "Print"],
Cell[858951, 17416, 419, 9, 23, "Print"],
Cell[859373, 17427, 131, 2, 23, "Print"],
Cell[859507, 17431, 98, 1, 23, "Print"],
Cell[859608, 17434, 88, 1, 23, "Print"],
Cell[859699, 17437, 538, 13, 23, "Print"],
Cell[860240, 17452, 359, 8, 23, "Print"],
Cell[860602, 17462, 375, 8, 23, "Print"],
Cell[860980, 17472, 198, 5, 23, "Print"],
Cell[861181, 17479, 419, 9, 23, "Print"],
Cell[861603, 17490, 258, 3, 43, "Print"],
Cell[861864, 17495, 497, 9, 23, "Print"],
Cell[862364, 17506, 544, 13, 23, "Print"],
Cell[862911, 17521, 359, 8, 23, "Print"],
Cell[863273, 17531, 311, 7, 23, "Print"],
Cell[863587, 17540, 197, 5, 23, "Print"],
Cell[863787, 17547, 355, 8, 23, "Print"],
Cell[864145, 17557, 260, 3, 43, "Print"],
Cell[864408, 17562, 492, 9, 23, "Print"],
Cell[864903, 17573, 542, 13, 23, "Print"],
Cell[865448, 17588, 359, 8, 23, "Print"],
Cell[865810, 17598, 375, 8, 23, "Print"],
Cell[866188, 17608, 198, 5, 23, "Print"],
Cell[866389, 17615, 421, 9, 23, "Print"],
Cell[866813, 17626, 260, 3, 43, "Print"],
Cell[867076, 17631, 486, 9, 23, "Print"],
Cell[867565, 17642, 538, 13, 23, "Print"],
Cell[868106, 17657, 359, 8, 23, "Print"],
Cell[868468, 17667, 309, 7, 23, "Print"],
Cell[868780, 17676, 198, 5, 23, "Print"],
Cell[868981, 17683, 419, 9, 23, "Print"],
Cell[869403, 17694, 258, 3, 43, "Print"],
Cell[869664, 17699, 500, 9, 23, "Print"],
Cell[870167, 17710, 538, 13, 23, "Print"],
Cell[870708, 17725, 359, 8, 23, "Print"],
Cell[871070, 17735, 311, 7, 23, "Print"],
Cell[871384, 17744, 200, 5, 23, "Print"],
Cell[871587, 17751, 353, 8, 23, "Print"],
Cell[871943, 17761, 258, 3, 43, "Print"],
Cell[872204, 17766, 494, 9, 23, "Print"],
Cell[872701, 17777, 539, 13, 23, "Print"],
Cell[873243, 17792, 357, 8, 23, "Print"],
Cell[873603, 17802, 315, 7, 23, "Print"],
Cell[873921, 17811, 198, 5, 23, "Print"],
Cell[874122, 17818, 421, 9, 23, "Print"],
Cell[874546, 17829, 96, 1, 23, "Print"],
Cell[874645, 17832, 222, 5, 23, "Print"],
Cell[874870, 17839, 224, 5, 23, "Print"],
Cell[875097, 17846, 260, 3, 43, "Print"],
Cell[875360, 17851, 491, 9, 23, "Print"],
Cell[875854, 17862, 541, 13, 23, "Print"],
Cell[876398, 17877, 357, 8, 23, "Print"],
Cell[876758, 17887, 379, 8, 23, "Print"],
Cell[877140, 17897, 197, 5, 23, "Print"],
Cell[877340, 17904, 421, 9, 23, "Print"],
Cell[877764, 17915, 96, 1, 23, "Print"],
Cell[877863, 17918, 220, 5, 23, "Print"],
Cell[878086, 17925, 222, 5, 23, "Print"],
Cell[878311, 17932, 273, 4, 100, "Print"],
Cell[878587, 17938, 488, 10, 23, "Print"],
Cell[879078, 17950, 306, 4, 43, "Print"],
Cell[879387, 17956, 432, 9, 23, "Print"],
Cell[879822, 17967, 258, 3, 43, "Print"],
Cell[880083, 17972, 499, 9, 23, "Print"],
Cell[880585, 17983, 238, 5, 23, "Print"],
Cell[880826, 17990, 153, 2, 23, "Print"],
Cell[880982, 17994, 399, 8, 23, "Print"],
Cell[881384, 18004, 170, 2, 23, "Print"],
Cell[881557, 18008, 399, 8, 23, "Print"],
Cell[881959, 18018, 357, 8, 23, "Print"],
Cell[882319, 18028, 544, 13, 23, "Print"],
Cell[882866, 18043, 359, 8, 23, "Print"],
Cell[883228, 18053, 375, 8, 23, "Print"],
Cell[883606, 18063, 99, 1, 23, "Print"],
Cell[883708, 18066, 513, 10, 23, "Print"],
Cell[884224, 18078, 109, 1, 23, "Print"]
}, Open  ]],
Cell[884348, 18082, 27620, 482, 304, 11760, 220, "CachedBoxData", "BoxData", \
"Output"],
Cell[911971, 18566, 11955, 226, 304, "Output"],
Cell[923929, 18794, 27620, 482, 304, 11760, 220, "CachedBoxData", "BoxData", \
"Output"],
Cell[CellGroupData[{
Cell[951574, 19280, 139, 2, 23, "Print"],
Cell[951716, 19284, 102, 1, 23, "Print"],
Cell[951821, 19287, 107, 1, 23, "Print"],
Cell[951931, 19290, 150, 3, 23, "Print"],
Cell[952084, 19295, 538, 13, 23, "Print"],
Cell[952625, 19310, 359, 8, 23, "Print"],
Cell[952987, 19320, 421, 9, 23, "Print"],
Cell[953411, 19331, 101, 1, 23, "Print"]
}, Open  ]],
Cell[953527, 19335, 886, 19, 304, "Output"],
Cell[954416, 19356, 107, 1, 23, "Print"],
Cell[954526, 19359, 898, 20, 304, "Output"],
Cell[955427, 19381, 132, 2, 23, "Print"],
Cell[955562, 19385, 22195, 378, 304, "Output"],
Cell[CellGroupData[{
Cell[977782, 19767, 139, 2, 23, "Print"],
Cell[977924, 19771, 131, 2, 23, "Print"],
Cell[978058, 19775, 180, 2, 23, "Print"],
Cell[978241, 19779, 119, 1, 23, "Print"],
Cell[978363, 19782, 127, 2, 23, "Print"],
Cell[978493, 19786, 271, 4, 100, "Print"],
Cell[978767, 19792, 491, 10, 23, "Print"],
Cell[979261, 19804, 306, 4, 43, "Print"],
Cell[979570, 19810, 413, 9, 23, "Print"],
Cell[979986, 19821, 104, 1, 23, "Print"],
Cell[980093, 19824, 215, 5, 23, "Print"],
Cell[980311, 19831, 374, 8, 23, "Print"],
Cell[980688, 19841, 116, 1, 23, "Print"],
Cell[980807, 19844, 192, 2, 23, "Print"],
Cell[981002, 19848, 119, 1, 23, "Print"],
Cell[981124, 19851, 377, 8, 23, "Print"],
Cell[981504, 19861, 119, 1, 23, "Print"],
Cell[981626, 19864, 117, 1, 23, "Print"],
Cell[981746, 19867, 140, 3, 23, "Print"],
Cell[981889, 19872, 200, 5, 23, "Print"],
Cell[982092, 19879, 419, 9, 23, "Print"],
Cell[982514, 19890, 133, 2, 23, "Print"],
Cell[982650, 19894, 96, 1, 23, "Print"],
Cell[982749, 19897, 86, 1, 23, "Print"],
Cell[982838, 19900, 105, 1, 23, "Print"],
Cell[982946, 19903, 148, 3, 23, "Print"],
Cell[983097, 19908, 542, 13, 23, "Print"],
Cell[983642, 19923, 359, 8, 23, "Print"],
Cell[984004, 19933, 200, 5, 23, "Print"],
Cell[984207, 19940, 355, 8, 23, "Print"],
Cell[984565, 19950, 107, 1, 23, "Print"],
Cell[984675, 19953, 150, 3, 23, "Print"],
Cell[984828, 19958, 260, 3, 43, "Print"],
Cell[985091, 19963, 481, 9, 23, "Print"],
Cell[985575, 19974, 538, 13, 23, "Print"],
Cell[986116, 19989, 357, 8, 23, "Print"],
Cell[986476, 19999, 200, 5, 23, "Print"],
Cell[986679, 20006, 421, 9, 23, "Print"],
Cell[987103, 20017, 107, 1, 23, "Print"],
Cell[987213, 20020, 149, 3, 23, "Print"],
Cell[987365, 20025, 260, 3, 43, "Print"],
Cell[987628, 20030, 498, 9, 23, "Print"],
Cell[988129, 20041, 541, 13, 23, "Print"],
Cell[988673, 20056, 359, 8, 23, "Print"],
Cell[989035, 20066, 515, 10, 23, "Print"],
Cell[989553, 20078, 119, 1, 23, "Print"],
Cell[989675, 20081, 117, 1, 23, "Print"],
Cell[989795, 20084, 140, 3, 23, "Print"],
Cell[989938, 20089, 198, 5, 23, "Print"],
Cell[990139, 20096, 421, 9, 23, "Print"],
Cell[990563, 20107, 542, 13, 23, "Print"],
Cell[991108, 20122, 357, 8, 23, "Print"],
Cell[991468, 20132, 198, 5, 23, "Print"],
Cell[991669, 20139, 419, 9, 23, "Print"],
Cell[992091, 20150, 105, 1, 23, "Print"],
Cell[992199, 20153, 149, 3, 23, "Print"],
Cell[992351, 20158, 258, 3, 43, "Print"],
Cell[992612, 20163, 488, 9, 23, "Print"],
Cell[993103, 20174, 544, 13, 23, "Print"],
Cell[993650, 20189, 359, 8, 23, "Print"],
Cell[994012, 20199, 511, 10, 23, "Print"],
Cell[994526, 20211, 119, 1, 23, "Print"],
Cell[994648, 20214, 117, 1, 23, "Print"],
Cell[994768, 20217, 140, 3, 23, "Print"],
Cell[994911, 20222, 198, 5, 23, "Print"],
Cell[995112, 20229, 419, 9, 23, "Print"],
Cell[995534, 20240, 544, 13, 23, "Print"],
Cell[996081, 20255, 359, 8, 23, "Print"],
Cell[996443, 20265, 198, 5, 23, "Print"],
Cell[996644, 20272, 357, 8, 23, "Print"],
Cell[997004, 20282, 105, 1, 23, "Print"],
Cell[997112, 20285, 150, 3, 23, "Print"],
Cell[997265, 20290, 258, 3, 43, "Print"],
Cell[997526, 20295, 497, 9, 23, "Print"],
Cell[998026, 20306, 531, 13, 23, "Print"],
Cell[998560, 20321, 355, 8, 23, "Print"],
Cell[998918, 20331, 509, 10, 23, "Print"],
Cell[999430, 20343, 117, 1, 23, "Print"],
Cell[999550, 20346, 117, 1, 23, "Print"],
Cell[999670, 20349, 140, 3, 23, "Print"],
Cell[999813, 20354, 200, 5, 23, "Print"],
Cell[1000016, 20361, 355, 8, 23, "Print"],
Cell[1000374, 20371, 541, 13, 23, "Print"],
Cell[1000918, 20386, 359, 8, 23, "Print"],
Cell[1001280, 20396, 200, 5, 23, "Print"],
Cell[1001483, 20403, 421, 9, 23, "Print"],
Cell[1001907, 20414, 105, 1, 23, "Print"],
Cell[1002015, 20417, 150, 3, 23, "Print"],
Cell[1002168, 20422, 258, 3, 43, "Print"],
Cell[1002429, 20427, 497, 9, 23, "Print"],
Cell[1002929, 20438, 540, 13, 23, "Print"],
Cell[1003472, 20453, 354, 8, 23, "Print"],
Cell[1003829, 20463, 509, 10, 23, "Print"],
Cell[1004341, 20475, 117, 1, 23, "Print"],
Cell[1004461, 20478, 119, 1, 23, "Print"],
Cell[1004583, 20481, 138, 3, 23, "Print"],
Cell[1004724, 20486, 200, 5, 23, "Print"],
Cell[1004927, 20493, 356, 8, 23, "Print"],
Cell[1005286, 20503, 544, 13, 23, "Print"],
Cell[1005833, 20518, 359, 8, 23, "Print"],
Cell[1006195, 20528, 197, 5, 23, "Print"],
Cell[1006395, 20535, 356, 8, 23, "Print"],
Cell[1006754, 20545, 105, 1, 23, "Print"],
Cell[1006862, 20548, 151, 3, 23, "Print"],
Cell[1007016, 20553, 258, 3, 43, "Print"],
Cell[1007277, 20558, 497, 9, 23, "Print"],
Cell[1007777, 20569, 535, 13, 23, "Print"],
Cell[1008315, 20584, 355, 8, 23, "Print"],
Cell[1008673, 20594, 511, 10, 23, "Print"],
Cell[1009187, 20606, 116, 1, 23, "Print"],
Cell[1009306, 20609, 119, 1, 23, "Print"],
Cell[1009428, 20612, 139, 3, 23, "Print"],
Cell[1009570, 20617, 198, 5, 23, "Print"],
Cell[1009771, 20624, 421, 9, 23, "Print"],
Cell[1010195, 20635, 542, 13, 23, "Print"],
Cell[1010740, 20650, 359, 8, 23, "Print"],
Cell[1011102, 20660, 200, 5, 23, "Print"],
Cell[1011305, 20667, 421, 9, 23, "Print"],
Cell[1011729, 20678, 107, 1, 23, "Print"],
Cell[1011839, 20681, 150, 3, 23, "Print"],
Cell[1011992, 20686, 260, 3, 43, "Print"],
Cell[1012255, 20691, 500, 9, 23, "Print"],
Cell[1012758, 20702, 542, 13, 23, "Print"],
Cell[1013303, 20717, 357, 8, 23, "Print"],
Cell[1013663, 20727, 510, 10, 23, "Print"],
Cell[1014176, 20739, 119, 1, 23, "Print"],
Cell[1014298, 20742, 116, 1, 23, "Print"],
Cell[1014417, 20745, 139, 3, 23, "Print"],
Cell[1014559, 20750, 198, 5, 23, "Print"],
Cell[1014760, 20757, 418, 9, 23, "Print"],
Cell[1015181, 20768, 541, 13, 23, "Print"],
Cell[1015725, 20783, 353, 8, 23, "Print"],
Cell[1016081, 20793, 200, 5, 23, "Print"],
Cell[1016284, 20800, 419, 9, 23, "Print"],
Cell[1016706, 20811, 107, 1, 23, "Print"],
Cell[1016816, 20814, 151, 3, 23, "Print"],
Cell[1016970, 20819, 260, 3, 43, "Print"],
Cell[1017233, 20824, 497, 9, 23, "Print"],
Cell[1017733, 20835, 542, 13, 23, "Print"],
Cell[1018278, 20850, 359, 8, 23, "Print"],
Cell[1018640, 20860, 441, 9, 23, "Print"],
Cell[1019084, 20871, 117, 1, 23, "Print"],
Cell[1019204, 20874, 119, 1, 23, "Print"],
Cell[1019326, 20877, 137, 3, 23, "Print"],
Cell[1019466, 20882, 198, 5, 23, "Print"],
Cell[1019667, 20889, 419, 9, 23, "Print"],
Cell[1020089, 20900, 539, 13, 23, "Print"],
Cell[1020631, 20915, 357, 8, 23, "Print"],
Cell[1020991, 20925, 198, 5, 23, "Print"],
Cell[1021192, 20932, 357, 8, 23, "Print"],
Cell[1021552, 20942, 105, 1, 23, "Print"],
Cell[1021660, 20945, 147, 3, 23, "Print"],
Cell[1021810, 20950, 260, 3, 43, "Print"],
Cell[1022073, 20955, 497, 9, 23, "Print"],
Cell[1022573, 20966, 544, 13, 23, "Print"],
Cell[1023120, 20981, 357, 8, 23, "Print"],
Cell[1023480, 20991, 509, 10, 23, "Print"],
Cell[1023992, 21003, 117, 1, 23, "Print"],
Cell[1024112, 21006, 117, 1, 23, "Print"],
Cell[1024232, 21009, 139, 3, 23, "Print"],
Cell[1024374, 21014, 200, 5, 23, "Print"],
Cell[1024577, 21021, 419, 9, 23, "Print"],
Cell[1024999, 21032, 542, 13, 23, "Print"],
Cell[1025544, 21047, 357, 8, 23, "Print"],
Cell[1025904, 21057, 200, 5, 23, "Print"],
Cell[1026107, 21064, 421, 9, 23, "Print"],
Cell[1026531, 21075, 107, 1, 23, "Print"],
Cell[1026641, 21078, 149, 3, 23, "Print"],
Cell[1026793, 21083, 258, 3, 43, "Print"],
Cell[1027054, 21088, 499, 9, 23, "Print"],
Cell[1027556, 21099, 542, 13, 23, "Print"],
Cell[1028101, 21114, 359, 8, 23, "Print"],
Cell[1028463, 21124, 511, 10, 23, "Print"],
Cell[1028977, 21136, 119, 1, 23, "Print"],
Cell[1029099, 21139, 119, 1, 23, "Print"],
Cell[1029221, 21142, 138, 3, 23, "Print"],
Cell[1029362, 21147, 200, 5, 23, "Print"],
Cell[1029565, 21154, 421, 9, 23, "Print"],
Cell[1029989, 21165, 536, 13, 23, "Print"],
Cell[1030528, 21180, 357, 8, 23, "Print"],
Cell[1030888, 21190, 200, 5, 23, "Print"],
Cell[1031091, 21197, 359, 8, 23, "Print"],
Cell[1031453, 21207, 107, 1, 23, "Print"],
Cell[1031563, 21210, 148, 3, 23, "Print"],
Cell[1031714, 21215, 260, 3, 43, "Print"],
Cell[1031977, 21220, 486, 9, 23, "Print"],
Cell[1032466, 21231, 542, 13, 23, "Print"],
Cell[1033011, 21246, 357, 8, 23, "Print"],
Cell[1033371, 21256, 511, 10, 23, "Print"],
Cell[1033885, 21268, 117, 1, 23, "Print"],
Cell[1034005, 21271, 119, 1, 23, "Print"],
Cell[1034127, 21274, 138, 3, 23, "Print"],
Cell[1034268, 21279, 197, 5, 23, "Print"],
Cell[1034468, 21286, 353, 8, 23, "Print"],
Cell[1034824, 21296, 539, 13, 23, "Print"],
Cell[1035366, 21311, 353, 8, 23, "Print"],
Cell[1035722, 21321, 197, 5, 23, "Print"],
Cell[1035922, 21328, 355, 8, 23, "Print"],
Cell[1036280, 21338, 105, 1, 23, "Print"],
Cell[1036388, 21341, 149, 3, 23, "Print"],
Cell[1036540, 21346, 260, 3, 43, "Print"],
Cell[1036803, 21351, 494, 9, 23, "Print"],
Cell[1037300, 21362, 544, 13, 23, "Print"],
Cell[1037847, 21377, 359, 8, 23, "Print"],
Cell[1038209, 21387, 509, 10, 23, "Print"],
Cell[1038721, 21399, 117, 1, 23, "Print"],
Cell[1038841, 21402, 117, 1, 23, "Print"],
Cell[1038961, 21405, 140, 3, 23, "Print"],
Cell[1039104, 21410, 200, 5, 23, "Print"],
Cell[1039307, 21417, 357, 8, 23, "Print"],
Cell[1039667, 21427, 542, 13, 23, "Print"],
Cell[1040212, 21442, 356, 8, 23, "Print"],
Cell[1040571, 21452, 198, 5, 23, "Print"],
Cell[1040772, 21459, 419, 9, 23, "Print"],
Cell[1041194, 21470, 107, 1, 23, "Print"],
Cell[1041304, 21473, 149, 3, 23, "Print"],
Cell[1041456, 21478, 258, 3, 43, "Print"],
Cell[1041717, 21483, 492, 9, 23, "Print"],
Cell[1042212, 21494, 542, 13, 23, "Print"],
Cell[1042757, 21509, 357, 8, 23, "Print"],
Cell[1043117, 21519, 509, 10, 23, "Print"],
Cell[1043629, 21531, 119, 1, 23, "Print"],
Cell[1043751, 21534, 119, 1, 23, "Print"],
Cell[1043873, 21537, 140, 3, 23, "Print"],
Cell[1044016, 21542, 200, 5, 23, "Print"],
Cell[1044219, 21549, 421, 9, 23, "Print"],
Cell[1044643, 21560, 541, 13, 23, "Print"],
Cell[1045187, 21575, 357, 8, 23, "Print"],
Cell[1045547, 21585, 198, 5, 23, "Print"],
Cell[1045748, 21592, 357, 8, 23, "Print"],
Cell[1046108, 21602, 107, 1, 23, "Print"],
Cell[1046218, 21605, 152, 3, 23, "Print"],
Cell[1046373, 21610, 258, 3, 43, "Print"],
Cell[1046634, 21615, 486, 9, 23, "Print"],
Cell[1047123, 21626, 537, 13, 23, "Print"],
Cell[1047663, 21641, 355, 8, 23, "Print"],
Cell[1048021, 21651, 511, 10, 23, "Print"],
Cell[1048535, 21663, 119, 1, 23, "Print"],
Cell[1048657, 21666, 117, 1, 23, "Print"],
Cell[1048777, 21669, 140, 3, 23, "Print"],
Cell[1048920, 21674, 198, 5, 23, "Print"],
Cell[1049121, 21681, 419, 9, 23, "Print"],
Cell[1049543, 21692, 539, 13, 23, "Print"],
Cell[1050085, 21707, 355, 8, 23, "Print"],
Cell[1050443, 21717, 200, 5, 23, "Print"],
Cell[1050646, 21724, 419, 9, 23, "Print"],
Cell[1051068, 21735, 107, 1, 23, "Print"],
Cell[1051178, 21738, 149, 3, 23, "Print"],
Cell[1051330, 21743, 260, 3, 43, "Print"],
Cell[1051593, 21748, 487, 9, 23, "Print"],
Cell[1052083, 21759, 542, 13, 23, "Print"],
Cell[1052628, 21774, 359, 8, 23, "Print"],
Cell[1052990, 21784, 511, 10, 23, "Print"],
Cell[1053504, 21796, 119, 1, 23, "Print"],
Cell[1053626, 21799, 86, 1, 23, "Print"],
Cell[1053715, 21802, 273, 4, 23, "Print"],
Cell[1053991, 21808, 200, 5, 23, "Print"],
Cell[1054194, 21815, 567, 11, 23, "Print"],
Cell[1054764, 21828, 154, 2, 23, "Print"]
}, Open  ]],
Cell[1054933, 21833, 873, 22, 72, "Output"],
Cell[CellGroupData[{
Cell[1055831, 21859, 139, 2, 23, "Print"],
Cell[1055973, 21863, 152, 2, 23, "Print"],
Cell[1056128, 21867, 171, 2, 23, "Print"],
Cell[1056302, 21871, 119, 1, 23, "Print"],
Cell[1056424, 21874, 130, 2, 23, "Print"],
Cell[1056557, 21878, 271, 4, 100, "Print"],
Cell[1056831, 21884, 489, 10, 23, "Print"],
Cell[1057323, 21896, 306, 4, 43, "Print"],
Cell[1057632, 21902, 415, 9, 23, "Print"],
Cell[1058050, 21913, 105, 1, 23, "Print"],
Cell[1058158, 21916, 152, 3, 23, "Print"],
Cell[1058313, 21921, 104, 1, 23, "Print"],
Cell[1058420, 21924, 217, 5, 23, "Print"],
Cell[1058640, 21931, 375, 8, 23, "Print"],
Cell[1059018, 21941, 116, 1, 23, "Print"],
Cell[1059137, 21944, 160, 2, 23, "Print"],
Cell[1059300, 21948, 117, 1, 23, "Print"],
Cell[1059420, 21951, 139, 3, 23, "Print"],
Cell[1059562, 21956, 119, 1, 23, "Print"],
Cell[1059684, 21959, 439, 9, 23, "Print"],
Cell[1060126, 21970, 200, 5, 23, "Print"],
Cell[1060329, 21977, 417, 9, 23, "Print"],
Cell[1060749, 21988, 133, 2, 23, "Print"],
Cell[1060885, 21992, 98, 1, 23, "Print"],
Cell[1060986, 21995, 89, 1, 23, "Print"],
Cell[1061078, 21998, 542, 13, 23, "Print"],
Cell[1061623, 22013, 359, 8, 23, "Print"],
Cell[1061985, 22023, 373, 8, 23, "Print"],
Cell[1062361, 22033, 200, 5, 23, "Print"],
Cell[1062564, 22040, 419, 9, 23, "Print"],
Cell[1062986, 22051, 258, 3, 43, "Print"],
Cell[1063247, 22056, 483, 9, 23, "Print"],
Cell[1063733, 22067, 542, 13, 23, "Print"],
Cell[1064278, 22082, 357, 8, 23, "Print"],
Cell[1064638, 22092, 313, 7, 23, "Print"],
Cell[1064954, 22101, 198, 5, 23, "Print"],
Cell[1065155, 22108, 419, 9, 23, "Print"],
Cell[1065577, 22119, 260, 3, 43, "Print"],
Cell[1065840, 22124, 495, 9, 23, "Print"],
Cell[1066338, 22135, 536, 13, 23, "Print"],
Cell[1066877, 22150, 355, 8, 23, "Print"],
Cell[1067235, 22160, 373, 8, 23, "Print"],
Cell[1067611, 22170, 200, 5, 23, "Print"],
Cell[1067814, 22177, 421, 9, 23, "Print"],
Cell[1068238, 22188, 260, 3, 43, "Print"],
Cell[1068501, 22193, 496, 9, 23, "Print"],
Cell[1069000, 22204, 542, 13, 23, "Print"],
Cell[1069545, 22219, 359, 8, 23, "Print"],
Cell[1069907, 22229, 309, 7, 23, "Print"],
Cell[1070219, 22238, 200, 5, 23, "Print"],
Cell[1070422, 22245, 419, 9, 23, "Print"],
Cell[1070844, 22256, 258, 3, 43, "Print"],
Cell[1071105, 22261, 497, 9, 23, "Print"],
Cell[1071605, 22272, 542, 13, 23, "Print"],
Cell[1072150, 22287, 357, 8, 23, "Print"],
Cell[1072510, 22297, 373, 8, 23, "Print"],
Cell[1072886, 22307, 198, 5, 23, "Print"],
Cell[1073087, 22314, 421, 9, 23, "Print"],
Cell[1073511, 22325, 260, 3, 43, "Print"],
Cell[1073774, 22330, 496, 9, 23, "Print"],
Cell[1074273, 22341, 537, 13, 23, "Print"],
Cell[1074813, 22356, 357, 8, 23, "Print"],
Cell[1075173, 22366, 377, 8, 23, "Print"],
Cell[1075553, 22376, 200, 5, 23, "Print"],
Cell[1075756, 22383, 421, 9, 23, "Print"],
Cell[1076180, 22394, 98, 1, 23, "Print"],
Cell[1076281, 22397, 220, 5, 23, "Print"],
Cell[1076504, 22404, 222, 5, 23, "Print"],
Cell[1076729, 22411, 271, 4, 100, "Print"],
Cell[1077003, 22417, 488, 10, 23, "Print"],
Cell[1077494, 22429, 306, 4, 43, "Print"],
Cell[1077803, 22435, 467, 9, 23, "Print"],
Cell[1078273, 22446, 258, 3, 43, "Print"],
Cell[1078534, 22451, 498, 9, 23, "Print"],
Cell[1079035, 22462, 238, 5, 23, "Print"],
Cell[1079276, 22469, 155, 2, 23, "Print"],
Cell[1079434, 22473, 396, 8, 23, "Print"],
Cell[1079833, 22483, 168, 2, 23, "Print"],
Cell[1080004, 22487, 399, 8, 23, "Print"],
Cell[1080406, 22497, 359, 8, 23, "Print"],
Cell[1080768, 22507, 541, 13, 23, "Print"],
Cell[1081312, 22522, 357, 8, 23, "Print"],
Cell[1081672, 22532, 377, 8, 23, "Print"],
Cell[1082052, 22542, 449, 9, 23, "Print"],
Cell[1082504, 22553, 103, 1, 23, "Print"]
}, Open  ]],
Cell[1082622, 22557, 3778, 76, 304, "Output"],
Cell[CellGroupData[{
Cell[1086425, 22637, 130, 2, 23, "Print"],
Cell[1086558, 22641, 271, 4, 100, "Print"],
Cell[1086832, 22647, 489, 10, 23, "Print"],
Cell[1087324, 22659, 306, 4, 43, "Print"],
Cell[1087633, 22665, 414, 9, 23, "Print"],
Cell[1088050, 22676, 102, 1, 23, "Print"],
Cell[1088155, 22679, 217, 5, 23, "Print"],
Cell[1088375, 22686, 375, 8, 23, "Print"],
Cell[1088753, 22696, 139, 2, 23, "Print"],
Cell[1088895, 22700, 86, 1, 23, "Print"],
Cell[1088984, 22703, 106, 1, 23, "Print"],
Cell[1089093, 22706, 106, 1, 23, "Print"],
Cell[1089202, 22709, 139, 2, 23, "Print"],
Cell[1089344, 22713, 101, 1, 23, "Print"],
Cell[1089448, 22716, 119, 1, 23, "Print"],
Cell[1089570, 22719, 130, 2, 23, "Print"],
Cell[1089703, 22723, 273, 4, 100, "Print"],
Cell[1089979, 22729, 489, 10, 23, "Print"],
Cell[1090471, 22741, 306, 4, 43, "Print"],
Cell[1090780, 22747, 414, 9, 23, "Print"],
Cell[1091197, 22758, 104, 1, 23, "Print"],
Cell[1091304, 22761, 215, 5, 23, "Print"],
Cell[1091522, 22768, 375, 8, 23, "Print"],
Cell[1091900, 22778, 119, 1, 23, "Print"],
Cell[1092022, 22781, 109, 1, 23, "Print"],
Cell[1092134, 22784, 200, 5, 23, "Print"],
Cell[1092337, 22791, 539, 13, 23, "Print"],
Cell[1092879, 22806, 357, 8, 23, "Print"],
Cell[1093239, 22816, 200, 5, 23, "Print"],
Cell[1093442, 22823, 539, 13, 23, "Print"],
Cell[1093984, 22838, 359, 8, 23, "Print"],
Cell[1094346, 22848, 198, 5, 23, "Print"],
Cell[1094547, 22855, 541, 13, 23, "Print"],
Cell[1095091, 22870, 359, 8, 23, "Print"],
Cell[1095453, 22880, 200, 5, 23, "Print"],
Cell[1095656, 22887, 539, 13, 23, "Print"],
Cell[1096198, 22902, 357, 8, 23, "Print"],
Cell[1096558, 22912, 200, 5, 23, "Print"],
Cell[1096761, 22919, 541, 13, 23, "Print"],
Cell[1097305, 22934, 359, 8, 23, "Print"],
Cell[1097667, 22944, 200, 5, 23, "Print"],
Cell[1097870, 22951, 541, 13, 23, "Print"],
Cell[1098414, 22966, 359, 8, 23, "Print"],
Cell[1098776, 22976, 200, 5, 23, "Print"],
Cell[1098979, 22983, 621, 12, 23, "Print"],
Cell[1099603, 22997, 271, 4, 100, "Print"],
Cell[1099877, 23003, 489, 10, 23, "Print"],
Cell[1100369, 23015, 304, 4, 43, "Print"],
Cell[1100676, 23021, 416, 9, 23, "Print"],
Cell[1101095, 23032, 258, 3, 43, "Print"],
Cell[1101356, 23037, 484, 9, 23, "Print"],
Cell[1101843, 23048, 236, 5, 23, "Print"],
Cell[1102082, 23055, 153, 2, 23, "Print"],
Cell[1102238, 23059, 399, 8, 23, "Print"],
Cell[1102640, 23069, 168, 2, 23, "Print"],
Cell[1102811, 23073, 402, 8, 23, "Print"],
Cell[1103216, 23083, 367, 8, 23, "Print"],
Cell[1103586, 23093, 544, 13, 23, "Print"],
Cell[1104133, 23108, 357, 8, 23, "Print"],
Cell[1104493, 23118, 97, 1, 23, "Print"],
Cell[1104593, 23121, 347, 8, 23, "Print"],
Cell[1104943, 23131, 106, 1, 23, "Print"],
Cell[1105052, 23134, 141, 2, 23, "Print"],
Cell[1105196, 23138, 99, 1, 23, "Print"],
Cell[1105298, 23141, 119, 1, 23, "Print"],
Cell[1105420, 23144, 130, 2, 23, "Print"],
Cell[1105553, 23148, 273, 4, 100, "Print"],
Cell[1105829, 23154, 490, 10, 23, "Print"],
Cell[1106322, 23166, 304, 4, 43, "Print"],
Cell[1106629, 23172, 416, 9, 23, "Print"],
Cell[1107048, 23183, 104, 1, 23, "Print"],
Cell[1107155, 23186, 217, 5, 23, "Print"],
Cell[1107375, 23193, 377, 8, 23, "Print"],
Cell[1107755, 23203, 119, 1, 23, "Print"],
Cell[1107877, 23206, 109, 1, 23, "Print"],
Cell[1107989, 23209, 200, 5, 23, "Print"],
Cell[1108192, 23216, 540, 13, 23, "Print"],
Cell[1108735, 23231, 355, 8, 23, "Print"],
Cell[1109093, 23241, 198, 5, 23, "Print"],
Cell[1109294, 23248, 542, 13, 23, "Print"],
Cell[1109839, 23263, 359, 8, 23, "Print"],
Cell[1110201, 23273, 200, 5, 23, "Print"],
Cell[1110404, 23280, 544, 13, 23, "Print"],
Cell[1110951, 23295, 359, 8, 23, "Print"],
Cell[1111313, 23305, 200, 5, 23, "Print"],
Cell[1111516, 23312, 541, 13, 23, "Print"],
Cell[1112060, 23327, 359, 8, 23, "Print"],
Cell[1112422, 23337, 200, 5, 23, "Print"],
Cell[1112625, 23344, 538, 13, 23, "Print"],
Cell[1113166, 23359, 357, 8, 23, "Print"],
Cell[1113526, 23369, 200, 5, 23, "Print"],
Cell[1113729, 23376, 532, 13, 23, "Print"],
Cell[1114264, 23391, 357, 8, 23, "Print"],
Cell[1114624, 23401, 200, 5, 23, "Print"],
Cell[1114827, 23408, 615, 12, 23, "Print"],
Cell[1115445, 23422, 273, 4, 100, "Print"],
Cell[1115721, 23428, 481, 9, 23, "Print"],
Cell[1116205, 23439, 304, 4, 43, "Print"],
Cell[1116512, 23445, 418, 9, 23, "Print"],
Cell[1116933, 23456, 260, 3, 43, "Print"],
Cell[1117196, 23461, 476, 9, 23, "Print"],
Cell[1117675, 23472, 236, 5, 23, "Print"],
Cell[1117914, 23479, 155, 2, 23, "Print"],
Cell[1118072, 23483, 403, 8, 23, "Print"],
Cell[1118478, 23493, 170, 2, 23, "Print"],
Cell[1118651, 23497, 401, 8, 23, "Print"],
Cell[1119055, 23507, 364, 8, 23, "Print"],
Cell[1119422, 23517, 539, 13, 23, "Print"],
Cell[1119964, 23532, 357, 8, 23, "Print"],
Cell[1120324, 23542, 99, 1, 23, "Print"],
Cell[1120426, 23545, 409, 9, 23, "Print"],
Cell[1120838, 23556, 153, 2, 23, "Print"],
Cell[1120994, 23560, 153, 2, 23, "Print"],
Cell[1121150, 23564, 116, 1, 23, "Print"],
Cell[1121269, 23567, 141, 2, 23, "Print"],
Cell[1121413, 23571, 99, 1, 23, "Print"],
Cell[1121515, 23574, 117, 1, 23, "Print"],
Cell[1121635, 23577, 128, 2, 23, "Print"],
Cell[1121766, 23581, 275, 4, 119, "Print"],
Cell[1122044, 23587, 488, 10, 23, "Print"],
Cell[1122535, 23599, 305, 4, 43, "Print"],
Cell[1122843, 23605, 419, 9, 23, "Print"],
Cell[1123265, 23616, 377, 8, 23, "Print"],
Cell[1123645, 23626, 117, 1, 23, "Print"],
Cell[1123765, 23629, 108, 1, 23, "Print"],
Cell[1123876, 23632, 200, 5, 23, "Print"],
Cell[1124079, 23639, 112, 1, 23, "Print"],
Cell[1124194, 23642, 413, 9, 23, "Print"],
Cell[1124610, 23653, 362, 8, 23, "Print"],
Cell[1124975, 23663, 198, 5, 23, "Print"],
Cell[1125176, 23670, 375, 8, 23, "Print"],
Cell[1125554, 23680, 198, 5, 23, "Print"],
Cell[1125755, 23687, 112, 1, 23, "Print"],
Cell[1125870, 23690, 353, 8, 23, "Print"],
Cell[1126226, 23700, 364, 8, 23, "Print"],
Cell[1126593, 23710, 201, 5, 23, "Print"],
Cell[1126797, 23717, 375, 8, 23, "Print"],
Cell[1127175, 23727, 198, 5, 23, "Print"],
Cell[1127376, 23734, 114, 1, 23, "Print"],
Cell[1127493, 23737, 353, 8, 23, "Print"],
Cell[1127849, 23747, 359, 8, 23, "Print"],
Cell[1128211, 23757, 201, 5, 23, "Print"],
Cell[1128415, 23764, 375, 8, 23, "Print"],
Cell[1128793, 23774, 200, 5, 23, "Print"],
Cell[1128996, 23781, 114, 1, 23, "Print"],
Cell[1129113, 23784, 349, 8, 23, "Print"],
Cell[1129465, 23794, 361, 8, 23, "Print"],
Cell[1129829, 23804, 199, 5, 23, "Print"],
Cell[1130031, 23811, 371, 8, 23, "Print"],
Cell[1130405, 23821, 198, 5, 23, "Print"],
Cell[1130606, 23828, 111, 1, 23, "Print"],
Cell[1130720, 23831, 413, 9, 23, "Print"],
Cell[1131136, 23842, 362, 8, 23, "Print"],
Cell[1131501, 23852, 201, 5, 23, "Print"],
Cell[1131705, 23859, 309, 7, 23, "Print"],
Cell[1132017, 23868, 200, 5, 23, "Print"],
Cell[1132220, 23875, 114, 1, 23, "Print"],
Cell[1132337, 23878, 413, 9, 23, "Print"],
Cell[1132753, 23889, 359, 8, 23, "Print"],
Cell[1133115, 23899, 201, 5, 23, "Print"],
Cell[1133319, 23906, 373, 8, 23, "Print"],
Cell[1133695, 23916, 198, 5, 23, "Print"],
Cell[1133896, 23923, 114, 1, 23, "Print"],
Cell[1134013, 23926, 351, 8, 23, "Print"],
Cell[1134367, 23936, 273, 4, 119, "Print"],
Cell[1134643, 23942, 489, 10, 23, "Print"],
Cell[1135135, 23954, 303, 4, 43, "Print"],
Cell[1135441, 23960, 418, 9, 23, "Print"],
Cell[1135862, 23971, 202, 3, 23, "Print"],
Cell[1136067, 23976, 404, 8, 23, "Print"],
Cell[1136474, 23986, 235, 5, 23, "Print"],
Cell[1136712, 23993, 155, 2, 23, "Print"],
Cell[1136870, 23997, 405, 8, 23, "Print"],
Cell[1137278, 24007, 167, 2, 23, "Print"],
Cell[1137448, 24011, 402, 8, 23, "Print"],
Cell[1137853, 24021, 363, 8, 23, "Print"],
Cell[1138219, 24031, 357, 8, 23, "Print"],
Cell[1138579, 24041, 201, 5, 23, "Print"],
Cell[1138783, 24048, 373, 8, 23, "Print"],
Cell[1139159, 24058, 407, 9, 23, "Print"],
Cell[1139569, 24069, 139, 2, 23, "Print"],
Cell[1139711, 24073, 152, 2, 23, "Print"],
Cell[1139866, 24077, 119, 1, 23, "Print"],
Cell[1139988, 24080, 128, 2, 23, "Print"],
Cell[1140119, 24084, 273, 4, 119, "Print"],
Cell[1140395, 24090, 488, 10, 23, "Print"],
Cell[1140886, 24102, 303, 4, 43, "Print"],
Cell[1141192, 24108, 421, 9, 23, "Print"],
Cell[1141616, 24119, 375, 8, 23, "Print"],
Cell[1141994, 24129, 119, 1, 23, "Print"],
Cell[1142116, 24132, 162, 2, 23, "Print"],
Cell[1142281, 24136, 198, 5, 23, "Print"],
Cell[1142482, 24143, 115, 1, 23, "Print"],
Cell[1142600, 24146, 357, 8, 23, "Print"],
Cell[1142960, 24156, 359, 8, 23, "Print"],
Cell[1143322, 24166, 199, 5, 23, "Print"],
Cell[1143524, 24173, 311, 7, 23, "Print"],
Cell[1143838, 24182, 198, 5, 23, "Print"],
Cell[1144039, 24189, 117, 1, 23, "Print"],
Cell[1144159, 24192, 419, 9, 23, "Print"],
Cell[1144581, 24203, 362, 8, 23, "Print"],
Cell[1144946, 24213, 196, 5, 23, "Print"],
Cell[1145145, 24220, 311, 7, 23, "Print"],
Cell[1145459, 24229, 200, 5, 23, "Print"],
Cell[1145662, 24236, 117, 1, 23, "Print"],
Cell[1145782, 24239, 421, 9, 23, "Print"],
Cell[1146206, 24250, 362, 8, 23, "Print"],
Cell[1146571, 24260, 201, 5, 23, "Print"],
Cell[1146775, 24267, 373, 8, 23, "Print"],
Cell[1147151, 24277, 198, 5, 23, "Print"],
Cell[1147352, 24284, 117, 1, 23, "Print"],
Cell[1147472, 24287, 419, 9, 23, "Print"],
Cell[1147894, 24298, 364, 8, 23, "Print"],
Cell[1148261, 24308, 199, 5, 23, "Print"],
Cell[1148463, 24315, 373, 8, 23, "Print"],
Cell[1148839, 24325, 200, 5, 23, "Print"],
Cell[1149042, 24332, 117, 1, 23, "Print"],
Cell[1149162, 24335, 357, 8, 23, "Print"],
Cell[1149522, 24345, 364, 8, 23, "Print"],
Cell[1149889, 24355, 199, 5, 23, "Print"],
Cell[1150091, 24362, 309, 7, 23, "Print"],
Cell[1150403, 24371, 200, 5, 23, "Print"],
Cell[1150606, 24378, 115, 1, 23, "Print"],
Cell[1150724, 24381, 421, 9, 23, "Print"],
Cell[1151148, 24392, 98, 1, 23, "Print"],
Cell[1151249, 24395, 220, 5, 23, "Print"],
Cell[1151472, 24402, 224, 5, 23, "Print"],
Cell[1151699, 24409, 364, 8, 23, "Print"],
Cell[1152066, 24419, 201, 5, 23, "Print"],
Cell[1152270, 24426, 313, 7, 23, "Print"],
Cell[1152586, 24435, 198, 5, 23, "Print"],
Cell[1152787, 24442, 117, 1, 23, "Print"],
Cell[1152907, 24445, 421, 9, 23, "Print"],
Cell[1153331, 24456, 98, 1, 23, "Print"],
Cell[1153432, 24459, 220, 5, 23, "Print"],
Cell[1153655, 24466, 224, 5, 23, "Print"],
Cell[1153882, 24473, 202, 3, 23, "Print"],
Cell[1154087, 24478, 402, 8, 23, "Print"],
Cell[1154492, 24488, 188, 2, 23, "Print"],
Cell[1154683, 24492, 189, 5, 23, "Print"],
Cell[1154875, 24499, 189, 2, 23, "Print"],
Cell[1155067, 24503, 366, 8, 23, "Print"],
Cell[1155436, 24513, 189, 2, 23, "Print"],
Cell[1155628, 24517, 367, 8, 23, "Print"],
Cell[1155998, 24527, 362, 8, 23, "Print"],
Cell[1156363, 24537, 201, 5, 23, "Print"],
Cell[1156567, 24544, 379, 8, 23, "Print"],
Cell[1156949, 24554, 200, 5, 23, "Print"],
Cell[1157152, 24561, 117, 1, 23, "Print"],
Cell[1157272, 24564, 359, 8, 23, "Print"],
Cell[1157634, 24574, 96, 1, 23, "Print"],
Cell[1157733, 24577, 222, 5, 23, "Print"],
Cell[1157958, 24584, 224, 5, 23, "Print"],
Cell[1158185, 24591, 275, 4, 119, "Print"],
Cell[1158463, 24597, 491, 10, 23, "Print"],
Cell[1158957, 24609, 305, 4, 43, "Print"],
Cell[1159265, 24615, 419, 9, 23, "Print"],
Cell[1159687, 24626, 202, 3, 23, "Print"],
Cell[1159892, 24631, 415, 8, 23, "Print"],
Cell[1160310, 24641, 186, 2, 23, "Print"],
Cell[1160499, 24645, 187, 5, 23, "Print"],
Cell[1160689, 24652, 191, 2, 23, "Print"],
Cell[1160883, 24656, 365, 8, 23, "Print"],
Cell[1161251, 24666, 189, 2, 23, "Print"],
Cell[1161443, 24670, 366, 8, 23, "Print"],
Cell[1161812, 24680, 238, 5, 23, "Print"],
Cell[1162053, 24687, 153, 2, 23, "Print"],
Cell[1162209, 24691, 400, 8, 23, "Print"],
Cell[1162612, 24701, 168, 2, 23, "Print"],
Cell[1162783, 24705, 402, 8, 23, "Print"],
Cell[1163188, 24715, 365, 8, 23, "Print"],
Cell[1163556, 24725, 263, 6, 23, "Print"],
Cell[1163822, 24733, 181, 2, 23, "Print"],
Cell[1164006, 24737, 256, 6, 23, "Print"],
Cell[1164265, 24745, 290, 6, 23, "Print"],
Cell[1164558, 24753, 178, 2, 23, "Print"],
Cell[1164739, 24757, 399, 8, 23, "Print"],
Cell[1165141, 24767, 193, 2, 23, "Print"],
Cell[1165337, 24771, 401, 8, 23, "Print"],
Cell[1165741, 24781, 423, 10, 23, "Print"],
Cell[1166167, 24793, 364, 8, 23, "Print"],
Cell[1166534, 24803, 201, 5, 23, "Print"],
Cell[1166738, 24810, 379, 8, 23, "Print"],
Cell[1167120, 24820, 99, 1, 23, "Print"],
Cell[1167222, 24823, 517, 10, 23, "Print"],
Cell[1167742, 24835, 109, 1, 23, "Print"]
}, Open  ]],
Cell[1167866, 24839, 12133, 228, 304, "Output"],
Cell[1180002, 25069, 111, 1, 31, "Output"],
Cell[1180116, 25072, 12131, 228, 304, "Output"],
Cell[1192250, 25302, 106, 1, 23, "Print"],
Cell[1192359, 25305, 22181, 378, 304, "Output"],
Cell[CellGroupData[{
Cell[1214565, 25687, 139, 2, 23, "Print"],
Cell[1214707, 25691, 152, 2, 23, "Print"],
Cell[1214862, 25695, 171, 2, 23, "Print"],
Cell[1215036, 25699, 117, 1, 23, "Print"],
Cell[1215156, 25702, 128, 2, 23, "Print"],
Cell[1215287, 25706, 275, 4, 119, "Print"],
Cell[1215565, 25712, 486, 10, 23, "Print"],
Cell[1216054, 25724, 305, 4, 43, "Print"],
Cell[1216362, 25730, 419, 9, 23, "Print"],
Cell[1216784, 25741, 373, 8, 23, "Print"],
Cell[1217160, 25751, 117, 1, 23, "Print"],
Cell[1217280, 25754, 160, 2, 23, "Print"],
Cell[1217443, 25758, 198, 5, 23, "Print"],
Cell[1217644, 25765, 115, 1, 23, "Print"],
Cell[1217762, 25768, 421, 9, 23, "Print"],
Cell[1218186, 25779, 364, 8, 23, "Print"],
Cell[1218553, 25789, 197, 5, 23, "Print"],
Cell[1218753, 25796, 371, 8, 23, "Print"],
Cell[1219127, 25806, 198, 5, 23, "Print"],
Cell[1219328, 25813, 117, 1, 23, "Print"],
Cell[1219448, 25816, 357, 8, 23, "Print"],
Cell[1219808, 25826, 362, 8, 23, "Print"],
Cell[1220173, 25836, 201, 5, 23, "Print"],
Cell[1220377, 25843, 375, 8, 23, "Print"],
Cell[1220755, 25853, 198, 5, 23, "Print"],
Cell[1220956, 25860, 117, 1, 23, "Print"],
Cell[1221076, 25863, 421, 9, 23, "Print"],
Cell[1221500, 25874, 364, 8, 23, "Print"],
Cell[1221867, 25884, 201, 5, 23, "Print"],
Cell[1222071, 25891, 307, 7, 23, "Print"],
Cell[1222381, 25900, 198, 5, 23, "Print"],
Cell[1222582, 25907, 117, 1, 23, "Print"],
Cell[1222702, 25910, 359, 8, 23, "Print"],
Cell[1223064, 25920, 364, 8, 23, "Print"],
Cell[1223431, 25930, 201, 5, 23, "Print"],
Cell[1223635, 25937, 311, 7, 23, "Print"],
Cell[1223949, 25946, 198, 5, 23, "Print"],
Cell[1224150, 25953, 117, 1, 23, "Print"],
Cell[1224270, 25956, 416, 9, 23, "Print"],
Cell[1224689, 25967, 364, 8, 23, "Print"],
Cell[1225056, 25977, 199, 5, 23, "Print"],
Cell[1225258, 25984, 373, 8, 23, "Print"],
Cell[1225634, 25994, 200, 5, 23, "Print"],
Cell[1225837, 26001, 117, 1, 23, "Print"],
Cell[1225957, 26004, 359, 8, 23, "Print"],
Cell[1226319, 26014, 96, 1, 23, "Print"],
Cell[1226418, 26017, 220, 5, 23, "Print"],
Cell[1226641, 26024, 224, 5, 23, "Print"],
Cell[1226868, 26031, 364, 8, 23, "Print"],
Cell[1227235, 26041, 199, 5, 23, "Print"],
Cell[1227437, 26048, 375, 8, 23, "Print"],
Cell[1227815, 26058, 198, 5, 23, "Print"],
Cell[1228016, 26065, 117, 1, 23, "Print"],
Cell[1228136, 26068, 419, 9, 23, "Print"],
Cell[1228558, 26079, 98, 1, 23, "Print"],
Cell[1228659, 26082, 222, 5, 23, "Print"],
Cell[1228884, 26089, 224, 5, 23, "Print"],
Cell[1229111, 26096, 273, 4, 119, "Print"],
Cell[1229387, 26102, 485, 10, 23, "Print"],
Cell[1229875, 26114, 305, 4, 43, "Print"],
Cell[1230183, 26120, 415, 9, 23, "Print"],
Cell[1230601, 26131, 204, 3, 23, "Print"],
Cell[1230808, 26136, 415, 8, 23, "Print"],
Cell[1231226, 26146, 186, 2, 23, "Print"],
Cell[1231415, 26150, 187, 5, 23, "Print"],
Cell[1231605, 26157, 189, 2, 23, "Print"],
Cell[1231797, 26161, 369, 8, 23, "Print"],
Cell[1232169, 26171, 191, 2, 23, "Print"],
Cell[1232363, 26175, 368, 8, 23, "Print"],
Cell[1232734, 26185, 235, 5, 23, "Print"],
Cell[1232972, 26192, 153, 2, 23, "Print"],
Cell[1233128, 26196, 395, 8, 23, "Print"],
Cell[1233526, 26206, 170, 2, 23, "Print"],
Cell[1233699, 26210, 399, 8, 23, "Print"],
Cell[1234101, 26220, 362, 8, 23, "Print"],
Cell[1234466, 26230, 268, 6, 23, "Print"],
Cell[1234737, 26238, 179, 2, 23, "Print"],
Cell[1234919, 26242, 257, 6, 23, "Print"],
Cell[1235179, 26250, 292, 6, 23, "Print"],
Cell[1235474, 26258, 180, 2, 23, "Print"],
Cell[1235657, 26262, 396, 8, 23, "Print"],
Cell[1236056, 26272, 195, 2, 23, "Print"],
Cell[1236254, 26276, 396, 8, 23, "Print"],
Cell[1236653, 26286, 417, 10, 23, "Print"],
Cell[1237073, 26298, 364, 8, 23, "Print"],
Cell[1237440, 26308, 201, 5, 23, "Print"],
Cell[1237644, 26315, 379, 8, 23, "Print"],
Cell[1238026, 26325, 511, 10, 23, "Print"],
Cell[1238540, 26337, 103, 1, 23, "Print"]
}, Open  ]],
Cell[1238658, 26341, 2758, 57, 304, "Output"],
Cell[CellGroupData[{
Cell[1241441, 26402, 155, 2, 23, "Print"],
Cell[1241599, 26406, 127, 2, 23, "Print"],
Cell[1241729, 26410, 153, 2, 23, "Print"],
Cell[1241885, 26414, 106, 1, 23, "Print"],
Cell[1241994, 26417, 139, 2, 23, "Print"],
Cell[1242136, 26421, 130, 2, 23, "Print"],
Cell[1242269, 26425, 178, 2, 23, "Print"],
Cell[1242450, 26429, 153, 2, 23, "Print"],
Cell[1242606, 26433, 148, 2, 23, "Print"],
Cell[1242757, 26437, 287, 6, 23, "Print"],
Cell[1243047, 26445, 305, 7, 23, "Print"],
Cell[1243355, 26454, 165, 2, 23, "Print"],
Cell[1243523, 26458, 519, 10, 23, "Print"],
Cell[1244045, 26470, 135, 2, 23, "Print"],
Cell[1244183, 26474, 140, 2, 23, "Print"],
Cell[1244326, 26478, 321, 7, 23, "Print"],
Cell[1244650, 26487, 151, 2, 23, "Print"],
Cell[1244804, 26491, 307, 7, 23, "Print"],
Cell[1245114, 26500, 107, 1, 23, "Print"],
Cell[1245224, 26503, 337, 8, 23, "Print"],
Cell[1245564, 26513, 273, 6, 23, "Print"],
Cell[1245840, 26521, 423, 5, 43, "Print"],
Cell[1246266, 26528, 582, 10, 23, "Print"],
Cell[1246851, 26540, 287, 6, 23, "Print"],
Cell[1247141, 26548, 151, 2, 23, "Print"],
Cell[1247295, 26552, 307, 7, 23, "Print"],
Cell[1247605, 26561, 108, 1, 23, "Print"],
Cell[1247716, 26564, 399, 9, 23, "Print"],
Cell[1248118, 26575, 273, 6, 23, "Print"],
Cell[1248394, 26583, 421, 5, 43, "Print"],
Cell[1248818, 26590, 583, 10, 23, "Print"],
Cell[1249404, 26602, 283, 6, 23, "Print"],
Cell[1249690, 26610, 149, 2, 23, "Print"],
Cell[1249842, 26614, 307, 7, 23, "Print"],
Cell[1250152, 26623, 110, 1, 23, "Print"],
Cell[1250265, 26626, 399, 9, 23, "Print"],
Cell[1250667, 26637, 273, 6, 23, "Print"],
Cell[1250943, 26645, 421, 5, 43, "Print"],
Cell[1251367, 26652, 581, 10, 23, "Print"],
Cell[1251951, 26664, 319, 7, 23, "Print"],
Cell[1252273, 26673, 149, 2, 23, "Print"],
Cell[1252425, 26677, 305, 7, 23, "Print"],
Cell[1252733, 26686, 110, 1, 23, "Print"],
Cell[1252846, 26689, 399, 9, 23, "Print"],
Cell[1253248, 26700, 273, 6, 23, "Print"],
Cell[1253524, 26708, 423, 5, 43, "Print"],
Cell[1253950, 26715, 580, 10, 23, "Print"],
Cell[1254533, 26727, 319, 7, 23, "Print"],
Cell[1254855, 26736, 149, 2, 23, "Print"],
Cell[1255007, 26740, 307, 7, 23, "Print"],
Cell[1255317, 26749, 108, 1, 23, "Print"],
Cell[1255428, 26752, 337, 8, 23, "Print"],
Cell[1255768, 26762, 273, 6, 23, "Print"],
Cell[1256044, 26770, 421, 5, 43, "Print"],
Cell[1256468, 26777, 583, 10, 23, "Print"],
Cell[1257054, 26789, 319, 7, 23, "Print"],
Cell[1257376, 26798, 151, 2, 23, "Print"],
Cell[1257530, 26802, 304, 7, 23, "Print"],
Cell[1257837, 26811, 110, 1, 23, "Print"],
Cell[1257950, 26814, 335, 8, 23, "Print"],
Cell[1258288, 26824, 273, 6, 23, "Print"],
Cell[1258564, 26832, 423, 5, 43, "Print"],
Cell[1258990, 26839, 581, 10, 23, "Print"],
Cell[1259574, 26851, 318, 7, 23, "Print"],
Cell[1259895, 26860, 149, 2, 23, "Print"],
Cell[1260047, 26864, 305, 7, 23, "Print"],
Cell[1260355, 26873, 110, 1, 23, "Print"],
Cell[1260468, 26876, 335, 8, 23, "Print"],
Cell[1260806, 26886, 273, 6, 23, "Print"],
Cell[1261082, 26894, 423, 5, 43, "Print"],
Cell[1261508, 26901, 578, 10, 23, "Print"],
Cell[1262089, 26913, 319, 7, 23, "Print"],
Cell[1262411, 26922, 151, 2, 23, "Print"],
Cell[1262565, 26926, 305, 7, 23, "Print"],
Cell[1262873, 26935, 110, 1, 23, "Print"],
Cell[1262986, 26938, 401, 9, 23, "Print"],
Cell[1263390, 26949, 275, 6, 23, "Print"],
Cell[1263668, 26957, 423, 5, 43, "Print"],
Cell[1264094, 26964, 581, 10, 23, "Print"],
Cell[1264678, 26976, 287, 6, 23, "Print"],
Cell[1264968, 26984, 151, 2, 23, "Print"],
Cell[1265122, 26988, 307, 7, 23, "Print"],
Cell[1265432, 26997, 108, 1, 23, "Print"],
Cell[1265543, 27000, 401, 9, 23, "Print"],
Cell[1265947, 27011, 275, 6, 23, "Print"],
Cell[1266225, 27019, 421, 5, 43, "Print"],
Cell[1266649, 27026, 583, 10, 23, "Print"],
Cell[1267235, 27038, 285, 6, 23, "Print"],
Cell[1267523, 27046, 151, 2, 23, "Print"],
Cell[1267677, 27050, 307, 7, 23, "Print"],
Cell[1267987, 27059, 108, 1, 23, "Print"],
Cell[1268098, 27062, 335, 8, 23, "Print"],
Cell[1268436, 27072, 271, 6, 23, "Print"],
Cell[1268710, 27080, 423, 5, 43, "Print"],
Cell[1269136, 27087, 584, 10, 23, "Print"],
Cell[1269723, 27099, 88, 1, 23, "Print"],
Cell[1269814, 27102, 421, 5, 43, "Print"],
Cell[1270238, 27109, 576, 10, 23, "Print"],
Cell[1270817, 27121, 1084, 20, 43, "Print"],
Cell[1271904, 27143, 443, 9, 23, "Print"],
Cell[1272350, 27154, 153, 2, 23, "Print"],
Cell[1272506, 27158, 114, 1, 23, "Print"],
Cell[1272623, 27161, 139, 2, 23, "Print"],
Cell[1272765, 27165, 154, 2, 23, "Print"],
Cell[1272922, 27169, 171, 2, 23, "Print"],
Cell[1273096, 27173, 119, 1, 23, "Print"],
Cell[1273218, 27176, 128, 2, 23, "Print"],
Cell[1273349, 27180, 275, 4, 119, "Print"],
Cell[1273627, 27186, 489, 10, 23, "Print"],
Cell[1274119, 27198, 303, 4, 43, "Print"],
Cell[1274425, 27204, 417, 9, 23, "Print"],
Cell[1274845, 27215, 379, 8, 23, "Print"],
Cell[1275227, 27225, 119, 1, 23, "Print"],
Cell[1275349, 27228, 162, 2, 23, "Print"],
Cell[1275514, 27232, 200, 5, 23, "Print"],
Cell[1275717, 27239, 117, 1, 23, "Print"],
Cell[1275837, 27242, 421, 9, 23, "Print"],
Cell[1276261, 27253, 362, 8, 23, "Print"],
Cell[1276626, 27263, 201, 5, 23, "Print"],
Cell[1276830, 27270, 373, 8, 23, "Print"],
Cell[1277206, 27280, 200, 5, 23, "Print"],
Cell[1277409, 27287, 117, 1, 23, "Print"],
Cell[1277529, 27290, 357, 8, 23, "Print"],
Cell[1277889, 27300, 364, 8, 23, "Print"],
Cell[1278256, 27310, 199, 5, 23, "Print"],
Cell[1278458, 27317, 375, 8, 23, "Print"],
Cell[1278836, 27327, 197, 5, 23, "Print"],
Cell[1279036, 27334, 115, 1, 23, "Print"],
Cell[1279154, 27337, 355, 8, 23, "Print"],
Cell[1279512, 27347, 362, 8, 23, "Print"],
Cell[1279877, 27357, 197, 5, 23, "Print"],
Cell[1280077, 27364, 373, 8, 23, "Print"],
Cell[1280453, 27374, 198, 5, 23, "Print"],
Cell[1280654, 27381, 117, 1, 23, "Print"],
Cell[1280774, 27384, 357, 8, 23, "Print"],
Cell[1281134, 27394, 357, 8, 23, "Print"],
Cell[1281494, 27404, 199, 5, 23, "Print"],
Cell[1281696, 27411, 373, 8, 23, "Print"],
Cell[1282072, 27421, 198, 5, 23, "Print"],
Cell[1282273, 27428, 117, 1, 23, "Print"],
Cell[1282393, 27431, 421, 9, 23, "Print"],
Cell[1282817, 27442, 362, 8, 23, "Print"],
Cell[1283182, 27452, 201, 5, 23, "Print"],
Cell[1283386, 27459, 373, 8, 23, "Print"],
Cell[1283762, 27469, 200, 5, 23, "Print"],
Cell[1283965, 27476, 115, 1, 23, "Print"],
Cell[1284083, 27479, 421, 9, 23, "Print"],
Cell[1284507, 27490, 96, 1, 23, "Print"],
Cell[1284606, 27493, 220, 5, 23, "Print"],
Cell[1284829, 27500, 224, 5, 23, "Print"],
Cell[1285056, 27507, 362, 8, 23, "Print"],
Cell[1285421, 27517, 201, 5, 23, "Print"],
Cell[1285625, 27524, 373, 8, 23, "Print"],
Cell[1286001, 27534, 200, 5, 23, "Print"],
Cell[1286204, 27541, 115, 1, 23, "Print"],
Cell[1286322, 27544, 421, 9, 23, "Print"],
Cell[1286746, 27555, 96, 1, 23, "Print"],
Cell[1286845, 27558, 222, 5, 23, "Print"],
Cell[1287070, 27565, 222, 5, 23, "Print"],
Cell[1287295, 27572, 275, 4, 119, "Print"],
Cell[1287573, 27578, 490, 10, 23, "Print"],
Cell[1288066, 27590, 303, 4, 43, "Print"],
Cell[1288372, 27596, 413, 9, 23, "Print"],
Cell[1288788, 27607, 204, 3, 23, "Print"],
Cell[1288995, 27612, 412, 8, 23, "Print"],
Cell[1289410, 27622, 186, 2, 23, "Print"],
Cell[1289599, 27626, 187, 5, 23, "Print"],
Cell[1289789, 27633, 191, 2, 23, "Print"],
Cell[1289983, 27637, 368, 8, 23, "Print"],
Cell[1290354, 27647, 191, 2, 23, "Print"],
Cell[1290548, 27651, 368, 8, 23, "Print"],
Cell[1290919, 27661, 233, 5, 23, "Print"],
Cell[1291155, 27668, 155, 2, 23, "Print"],
Cell[1291313, 27672, 397, 8, 23, "Print"],
Cell[1291713, 27682, 170, 2, 23, "Print"],
Cell[1291886, 27686, 397, 8, 23, "Print"],
Cell[1292286, 27696, 364, 8, 23, "Print"],
Cell[1292653, 27706, 263, 6, 23, "Print"],
Cell[1292919, 27714, 179, 2, 23, "Print"],
Cell[1293101, 27718, 260, 6, 23, "Print"],
Cell[1293364, 27726, 289, 6, 23, "Print"],
Cell[1293656, 27734, 180, 2, 23, "Print"],
Cell[1293839, 27738, 398, 8, 23, "Print"],
Cell[1294240, 27748, 193, 2, 23, "Print"],
Cell[1294436, 27752, 399, 8, 23, "Print"],
Cell[1294838, 27762, 422, 10, 23, "Print"],
Cell[1295263, 27774, 364, 8, 23, "Print"],
Cell[1295630, 27784, 201, 5, 23, "Print"],
Cell[1295834, 27791, 375, 8, 23, "Print"],
Cell[1296212, 27801, 511, 10, 23, "Print"],
Cell[1296726, 27813, 155, 2, 23, "Print"],
Cell[1296884, 27817, 94, 1, 23, "Print"],
Cell[1296981, 27820, 155, 2, 23, "Print"],
Cell[1297139, 27824, 89, 1, 23, "Print"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)

